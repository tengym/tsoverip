cscope 15 $HOME/ts_over_ip/tsOverIp -q 0000004029 0000535035
	@app/src/main/main.c

7 
	~"u£r_deföe.h
"

8 
	~"usbdesk.h
"

9 
	~"web.h
"

10 
	~"svc_c⁄åﬁ.h
"

11 
	~"t•¨£_≠i.h
"

12 
	~"¸c.h
"

13 
	~"gos_sys.h
"

15 
	$ã°_maö
()

18 
°r
[4*1024] = {0};

19 
	`TsP¨£_Api_Gë_TsName
(
°r
);

22 
cou¡
 = 0;

25 if((
	`USB_GëDiskP¨tNum
(Ë> 0Ë|| (
cou¡
 >= 100))

29 
	`u¶ìp
(50 * 1000);

30 
cou¡
++;

33 
i
 = 0;

34 
GOS_SVC_TsP¨£_t
 
tsöfo
;

35 
	`mem£t
(&
tsöfo
, 0, (tsinfo));

38 
fûeP©h
[
MAX_THREAD_NUM
][32] = {"sd_1.ts","sd_2.ts","sd_3.ts","hd_1.ts","hd_2.ts"};

41 
fûeP©h
[5][32] = {"hd_1.ts", "hd_2.ts","hd_1.ts","hd_2.ts", "hd_2.ts"};

43 
i
 = 0; i < 5; i++)

45 
tsöfo
.
t•¨£_öfo
[
i
].
¥Ÿocﬁ
 = 0;

46 
tsöfo
.
t•¨£_öfo
[
i
].
p‹t
 = 5000;

47 
	`•rötf
(
tsöfo
.
t•¨£_öfo
[
i
].
∑ddr
, "224.100.100.%d", i+1);

48 
	`•rötf
(
tsöfo
.
t•¨£_öfo
[
i
].
pfûíame
, "%s", 
fûeP©h
[i]);

51 
	`¥ötf
("beginÅoÖarseÅs ....\n");

53 
	`TsP¨£_Api_TsP¨£Pro˚ss
((
TSPARSE_API_INFO_t
 *)&
tsöfo
);

56 
	}
}

58 
	$maö
(
¨gc
, *
¨gv
[])

62 if(
GOS_SUCCESS
 !
	`GOS_SYS_Inô
())

64 
	`DEBUG_ERROR
("GOS_SYS_Init Failed\n");

65  
GOS_FAILURE
;

68 if(
GOS_SUCCESS
 !
	`USB_Inô
(
NULL
))

70 
	`DEBUG_ERROR
("USB_Init Failed\n");

71  
GOS_FAILURE
;

74 if(
GOS_SUCCESS
 !
	`GOS_CRC_Inô
())

76 
	`DEBUG_ERROR
("CRC_Init Failed\n");

77  
GOS_FAILURE
;

80 if(
GOS_SUCCESS
 !
	`GOS_SVC_CONTROL_Inô
())

82 
	`DEBUG_ERROR
("GOS_SVC_CONTROL_Init Failed\n");

83  
GOS_FAILURE
;

86 if(
GOS_SUCCESS
 !
	`TsP¨£_Api_Inô
())

88 
	`DEBUG_ERROR
("TsParse_Api_Init Failed\n");

89  
GOS_FAILURE
;

92 
	`TsP¨£_Api_Re°¨t
();

95 
	`ã°_maö
();

100 
	`¶ìp
(10);

104 
	}
}

	@include/hisilicon/hi_common.h

18 #i‚de‡
__HI_COMMON_H__


19 
	#__HI_COMMON_H__


	)

21 
	~"hi_ty≥.h
"

22 
	~"hi_debug.h
"

24 #ifde‡
__˝lu•lus


25 #i‡
__˝lu•lus


35 
	shiSYS_CONF_S


37 
HI_U32
 
u32Revî£
;

39 }
	tHI_SYS_CONF_S
;

42 
	ehiCHIP_TYPE_E


44 
HI_CHIP_TYPE_HI3716M
,

45 
HI_CHIP_TYPE_HI3716H
,

46 
HI_CHIP_TYPE_HI3716C
,

47 
HI_CHIP_TYPE_HI3716CES
,

49 
HI_CHIP_TYPE_HI3720
,

50 
HI_CHIP_TYPE_HI3712
,

51 
HI_CHIP_TYPE_HI3715
,

53 
HI_CHIP_TYPE_HI3718M
,

54 
HI_CHIP_TYPE_HI3718C
,

55 
HI_CHIP_TYPE_HI3719M
,

56 
HI_CHIP_TYPE_HI3719C
,

57 
HI_CHIP_TYPE_HI3719M_A
,

59 
HI_CHIP_TYPE_BUTT


60 }
	tHI_CHIP_TYPE_E
;

63 
	ehiCHIP_VERSION_E


65 
HI_CHIP_VERSION_V100
 = 0x100,

66 
HI_CHIP_VERSION_V101
 = 0x101,

67 
HI_CHIP_VERSION_V200
 = 0x200,

68 
HI_CHIP_VERSION_V300
 = 0x300,

69 
HI_CHIP_VERSION_V400
 = 0x400,

70 
HI_CHIP_VERSION_BUTT


71 }
	tHI_CHIP_VERSION_E
;

74 
	ehiCHIP_CAP_E


76 
HI_CHIP_CAP_DOLBY
,

77 
HI_CHIP_CAP_DTS
,

78 
HI_CHIP_CAP_ADVCA
,

79 
HI_CHIP_CAP_MACROVISION


80 } 
	tHI_CHIP_CAP_E
;

83 
	shiSYS_VERSION_S


85 
HI_CHIP_TYPE_E
 
íChùTy≥So·
;

86 
HI_CHIP_TYPE_E
 
íChùTy≥H¨dW¨e
;

87 
HI_CHIP_VERSION_E
 
íChùVîsi⁄
;

88 
HI_CHAR
 
aVîsi⁄
[80];

89 
HI_CHAR
 
BoŸVîsi⁄
[80];

90 }
	tHI_SYS_VERSION_S
;

94 
	shiSYS_CHIP_ATTR_S


96 
HI_BOOL
 
bDﬁbySuµ‹t
;

97 }
	tHI_SYS_CHIP_ATTR_S
;

100 
	#MAX_BUFFER_NAME_SIZE
 16

	)

103 
	shiMMZ_BUF_S


105 
HI_CHAR
 
bu‚ame
[
MAX_BUFFER_NAME_SIZE
];

106 
HI_U32
 
phyaddr
;

107 
HI_U8
 *
kî√l_vúaddr
;

108 
HI_U8
 *
u£r_vúaddr
;

109 
HI_U32
 
bufsize
;

110 
HI_U32
 
ovîÊow_thªshﬁd
;

111 
HI_U32
 
undîÊow_thªshﬁd
;

112 }
	tHI_MMZ_BUF_S
;

114 
	shiRECT_S


116 
HI_S32
 
s32X
;

117 
HI_S32
 
s32Y
;

118 
HI_S32
 
s32Width
;

119 
HI_S32
 
s32Height
;

120 } 
	tHI_RECT_S
;

122 
	ehiLAYER_ZORDER_E


124 
HI_LAYER_ZORDER_MOVETOP
 = 0,

125 
HI_LAYER_ZORDER_MOVEUP
,

126 
HI_LAYER_ZORDER_MOVEBOTTOM
,

127 
HI_LAYER_ZORDER_MOVEDOWN
,

128 
HI_LAYER_ZORDER_BUTT


129 } 
	tHI_LAYER_ZORDER_E
;

133 
	shiPROC_SHOW_BUFFER_S


135 
HI_U8
* 
pu8Buf
;

136 
HI_U32
 
u32Size
;

137 
HI_U32
 
u32Off£t
;

138 }
	tHI_PROC_SHOW_BUFFER_S
;

142 
HI_S32
 (* 
	tHI_PROC_SHOW_FN
)(
	tHI_PROC_SHOW_BUFFER_S
 * 
	tp°Buf
, 
	tHI_VOID
 *
	tpPrivD©a
);

146 
HI_S32
 (* 
	tHI_PROC_CMD_FN
)(
	tHI_PROC_SHOW_BUFFER_S
 * 
	tp°Buf
, 
	tHI_U32
 
	tu32Argc
, 
	tHI_U8
 *
	tpu8Argv
[], 
	tHI_VOID
 *
	tpPrivD©a
);

150 
	shiPROC_ENTRY_S


152 
HI_CHAR
 *
pszE¡ryName
;

153 
HI_CHAR
 *
pszDúe˘‹y
;

155 
HI_PROC_SHOW_FN
 
p‚ShowProc
;

156 
HI_PROC_CMD_FN
 
p‚CmdProc
;

157 
HI_VOID
 *
pPrivD©a
;

158 }
	tHI_PROC_ENTRY_S
;

160 #i‚de‡
__KERNEL__


161 
	~<time.h
>

182 
HI_S32
 
HI_SYS_Inô
(
HI_VOID
);

195 
HI_S32
 
HI_SYS_DeInô
(
HI_VOID
);

209 
HI_S32
 
HI_SYS_GëBuûdTime
(
tm
 * 
p°Time
);

222 
HI_S32
 
HI_SYS_GëVîsi⁄
(
HI_SYS_VERSION_S
 *
p°Vîsi⁄
);

236 
HI_S32
 
HI_SYS_GëChùC≠abûôy
(
HI_CHIP_CAP_E
 
íChùC≠
, 
HI_BOOL
 *
pbSuµ‹t
);

248 
HI_S32
 
HI_SYS_GëChùAâr
(
HI_SYS_CHIP_ATTR_S
 *
p°ChùAâr
);

260 
HI_S32
 
HI_SYS_SëC⁄f
(c⁄° 
HI_SYS_CONF_S
 *
p°SysC⁄f
);

272 
HI_S32
 
HI_SYS_GëC⁄f
(
HI_SYS_CONF_S
 *
p°SysC⁄f
);

284 
HI_S32
 
HI_SYS_SëLogLevñ
(
HI_MOD_ID_E
 
íModId
, 
HI_LOG_LEVEL_E
 
íLogLevñ
);

295 
HI_S32
 
HI_SYS_SëLogP©h
(c⁄° 
HI_CHAR
* 
pszLogP©h
);

306 
HI_S32
 
HI_SYS_SëSt‹eP©h
(c⁄° 
HI_CHAR
* 
pszP©h
);

319 
HI_S32
 
HI_SYS_WrôeRegi°î
(
HI_U32
 
u32RegAddr
, HI_U32 
u32VÆue
);

332 
HI_S32
 
HI_SYS_RódRegi°î
(
HI_U32
 
u32RegAddr
, HI_U32 *
pu32VÆue
);

346 
HI_S32
 
HI_SYS_M≠Regi°î
(
HI_U32
 
u32RegAddr
, HI_U32 
u32Lígth
, 
HI_VOID
 *
pVúAddr
);

358 
HI_S32
 
HI_SYS_Unm≠Regi°î
(
HI_VOID
 *
pVúAddr
);

370 
HI_S32
 
HI_SYS_GëTimeSèmpMs
(
HI_U32
 *
pu32TimeMs
);

384 
HI_S32
 
HI_MMZ_MÆloc
(
HI_MMZ_BUF_S
 *
p°Buf
);

397 
HI_S32
 
HI_MMZ_Fªe
(
HI_MMZ_BUF_S
 *
p°Buf
);

412 
HI_VOID
 *
HI_MMZ_New
(
HI_U32
 
u32Size
 , HI_U32 
u32Align
, 
HI_CHAR
 *
ps8MMZName
, HI_CHAR *
ps8MMBName
);

425 
HI_S32
 
HI_MMZ_Dñëe
(
HI_U32
 
u32PhysAddr
);

439 
HI_VOID
 *
HI_MMZ_M≠
(
HI_U32
 
u32PhysAddr
, HI_U32 
u32Cached
);

451 
HI_S32
 
HI_MMZ_Unm≠
(
HI_U32
 
u32PhysAddr
);

465 
HI_S32
 
HI_MMZ_Flush
(
HI_U32
 
u32PhysAddr
);

479 
HI_VOID
 *
HI_MEM_M≠
(
HI_U32
 
u32PhyAddr
, HI_U32 
u32Size
);

492 
HI_S32
 
HI_MEM_Unm≠
(
HI_VOID
 *
pAddrM≠≥d
);

506 
HI_S32
 
HI_MMZ_GëPhyaddr
(
HI_VOID
 * 
pVú
, 
HI_U32
 *
pu32Phyaddr
, HI_U32 *
pu32Size
);

518 
HI_S32
 
HI_MODULE_Regi°î
(
HI_U32
 
u32ModuÀID
, c⁄° 
HI_CHAR
 * 
pszModuÀName
);

530 
HI_S32
 
HI_MODULE_Regi°îByName
(c⁄° 
HI_CHAR
 * 
pszModuÀName
, 
HI_U32
* 
pu32ModuÀID
);

542 
HI_S32
 
HI_MODULE_UnRegi°î
(
HI_U32
 
u32ModuÀID
);

554 
HI_S32
 
HI_PROC_AddDú
(c⁄° 
HI_CHAR
 *
pszName
);

565 
HI_S32
 
HI_PROC_RemoveDú
(c⁄° 
HI_CHAR
 *
pszName
);

578 
HI_S32
 
HI_PROC_AddE¡ry
(
HI_U32
 
u32ModuÀID
, c⁄° 
HI_PROC_ENTRY_S
* 
p°E¡ry
);

591 
HI_S32
 
HI_PROC_RemoveE¡ry
(
HI_U32
 
u32ModuÀID
, c⁄° 
HI_PROC_ENTRY_S
* 
p°E¡ry
);

604 
HI_S32
 
HI_PROC_Prötf
(
HI_PROC_SHOW_BUFFER_S
 *
p°Buf
, c⁄° 
HI_CHAR
 *
pFmt
, ...);

617 
HI_VOID
* 
HI_MEM_MÆloc
(
HI_U32
 
u32ModuÀID
, HI_U32 
u32Size
);

630 
HI_VOID
 
HI_MEM_Fªe
(
HI_U32
 
u32ModuÀID
, HI_VOID* 
pMemAddr
);

644 
HI_VOID
* 
HI_MEM_CÆloc
(
HI_U32
 
u32ModuÀID
, HI_U32 
u32MemBlock
, HI_U32 
u32Size
);

657 
HI_VOID
* 
HI_MEM_RóŒoc
(
HI_U32
 
u32ModuÀID
, HI_VOID *
pMemAddr
, HI_U32 
u32Size
);

660 #ifde‡
MMZ_V2_SUPPORT


674 
HI_VOID
 *
HI_MMZ_New_Sh¨e
(
HI_U32
 
u32Size
 , HI_U32 
u32Align
, 
HI_CHAR
 *
ps8MMZName
, HI_CHAR *
ps8MMBName
);

690 
HI_VOID
 *
HI_MMZ_New_Shm_Com
(
HI_U32
 
u32Size
 , HI_U32 
u32Align
, 
HI_CHAR
 *
ps8MMZName
, HI_CHAR *
ps8MMBName
);

704 
HI_S32
 
HI_MMZ_Gë_Shm_Com
(
HI_U32
 *
pu32PhysAddr
, HI_U32 *
pu32Size
);

717 
HI_S32
 
HI_MMZ_F‹˚_Dñëe
(
HI_U32
 
u32PhysAddr
);

731 
HI_S32
 
HI_MMZ_Flush_Dúty
(
HI_U32
 
u32PhysAddr
, HI_U32 
u32VútAddr
, HI_U32 
u32Size
);

746 
HI_S32
 
HI_MMZ_GëPhyaddr_S
(
HI_VOID
 * 
pVú
, 
HI_U32
 *
pu32Vúaddr_S
, HI_U32 *
pu32Phyaddr_S
, HI_U32 *
pu32Size
);

757 
HI_S32
 
HI_MMZ_›í
(
HI_VOID
);

769 
HI_S32
 
HI_MMZ_˛o£
(
HI_VOID
);

777 #ifde‡
__˝lu•lus


778 #i‡
__˝lu•lus


	@include/hisilicon/hi_debug.h

13 #i‚de‡
__HI_DEBUG_H__


14 
	#__HI_DEBUG_H__


	)

16 #ifde‡
__˝lu•lus


17 #i‡
__˝lu•lus


22 
	~"hi_ty≥.h
"

23 
	~"hi_moduÀ.h
"

25 #i‡
deföed
(
HI_LOG_SUPPORT
) && (0 == HI_LOG_SUPPORT)

26 #unde‡
HI_DEBUG


28 
	#HI_PANIC
(
fmt
...Ëdo{\

	)

31 
	#HI_PRINT
(
fmt
...Ëdo{\

	)

34 
	#HI_DEBUG


	)

36 #ifde‡
__OS_LINUX__


37 #ifde‡
__KERNEL__


38 
	#HI_PRINT
 
¥ötk


	)

40 
	~<°dio.h
>

41 
	#HI_PRINT
 
¥ötf


	)

44 
	#HI_PRINT
 
¥ötf


	)

47 #ifde‡
__KERNEL__


48 
	#HI_PANIC
 
¥ötk


	)

50 
	#HI_PANIC
 
¥ötf


	)

62 
	#HI_LOG_LEVEL_DEFAULT
 
HI_LOG_LEVEL_ERROR


	)

66 
	ehiLOG_LEVEL_E


68 
HI_LOG_LEVEL_FATAL
 = 0,

70 
HI_LOG_LEVEL_ERROR
 = 1,

72 
HI_LOG_LEVEL_WARNING
 = 2,

74 
HI_LOG_LEVEL_INFO
 = 3,

76 
HI_LOG_LEVEL_DBG
 = 4,

79 
HI_LOG_LEVEL_BUTT


80 } 
	tHI_LOG_LEVEL_E
;

85 
	#HI_TRACE_LEVEL_FATAL
 (0)

	)

87 
	#HI_TRACE_LEVEL_ERROR
 (1)

	)

89 
	#HI_TRACE_LEVEL_WARN
 (2)

	)

91 
	#HI_TRACE_LEVEL_INFO
 (3)

	)

93 
	#HI_TRACE_LEVEL_DBG
 (4)

	)

95 #i‚de‡
HI_LOG_LEVEL


96 
	#HI_LOG_LEVEL
 (
HI_TRACE_LEVEL_INFO
)

	)

102 
HI_VOID
 
HI_LogOut
(
HI_U32
 
u32Levñ
, 
HI_MOD_ID_E
 
íModId
,

103 
HI_U8
 *
pFuncName
, 
HI_U32
 
u32LöeNum
, c⁄° *
f‹m©
, ...);

105 #ifde‡
HI_DEBUG


107 
	#HI_TRACE
(
Àvñ
, 
moduÀ_id
, 
fmt
...Ë\

	)

109 
HI_LogOut
(
Àvñ
, 
moduÀ_id
, (
HI_U8
*)
__FUNCTION__
,
__LINE__
,
fmt
); \

112 
	#HI_ASSERT
(
ex¥
Ë\

	)

114 i‡(!(
	gex¥
)) { \

115 
HI_PANIC
("\nASSERT failedát:\n >FileÇame: %s\n >Function : %s\n >Line No. : %d\n >Condition: %s\n", \

116 
__FILE__
,
__FUNCTION__
, 
__LINE__
, #expr); \

121 
	#HI_ASSERT_RET
(
ex¥
Ë\

	)

123 i‡(!(
	gex¥
)) { \

124 
HI_PRINT
("\n<%s %d>: ASSERT Failure{" #expr "}\n", \

125 
__FUNCTION__
, 
__LINE__
); \

126  
	gHI_FAILURE
; \

130 
	#HI_DEBUG_LOG
(
fmt
...Ë\

	)

131 
HI_TRACE
(
HI_LOG_LEVEL_INFO
, 
HI_ID_SYS
, 
fmt
)

138 #i‡(
HI_LOG_LEVEL
 =
HI_TRACE_LEVEL_FATAL
)

139 
	#HI_FATAL_PRINT
(
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_FATAL
, moduÀ_id, fmt)

	)

140 
	#HI_ERR_PRINT
–
moduÀ_id
, 
fmt
...)

	)

141 
	#HI_WARN_PRINT
–
moduÀ_id
, 
fmt
...)

	)

142 
	#HI_INFO_PRINT
–
moduÀ_id
, 
fmt
...)

	)

143 
	#HI_DBG_PRINT
–
moduÀ_id
, 
fmt
...)

	)

146 #ñi‡(
HI_LOG_LEVEL
 =
HI_TRACE_LEVEL_ERROR
)

147 
	#HI_FATAL_PRINT
(
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_FATAL
, moduÀ_id, fmt)

	)

148 
	#HI_ERR_PRINT
–
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_ERROR
, moduÀ_id, fmt)

	)

149 
	#HI_WARN_PRINT
–
moduÀ_id
, 
fmt
...)

	)

150 
	#HI_INFO_PRINT
–
moduÀ_id
, 
fmt
...)

	)

151 
	#HI_DBG_PRINT
–
moduÀ_id
, 
fmt
...)

	)

154 #ñi‡(
HI_LOG_LEVEL
 =
HI_TRACE_LEVEL_WARN
)

155 
	#HI_FATAL_PRINT
(
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_FATAL
, moduÀ_id, fmt)

	)

156 
	#HI_ERR_PRINT
–
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_ERROR
, moduÀ_id, fmt)

	)

157 
	#HI_WARN_PRINT
–
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_WARN
, moduÀ_id, fmt)

	)

158 
	#HI_INFO_PRINT
–
moduÀ_id
, 
fmt
...)

	)

159 
	#HI_DBG_PRINT
–
moduÀ_id
, 
fmt
...)

	)

162 #ñi‡(
HI_LOG_LEVEL
 =
HI_TRACE_LEVEL_INFO
)

163 
	#HI_FATAL_PRINT
(
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_FATAL
, moduÀ_id, fmt)

	)

164 
	#HI_ERR_PRINT
–
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_ERROR
, moduÀ_id, fmt)

	)

165 
	#HI_WARN_PRINT
–
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_WARN
, moduÀ_id, fmt)

	)

166 
	#HI_INFO_PRINT
–
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_INFO
, moduÀ_id, fmt)

	)

167 
	#HI_DBG_PRINT
–
moduÀ_id
, 
fmt
...)

	)

171 
	#HI_FATAL_PRINT
(
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_FATAL
, moduÀ_id, fmt)

	)

172 
	#HI_ERR_PRINT
–
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_ERROR
, moduÀ_id, fmt)

	)

173 
	#HI_WARN_PRINT
–
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_WARN
, moduÀ_id, fmt)

	)

174 
	#HI_INFO_PRINT
–
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_INFO
, moduÀ_id, fmt)

	)

175 
	#HI_DBG_PRINT
–
moduÀ_id
, 
fmt
...Ë
	`HI_TRACE
(
HI_TRACE_LEVEL_DBG
, moduÀ_id, fmt)

	)

179 
	#HI_FATAL_PRINT
(
moduÀ_id
, 
fmt
...)

	)

180 
	#HI_ERR_PRINT
–
moduÀ_id
, 
fmt
...)

	)

181 
	#HI_WARN_PRINT
–
moduÀ_id
, 
fmt
...)

	)

182 
	#HI_INFO_PRINT
–
moduÀ_id
, 
fmt
...)

	)

183 
	#HI_DBG_PRINT
–
moduÀ_id
, 
fmt
...)

	)

184 
	#HI_TRACE
(
Àvñ
, 
moduÀ_id
, 
fmt
...)

	)

185 
	#HI_ASSERT
(
ex¥
)

	)

186 
	#HI_ASSERT_RET
(
ex¥
)

	)

187 
	#HI_DEBUG_LOG
(
fmt
...)

	)

193 
	#MKSTR
(
exp
Ë#exp

	)

194 
	#MKMARCOTOSTR
(
exp
Ë
	`MKSTR
”xp)

	)

195 
	#VERSION_STRING
 ("SDK_VERSION:["
	`MKMARCOTOSTR
(
SDK_VERSION
)"] Buûd Time:["
__DATE__
", "
__TIME__
"]")

	)

200 
	#HI_MODULE_DECLARE
(
MODULE_NAME
Ë\

	)

201 
HI_U32
 
	gg_u32ModuÀId
 = 
HI_INVALID_MODULE_ID
; \

202 
HI_S32
 
__©åibuã__
((
c⁄°ru˘‹
(200))Ë
öô_moduÀ_id
() \

204  
HI_MODULE_Regi°îByName
(
MODULE_NAME
, &
g_u32ModuÀId
); \

206 
HI_S32
 
__©åibuã__
((
de°ru˘‹
(200))Ë
deöô_moduÀ_id
() \

208  
HI_MODULE_UnRegi°î
(
g_u32ModuÀId
); \

213 
	#MODULE_ID
 (
g_u32ModuÀId
)

	)

217 
	#HI_MODULE_FATAL
(
pszF‹m©
...Ë
	`HI_FATAL_PRINT
(
MODULE_ID
,pszF‹m©)

	)

218 
	#HI_MODULE_ERROR
(
pszF‹m©
...Ë
	`HI_ERR_PRINT
(
MODULE_ID
,pszF‹m©)

	)

219 
	#HI_MODULE_WARN
(
pszF‹m©
...Ë
	`HI_WARN_PRINT
(
MODULE_ID
,pszF‹m©)

	)

220 
	#HI_MODULE_DEBUG
(
pszF‹m©
...Ë
	`HI_DBG_PRINT
(
MODULE_ID
,pszF‹m©)

	)

221 
	#HI_MODULE_INFO
(
pszF‹m©
...Ë
	`HI_INFO_PRINT
(
MODULE_ID
,pszF‹m©)

	)

225 
	#HI_MODULE_MALLOC
(
u32Size
Ë
	`HI_MEM_MÆloc
(
MODULE_ID
, u32Size)

	)

226 
	#HI_MODULE_FREE
(
pMemAddr
Ë
	`HI_MEM_Fªe
(
MODULE_ID
,ÖMemAddr)

	)

227 
	#HI_MODULE_CALLOC
(
u32MemBlock
, 
u32Size
Ë
	`HI_MEM_CÆloc
(
MODULE_ID
, u32MemBlock, u32Size)

	)

228 
	#HI_MODULE_REALLOC
(
pMemAddr
, 
u32Size
Ë
	`HI_MEM_RóŒoc
(
MODULE_ID
,ÖMemAddr, u32Size)

	)

231 #ifde‡
__˝lu•lus


232 #i‡
__˝lu•lus


	@include/hisilicon/hi_error_mpi.h

22 #i‚de‡
__HI_UNF_MPI_ERRORCODE_H__


23 
	#__HI_UNF_MPI_ERRORCODE_H__


	)

25 #ifde‡
__˝lu•lus


26 #i‡
__˝lu•lus


36 
	#HI_ERR_DISP_DEV_NOT_EXIST
 (
HI_S32
)(0x80100001)

	)

37 
	#HI_ERR_DISP_NOT_DEV_FILE
 (
HI_S32
)(0x80100002)

	)

38 
	#HI_ERR_DISP_DEV_OPEN_ERR
 (
HI_S32
)(0x80100003)

	)

39 
	#HI_ERR_DISP_DEV_CLOSE_ERR
 (
HI_S32
)(0x80100004)

	)

40 
	#HI_ERR_DISP_NULL_PTR
 (
HI_S32
)(0x80100005)

	)

41 
	#HI_ERR_DISP_NO_INIT
 (
HI_S32
)(0x80100006)

	)

42 
	#HI_ERR_DISP_INVALID_PARA
 (
HI_S32
)(0x80100007)

	)

43 
	#HI_ERR_DISP_CREATE_ERR
 (
HI_S32
)(0x80100008)

	)

44 
	#HI_ERR_DISP_DESTROY_ERR
 (
HI_S32
)(0x80100009)

	)

45 
	#HI_ERR_DISP_NOT_EXIST
 (
HI_S32
)(0x8010000A)

	)

46 
	#HI_ERR_DISP_INVALID_OPT
 (
HI_S32
)(0x8010000B)

	)

47 
	#HI_ERR_DISP_NOT_SUPPORT_FMT
 (
HI_S32
)(0x8010000C)

	)

48 
	#HI_ERR_DISP_NOT_OPEN
 (
HI_S32
)(0x8010000D)

	)

49 
	#HI_ERR_DISP_SRC_UNAVAILABLE
 (
HI_S32
)(0x8010000E)

	)

50 
	#HI_ERR_DISP_NOT_SUPPORT
 (
HI_S32
)(0x8010000F)

	)

51 
	#HI_ERR_DISP_UNKNOWN
 (
HI_S32
)(0x801000FF)

	)

52 
	#HI_ERR_DISP_TIMEOUT
 (
HI_S32
)(0x801000F1)

	)

53 
	#HI_ERR_DISP_MALLOC_MAP_ERR
 (
HI_S32
)(0x801000F2)

	)

57 
	#HI_ERR_VO_DEV_NOT_EXIST
 (
HI_S32
)(0x80110001)

	)

58 
	#HI_ERR_VO_NOT_DEV_FILE
 (
HI_S32
)(0x80110002)

	)

59 
	#HI_ERR_VO_DEV_OPEN_ERR
 (
HI_S32
)(0x80110003)

	)

60 
	#HI_ERR_VO_DEV_CLOSE_ERR
 (
HI_S32
)(0x80110004)

	)

61 
	#HI_ERR_VO_NULL_PTR
 (
HI_S32
)(0x80110005)

	)

62 
	#HI_ERR_VO_NO_INIT
 (
HI_S32
)(0x80110006)

	)

63 
	#HI_ERR_VO_INVALID_PARA
 (
HI_S32
)(0x80110007)

	)

64 
	#HI_ERR_VO_CREATE_ERR
 (
HI_S32
)(0x80110008)

	)

65 
	#HI_ERR_VO_DESTROY_ERR
 (
HI_S32
)(0x80110009)

	)

66 
	#HI_ERR_VO_NOT_EXIST
 (
HI_S32
)(0x80110010)

	)

67 
	#HI_ERR_VO_INVALID_OPT
 (
HI_S32
)(0x80110030)

	)

68 
	#HI_ERR_VO_WIN_NOT_EXIST
 (
HI_S32
)(0x80110040)

	)

69 
	#HI_ERR_VO_WIN_NOT_ENABLE
 (
HI_S32
)(0x80110041)

	)

70 
	#HI_ERR_VO_WIN_UNSUPPORT
 (
HI_S32
)(0x80110042)

	)

71 
	#HI_ERR_VO_TIMEOUT
 (
HI_S32
)(0x80110043)

	)

72 
	#HI_ERR_VO_OPERATION_DENIED
 (
HI_S32
)(0x80110044)

	)

73 
	#HI_ERR_VO_SLAVE_WIN_LOST
 (
HI_S32
)(0x80110045)

	)

74 
	#HI_ERR_VO_FRAME_INFO_ERROR
 (
HI_S32
)(0x80110046)

	)

75 
	#HI_ERR_VO_FRAME_RELEASE_FAILED
 (
HI_S32
)(0x80110047)

	)

76 
	#HI_ERR_VO_NO_FRAME_TO_RELEASE
 (
HI_S32
)(0x80110048)

	)

77 
	#HI_ERR_VO_ADD_PROC_ERR
 (
HI_S32
)(0x80110049)

	)

78 
	#HI_ERR_VO_MALLOC_FAILED
 (
HI_S32
)(0x80110050)

	)

79 
	#HI_ERR_VO_DEPEND_DEVICE_NOT_READY
 (
HI_S32
)(0x80110051)

	)

80 
	#HI_ERR_VO_BUFQUE_FULL
 (
HI_S32
)(0x80110052)

	)

81 
	#HI_ERR_VO_BUFQUE_EMPTY
 (
HI_S32
)(0x80110053)

	)

90 
	#HI_ERR_VDEC_NOT_OPEN
 (
HI_S32
)(0x80120001)

	)

91 
	#HI_ERR_VDEC_INVALID_PARA
 (
HI_S32
)(0x80120002)

	)

92 
	#HI_ERR_VDEC_NULL_PTR
 (
HI_S32
)(0x80120003)

	)

93 
	#HI_ERR_VDEC_NOT_SUPPORT
 (
HI_S32
)(0x80120004)

	)

94 
	#HI_ERR_VDEC_TIMEOUT
 (
HI_S32
)(0x80120005)

	)

95 
	#HI_ERR_VDEC_MALLOC_FAILED
 (
HI_S32
)(0x80120044)

	)

96 
	#HI_ERR_VDEC_CREATECH_FAILED
 (
HI_S32
)(0x80120047)

	)

97 
	#HI_ERR_VDEC_DESTROYCH_FAILED
 (
HI_S32
)(0x80120048)

	)

98 
	#HI_ERR_VDEC_INVALID_CHANID
 (
HI_S32
)(0x80120049)

	)

99 
	#HI_ERR_VDEC_RESETCH_FAILED
 (
HI_S32
)(0x80120050)

	)

100 
	#HI_ERR_VDEC_SETATTR_FAILED
 (
HI_S32
)(0x80120051)

	)

101 
	#HI_ERR_VDEC_GETATTR_FAILED
 (
HI_S32
)(0x80120052)

	)

102 
	#HI_ERR_VDEC_SENDSTREAM_FAILED
 (
HI_S32
)(0x80120053)

	)

103 
	#HI_ERR_VDEC_RECEIVE_FAILED
 (
HI_S32
)(0x80120054)

	)

104 
	#HI_ERR_VDEC_DISCARD_PRIDATA
 (
HI_S32
)(0x80120055)

	)

105 
	#HI_ERR_VDEC_RELEASEFRAME_FAILED
 (
HI_S32
)(0x80120056)

	)

106 
	#HI_ERR_VDEC_RELEASEPRI_FAILED
 (
HI_S32
)(0x80120057)

	)

107 
	#HI_ERR_VDEC_NOT_INIT
 (
HI_S32
)(0x80120059)

	)

108 
	#HI_ERR_VDEC_USERCOPY_ERR
 (
HI_S32
)(0x8012005A)

	)

109 
	#HI_ERR_VDEC_LIST_EMPTY
 (
HI_S32
)(0x8012005B)

	)

110 
	#HI_ERR_VDEC_INVALID_STATE
 (
HI_S32
)(0x8012005C)

	)

111 
	#HI_ERR_VDEC_NOT_ENABLE
 (
HI_S32
)(0x80120060)

	)

112 
	#HI_ERR_VDEC_BUFFER_NOT_ATTACH
 (
HI_S32
)(0x80120061)

	)

113 
	#HI_ERR_VDEC_BUFFER_REQUIRE_INVALID
 (
HI_S32
)(0x80120062)

	)

114 
	#HI_ERR_VDEC_BUFFER_ATTACHED
 (
HI_S32
)(0x80120063)

	)

115 
	#HI_ERR_VDEC_BUFFER_FULL
 (
HI_S32
)(0x80120064)

	)

117 
	#HI_ERR_AO_NOT_INIT
 (
HI_S32
)(0x80130001)

	)

118 
	#HI_ERR_AO_INVALID_PARA
 (
HI_S32
)(0x80130002)

	)

119 
	#HI_ERR_AO_NULL_PTR
 (
HI_S32
)(0x80130003)

	)

120 
	#HI_ERR_AO_INVALID_ID
 (
HI_S32
)(0x80130004)

	)

121 
	#HI_ERR_AO_USED
 (
HI_S32
)(0x80130005)

	)

122 
	#HI_ERR_AO_NOTSUPPORT
 (
HI_S32
)(0x80130006)

	)

123 
	#HI_ERR_AO_USERCOPY_ERR
 (
HI_S32
)(0x80130007)

	)

124 
	#HI_ERR_AO_SOUND_NOT_OPEN
 (
HI_S32
)(0x80130008)

	)

125 
	#HI_ERR_AO_DEV_NOT_OPEN
 (
HI_S32
)(0x80130041)

	)

126 
	#HI_ERR_AO_CREATE_FAIL
 (
HI_S32
)(0x80130042)

	)

127 
	#HI_ERR_AO_OUT_BUF_FULL
 (
HI_S32
)(0x80130046)

	)

128 
	#HI_ERR_AO_INVALID_OUTFRAME
 (
HI_S32
)(0x80130047)

	)

129 
	#HI_ERR_AO_DATASIZE_EXCEED
 (
HI_S32
)(0x80130048)

	)

130 
	#HI_ERR_AO_INVALID_INFRAME
 (
HI_S32
)(0x80130049)

	)

131 
	#HI_ERR_AO_INBUF_EMPTY
 (
HI_S32
)(0x8013004a)

	)

132 
	#HI_ERR_AO_INVALID_PORT
 (
HI_S32
)(0x8013004c)

	)

133 
	#HI_ERR_AO_SENDMUTE
 (
HI_S32
)(0x8013004d)

	)

134 
	#HI_ERR_AO_VIRTUALBUF_EMPTY
 (
HI_S32
)(0x8013004e)

	)

135 
	#HI_ERR_AO_PAUSE_STATE
 (
HI_S32
)(0x8013004f)

	)

136 
	#HI_ERR_AO_OUTPORT_NOT_ATTATCH
 (
HI_S32
)(0x80130050)

	)

137 
	#HI_ERR_AO_CAST_TIMEOUT
 (
HI_S32
)(0x80130051)

	)

140 
	#HI_ERR_ADEC_DEV_NOT_OPEN
 (
HI_S32
)(0x80140001)

	)

141 
	#HI_ERR_ADEC_INVALID_PARA
 (
HI_S32
)(0x80140002)

	)

142 
	#HI_ERR_ADEC_NULL_PTR
 (
HI_S32
)(0x80140003)

	)

143 
	#HI_ERR_ADEC_IN_BUF_FULL
 (
HI_S32
)(0x80140004)

	)

144 
	#HI_ERR_ADEC_OUT_BUF_EMPTY
 (
HI_S32
)(0x80140005)

	)

145 
	#HI_ERR_ADEC_OUT_VOLUME
 (
HI_S32
)(0x80140006)

	)

146 
	#HI_ERR_ADEC_IN_PTSBUF_FULL
 (
HI_S32
)(0x80140007)

	)

148 
	#HI_ERR_DMX_NOT_INIT
 (
HI_S32
)(0x80150001)

	)

149 
	#HI_ERR_DMX_INVALID_PARA
 (
HI_S32
)(0x80150002)

	)

150 
	#HI_ERR_DMX_NULL_PTR
 (
HI_S32
)(0x80150003)

	)

151 
	#HI_ERR_DMX_NOT_SUPPORT
 (
HI_S32
)(0x80150004)

	)

152 
	#HI_ERR_DMX_TIMEOUT
 (
HI_S32
)(0x80150005)

	)

153 
	#HI_ERR_DMX_ALLOC_MEM_FAILED
 (
HI_S32
)(0x80150006)

	)

154 
	#HI_ERR_DMX_BUSY
 (
HI_S32
)(0x80150007)

	)

155 
	#HI_ERR_DMX_NOATTACH_PORT
 (
HI_S32
)(0x80150008)

	)

156 
	#HI_ERR_DMX_ATTACHED_PORT
 (
HI_S32
)(0x80150009)

	)

157 
	#HI_ERR_DMX_RECREAT_TSBUFFER
 (
HI_S32
)(0x8015000a)

	)

158 
	#HI_ERR_DMX_UNMATCH_CHAN
 (
HI_S32
)(0x8015000b)

	)

159 
	#HI_ERR_DMX_NOFREE_CHAN
 (
HI_S32
)(0x8015000c)

	)

160 
	#HI_ERR_DMX_OPENING_CHAN
 (
HI_S32
)(0x8015000d)

	)

161 
	#HI_ERR_DMX_NOT_OPEN_CHAN
 (
HI_S32
)(0x8015000e)

	)

162 
	#HI_ERR_DMX_ATTACHED_FILTER
 (
HI_S32
)(0x8015000f)

	)

163 
	#HI_ERR_DMX_NOATTACH_FILTER
 (
HI_S32
)(0x80150010)

	)

164 
	#HI_ERR_DMX_UNMATCH_FILTER
 (
HI_S32
)(0x80150011)

	)

165 
	#HI_ERR_DMX_NOFREE_FILTER
 (
HI_S32
)(0x80150012)

	)

166 
	#HI_ERR_DMX_NOATTACH_KEY
 (
HI_S32
)(0x80150013)

	)

167 
	#HI_ERR_DMX_UNMATCH_KEY
 (
HI_S32
)(0x80150014)

	)

168 
	#HI_ERR_DMX_NOFREE_KEY
 (
HI_S32
)(0x80150015)

	)

169 
	#HI_ERR_DMX_ATTACHED_KEY
 (
HI_S32
)(0x80150016)

	)

170 
	#HI_ERR_DMX_NOAVAILABLE_BUF
 (
HI_S32
)(0x80150017)

	)

171 
	#HI_ERR_DMX_NOAVAILABLE_DATA
 (
HI_S32
)(0x80150018)

	)

172 
	#HI_ERR_DMX_REACQUIRE_BUF
 (
HI_S32
)(0x80150019)

	)

173 
	#HI_ERR_DMX_OCCUPIED_PID
 (
HI_S32
)(0x80150020)

	)

174 
	#HI_ERR_DMX_MMAP_FAILED
 (
HI_S32
)(0x80150021)

	)

175 
	#HI_ERR_DMX_MUNMAP_FAILED
 (
HI_S32
)(0x80150022)

	)

176 
	#HI_ERR_DMX_EMPTY_BUFFER
 (
HI_S32
)(0x80150023)

	)

177 
	#HI_ERR_DMX_NOT_START_REC_CHAN
 (
HI_S32
)(0x80150030)

	)

178 
	#HI_ERR_DMX_STARTING_REC_CHAN
 (
HI_S32
)(0x80150031)

	)

179 
	#HI_ERR_DMX_NOAVAILABLE_EXCLUDEPID
 (
HI_S32
)(0x80150032)

	)

182 
	#HI_ERR_VI_NO_INIT
 (
HI_S32
)(0x801A0001)

	)

183 
	#HI_ERR_VI_INVALID_PARA
 (
HI_S32
)(0x801A0002)

	)

184 
	#HI_ERR_VI_NULL_PTR
 (
HI_S32
)(0x801A0003)

	)

185 
	#HI_ERR_VI_INVALID_CHNID
 (
HI_S32
)(0x801A0004)

	)

186 
	#HI_ERR_VI_DEV_OPENED
 (
HI_S32
)(0x801A0005)

	)

187 
	#HI_ERR_VI_DEV_NOT_EXIST
 (
HI_S32
)(0x801A0006)

	)

188 
	#HI_ERR_VI_NOT_DEV_FILE
 (
HI_S32
)(0x801A0007)

	)

189 
	#HI_ERR_VI_NO_CHN_LEFT
 (
HI_S32
)(0x801A0008)

	)

190 
	#HI_ERR_VI_BUSY
 (
HI_S32
)(0x801A0009)

	)

191 
	#HI_ERR_VI_CHN_NOT_EXIST
 (
HI_S32
)(0x801A000A)

	)

192 
	#HI_ERR_VI_CHN_INVALID_OPT
 (
HI_S32
)(0x801A000B)

	)

193 
	#HI_ERR_VI_CHN_INVALID_STAT
 (
HI_S32
)(0x801A000C)

	)

194 
	#HI_ERR_VI_CHN_INIT_BUF_ERR
 (
HI_S32
)(0x801A000D)

	)

195 
	#HI_ERR_VI_BUF_EMPTY
 (
HI_S32
)(0x801A000E)

	)

196 
	#HI_ERR_VI_BUF_FULL
 (
HI_S32
)(0x801A000F)

	)

197 
	#HI_ERR_VI_NOT_SUPPORT
 (
HI_S32
)(0x801A0010)

	)

199 
	#HI_ERR_AI_NOT_INIT
 (
HI_S32
)(0x801B0001)

	)

200 
	#HI_ERR_AI_INVALID_PARA
 (
HI_S32
)(0x801B0002)

	)

201 
	#HI_ERR_AI_NULL_PTR
 (
HI_S32
)(0x801B0003)

	)

202 
	#HI_ERR_AI_INVALID_ID
 (
HI_S32
)(0x801B0004)

	)

203 
	#HI_ERR_AI_DEV_OPENED
 (
HI_S32
)(0x801B0005)

	)

204 
	#HI_ERR_AI_NOTSUPPORT
 (
HI_S32
)(0x801B0006)

	)

205 
	#HI_ERR_AI_USERCOPY
 (
HI_S32
)(0x801B0007)

	)

206 
	#HI_ERR_AI_BUFEMPTY
 (
HI_S32
)(0x801B0008)

	)

209 
	#HI_ERR_AENC_DEV_NOT_OPEN
 (
HI_S32
)(0x801C0001)

	)

210 
	#HI_ERR_AENC_INVALID_PARA
 (
HI_S32
)(0x801C0002)

	)

211 
	#HI_ERR_AENC_NULL_PTR
 (
HI_S32
)(0x801C0003)

	)

212 
	#HI_ERR_AENC_OUT_BUF_FULL
 (
HI_S32
)(0x801C0006)

	)

213 
	#HI_ERR_AENC_INVALID_OUTFRAME
 (
HI_S32
)(0x801C0007)

	)

214 
	#HI_ERR_AENC_DATASIZE_EXCEED
 (
HI_S32
)(0x801C0008)

	)

215 
	#HI_ERR_AENC_CREATECH_FAIL
 (
HI_S32
)(0x801C0009)

	)

216 
	#HI_ERR_AENC_IN_BUF_FULL
 (
HI_S32
)(0x801C000a)

	)

217 
	#HI_ERR_AENC_CH_NOT_OPEN
 (
HI_S32
)(0x801C000b)

	)

218 
	#HI_ERR_AENC_OUT_BUF_EMPTY
 (
HI_S32
)(0x801C000c)

	)

219 
	#HI_ERR_AENC_OUT_BUF_BAD
 (
HI_S32
)(0x801C000d)

	)

220 
	#HI_ERR_AENC_IN_BUF_UNEMPTY
 (
HI_S32
)(0x801C000e)

	)

221 
	#HI_ERR_AENC_CH_NOT_SUPPORT
 (
HI_S32
)(0x801C000f)

	)

224 
	#HI_ERR_VENC_NO_INIT
 (
HI_S32
)(0x801D0001)

	)

225 
	#HI_ERR_VENC_INVALID_PARA
 (
HI_S32
)(0x801D0002)

	)

226 
	#HI_ERR_VENC_NULL_PTR
 (
HI_S32
)(0x801D0003)

	)

227 
	#HI_ERR_VENC_INVALID_CHNID
 (
HI_S32
)(0x801D0004)

	)

228 
	#HI_ERR_VENC_DEV_OPENED
 (
HI_S32
)(0x801D0005)

	)

229 
	#HI_ERR_VENC_DEV_NOT_EXIST
 (
HI_S32
)(0x801D0006)

	)

230 
	#HI_ERR_VENC_NOT_DEV_FILE
 (
HI_S32
)(0x801D0007)

	)

231 
	#HI_ERR_VENC_CREATE_ERR
 (
HI_S32
)(0x801D0008)

	)

232 
	#HI_ERR_VENC_DESTROY_ERR
 (
HI_S32
)(0x801D0009)

	)

233 
	#HI_ERR_VENC_CHN_NOT_EXIST
 (
HI_S32
)(0x801D000A)

	)

234 
	#HI_ERR_VENC_CHN_INVALID_STAT
 (
HI_S32
)(0x801D000B)

	)

235 
	#HI_ERR_VENC_CHN_NO_ATTACH
 (
HI_S32
)(0x801D000C)

	)

236 
	#HI_ERR_VENC_BUF_EMPTY
 (
HI_S32
)(0x801D000D)

	)

237 
	#HI_ERR_VENC_CHN_RELEASE_ERR
 (
HI_S32
)(0x801D000E)

	)

238 
	#HI_ERR_VENC_NOT_SUPPORT
 (
HI_S32
)(0x801D000F)

	)

240 
	#HI_ERR_SIO_AI_INVALID_DEVID
 (
HI_S32
)(0x801E0001)

	)

241 
	#HI_ERR_SIO_AI_INVALID_CHNID
 (
HI_S32
)(0x801E0002)

	)

242 
	#HI_ERR_SIO_AI_ILLEGAL_PARAM
 (
HI_S32
)(0x801E0003)

	)

243 
	#HI_ERR_SIO_AI_NULL_PTR
 (
HI_S32
)(0x801E0004)

	)

244 
	#HI_ERR_SIO_AI_NOT_CONFIG
 (
HI_S32
)(0x801E0005)

	)

245 
	#HI_ERR_SIO_AI_NOT_SURPPORT
 (
HI_S32
)(0x801E0006)

	)

246 
	#HI_ERR_SIO_AI_NOT_PERM
 (
HI_S32
)(0x801E0007)

	)

247 
	#HI_ERR_SIO_AI_NOT_ENABLED
 (
HI_S32
)(0x801E0008)

	)

248 
	#HI_ERR_SIO_AI_NOMEM
 (
HI_S32
)(0x801E0009)

	)

249 
	#HI_ERR_SIO_AI_NOBUF
 (
HI_S32
)(0x801E000A)

	)

250 
	#HI_ERR_SIO_AI_BUF_EMPTY
 (
HI_S32
)(0x801E000B)

	)

251 
	#HI_ERR_SIO_AI_BUF_FULL
 (
HI_S32
)(0x801E000C)

	)

252 
	#HI_ERR_SIO_AI_SYS_NOTREADY
 (
HI_S32
)(0x801E000D)

	)

253 
	#HI_ERR_SIO_AI_BUSY
 (
HI_S32
)(0x801E000E)

	)

255 
	#HI_ERR_SIO_AO_INVALID_DEVID
 (
HI_S32
)(0x801F0001)

	)

256 
	#HI_ERR_SIO_AO_INVALID_CHNID
 (
HI_S32
)(0x801F0002)

	)

257 
	#HI_ERR_SIO_AO_ILLEGAL_PARAM
 (
HI_S32
)(0x801F0003)

	)

258 
	#HI_ERR_SIO_AO_NULL_PTR
 (
HI_S32
)(0x801F0004)

	)

259 
	#HI_ERR_SIO_AO_NOT_CONFIG
 (
HI_S32
)(0x801F0005)

	)

260 
	#HI_ERR_SIO_AO_NOT_SURPPORT
 (
HI_S32
)(0x801F0006)

	)

261 
	#HI_ERR_SIO_AO_NOT_PERM
 (
HI_S32
)(0x801F0007)

	)

262 
	#HI_ERR_SIO_AO_NOT_ENABLED
 (
HI_S32
)(0x801F0008)

	)

263 
	#HI_ERR_SIO_AO_NOMEM
 (
HI_S32
)(0x801F0009)

	)

264 
	#HI_ERR_SIO_AO_NOBUF
 (
HI_S32
)(0x801F000A)

	)

265 
	#HI_ERR_SIO_AO_BUF_EMPTY
 (
HI_S32
)(0x801F000B)

	)

266 
	#HI_ERR_SIO_AO_BUF_FULL
 (
HI_S32
)(0x801F000C)

	)

267 
	#HI_ERR_SIO_AO_SYS_NOTREADY
 (
HI_S32
)(0x801F000D)

	)

268 
	#HI_ERR_SIO_AO_BUSY
 (
HI_S32
)(0x801F000E)

	)

270 
	#HI_ERR_HDMI_NOT_INIT
 (
HI_S32
)(0x80210001)

	)

271 
	#HI_ERR_HDMI_INVALID_PARA
 (
HI_S32
)(0x80210002)

	)

272 
	#HI_ERR_HDMI_NUL_PTR
 (
HI_S32
)(0x80210003)

	)

273 
	#HI_ERR_HDMI_DEV_NOT_OPEN
 (
HI_S32
)(0x80210004)

	)

274 
	#HI_ERR_HDMI_DEV_NOT_CONNECT
 (
HI_S32
)(0x80210005)

	)

275 
	#HI_ERR_HDMI_READ_SINK_FAILED
 (
HI_S32
)(0x80210006)

	)

276 
	#HI_ERR_HDMI_INIT_ALREADY
 (
HI_S32
)(0x80210007)

	)

277 
	#HI_ERR_HDMI_CALLBACK_ALREADY
 (
HI_S32
)(0x80210008)

	)

278 
	#HI_ERR_HDMI_INVALID_CALLBACK
 (
HI_S32
)(0x80210009)

	)

279 
	#HI_ERR_HDMI_FEATURE_NO_USPPORT
 (
HI_S32
)(0x8021000a)

	)

280 
	#HI_ERR_HDMI_BUS_BUSY
 (
HI_S32
)(0x8021000b)

	)

282 
	#HI_ERR_PVR_NOT_INIT
 (
HI_S32
)(0x80300001)

	)

283 
	#HI_ERR_PVR_INVALID_PARA
 (
HI_S32
)(0x80300002)

	)

284 
	#HI_ERR_PVR_NUL_PTR
 (
HI_S32
)(0x80300003)

	)

285 
	#HI_ERR_PVR_CHN_NOT_INIT
 (
HI_S32
)(0x80300004)

	)

286 
	#HI_ERR_PVR_INVALID_CHNID
 (
HI_S32
)(0x80300005)

	)

287 
	#HI_ERR_PVR_NO_CHN_LEFT
 (
HI_S32
)(0x80300006)

	)

288 
	#HI_ERR_PVR_ALREADY
 (
HI_S32
)(0x80300007)

	)

289 
	#HI_ERR_PVR_BUSY
 (
HI_S32
)(0x80300008)

	)

290 
	#HI_ERR_PVR_NO_MEM
 (
HI_S32
)(0x80300009)

	)

291 
	#HI_ERR_PVR_NOT_SUPPORT
 (
HI_S32
)(0x8030000A)

	)

292 
	#HI_ERR_PVR_RETRY
 (
HI_S32
)(0x8030000B)

	)

293 
	#HI_ERR_PVR_FILE_EXIST
 (
HI_S32
)(0x80300011)

	)

294 
	#HI_ERR_PVR_FILE_NOT_EXIST
 (
HI_S32
)(0x80300012)

	)

295 
	#HI_ERR_PVR_FILE_CANT_OPEN
 (
HI_S32
)(0x80300013)

	)

296 
	#HI_ERR_PVR_FILE_CANT_CLOSE
 (
HI_S32
)(0x80300014)

	)

297 
	#HI_ERR_PVR_FILE_CANT_SEEK
 (
HI_S32
)(0x80300015)

	)

298 
	#HI_ERR_PVR_FILE_CANT_WRITE
 (
HI_S32
)(0x80300016)

	)

299 
	#HI_ERR_PVR_FILE_CANT_READ
 (
HI_S32
)(0x80300017)

	)

300 
	#HI_ERR_PVR_FILE_INVALID_FNAME
 (
HI_S32
)(0x80300018)

	)

301 
	#HI_ERR_PVR_FILE_TILL_START
 (
HI_S32
)(0x80300019)

	)

302 
	#HI_ERR_PVR_FILE_TILL_END
 (
HI_S32
)(0x8030001A)

	)

303 
	#HI_ERR_PVR_FILE_DISC_FULL
 (
HI_S32
)(0x8030001B)

	)

304 
	#HI_ERR_PVR_REC_INVALID_STATE
 (
HI_S32
)(0x80300021)

	)

305 
	#HI_ERR_PVR_REC_INVALID_DMXID
 (
HI_S32
)(0x80300022)

	)

306 
	#HI_ERR_PVR_REC_INVALID_FSIZE
 (
HI_S32
)(0x80300023)

	)

307 
	#HI_ERR_PVR_REC_INVALID_UDSIZE
 (
HI_S32
)(0x80300024)

	)

308 
	#HI_ERR_PVR_PLAY_INVALID_STATE
 (
HI_S32
)(0x80300031)

	)

309 
	#HI_ERR_PVR_PLAY_INVALID_DMXID
 (
HI_S32
)(0x80300032)

	)

310 
	#HI_ERR_PVR_PLAY_INVALID_TSBUFFER
 (
HI_S32
)(0x80300033)

	)

311 
	#HI_ERR_PVR_PLAY_INVALID_PACKETBUFFER
 (
HI_S32
)(0x80300034)

	)

312 
	#HI_ERR_PVR_INDEX_CANT_MKIDX
 (
HI_S32
)(0x80300041)

	)

313 
	#HI_ERR_PVR_INDEX_FORMAT_ERR
 (
HI_S32
)(0x80300042)

	)

314 
	#HI_ERR_PVR_INDEX_DATA_ERR
 (
HI_S32
)(0x80300043)

	)

315 
	#HI_ERR_PVR_INTF_EVENT_INVAL
 (
HI_S32
)(0x80300051)

	)

316 
	#HI_ERR_PVR_INTF_EVENT_NOREG
 (
HI_S32
)(0x80300052)

	)

318 
	#HI_ERR_AVPLAY_DEV_NOT_EXIST
 (
HI_S32
)(0x80310001)

	)

319 
	#HI_ERR_AVPLAY_NOT_DEV_FILE
 (
HI_S32
)(0x80310002)

	)

320 
	#HI_ERR_AVPLAY_DEV_OPEN_ERR
 (
HI_S32
)(0x80310003)

	)

321 
	#HI_ERR_AVPLAY_DEV_CLOSE_ERR
 (
HI_S32
)(0x80310004)

	)

322 
	#HI_ERR_AVPLAY_NULL_PTR
 (
HI_S32
)(0x80310005)

	)

323 
	#HI_ERR_AVPLAY_DEV_NO_INIT
 (
HI_S32
)(0x80310006)

	)

324 
	#HI_ERR_AVPLAY_INVALID_PARA
 (
HI_S32
)(0x80310007)

	)

325 
	#HI_ERR_AVPLAY_CREATE_ERR
 (
HI_S32
)(0x80310008)

	)

326 
	#HI_ERR_AVPLAY_DESTROY_ERR
 (
HI_S32
)(0x80310009)

	)

327 
	#HI_ERR_AVPLAY_INVALID_OPT
 (
HI_S32
)(0x8031000A)

	)

328 
	#HI_ERR_AVPLAY_NOT_SUPPORT
 (
HI_S32
)(0x8031000B)

	)

330 
	#HI_ERR_SYNC_DEV_NOT_EXIST
 (
HI_S32
)(0x80320001)

	)

331 
	#HI_ERR_SYNC_NOT_DEV_FILE
 (
HI_S32
)(0x80320002)

	)

332 
	#HI_ERR_SYNC_DEV_OPEN_ERR
 (
HI_S32
)(0x80320003)

	)

333 
	#HI_ERR_SYNC_DEV_CLOSE_ERR
 (
HI_S32
)(0x80320004)

	)

334 
	#HI_ERR_SYNC_NULL_PTR
 (
HI_S32
)(0x80320005)

	)

335 
	#HI_ERR_SYNC_DEV_NO_INIT
 (
HI_S32
)(0x80320006)

	)

336 
	#HI_ERR_SYNC_INVALID_PARA
 (
HI_S32
)(0x80320007)

	)

337 
	#HI_ERR_SYNC_CREATE_ERR
 (
HI_S32
)(0x80320008)

	)

338 
	#HI_ERR_SYNC_DESTROY_ERR
 (
HI_S32
)(0x80320009)

	)

339 
	#HI_ERR_SYNC_INVALID_OPT
 (
HI_S32
)(0x8032000A)

	)

341 
	#HI_ERR_MCE_DEV_NOT_EXIST
 (
HI_S32
)(0x80330001)

	)

342 
	#HI_ERR_MCE_NOT_DEVICE
 (
HI_S32
)(0x80330002)

	)

343 
	#HI_ERR_MCE_DEV_OPEN_ERR
 (
HI_S32
)(0x80330003)

	)

344 
	#HI_ERR_MCE_DEV_NOT_INIT
 (
HI_S32
)(0x80330004)

	)

345 
	#HI_ERR_MCE_PTR_NULL
 (
HI_S32
)(0x80330005)

	)

346 
	#HI_ERR_MCE_PARAM_INVALID
 (
HI_S32
)(0x80330006)

	)

347 
	#HI_ERR_MCE_GET_MTDINFO_ERR
 (
HI_S32
)(0x80330007)

	)

348 
	#HI_ERR_MCE_MTD_OPEN
 (
HI_S32
)(0x80330008)

	)

349 
	#HI_ERR_MCE_MTD_CLOSE
 (
HI_S32
)(0x80330009)

	)

350 
	#HI_ERR_MCE_MTD_READ
 (
HI_S32
)(0x80330010)

	)

351 
	#HI_ERR_MCE_MTD_WRITE
 (
HI_S32
)(0x80330011)

	)

352 
	#HI_ERR_MCE_MTD_GETINFO
 (
HI_S32
)(0x80330012)

	)

353 
	#HI_ERR_MCE_MTD_ERASE
 (
HI_S32
)(0x80330013)

	)

354 
	#HI_ERR_MCE_MEM_ALLC
 (
HI_S32
)(0x80330014)

	)

355 
	#HI_ERR_MCE_INVALID_OPT
 (
HI_S32
)(0x80330015)

	)

357 
	#HI_ERR_VP_PTR_NULL
 (
HI_S32
)(0x80340001)

	)

358 
	#HI_ERR_VP_NOT_INIT
 (
HI_S32
)(0x80340002)

	)

359 
	#HI_ERR_VP_DEV_NOT_EXIST
 (
HI_S32
)(0x80340003)

	)

360 
	#HI_ERR_VP_NOT_DEV_FILE
 (
HI_S32
)(0x80340004)

	)

361 
	#HI_ERR_VP_DEV_OPEN_ERR
 (
HI_S32
)(0x80340005)

	)

362 
	#HI_ERR_VP_INVALID_PARA
 (
HI_S32
)(0x80340006)

	)

363 
	#HI_ERR_VP_NOT_SUPPORT
 (
HI_S32
)(0x80340007)

	)

364 
	#HI_ERR_VP_INVALID_HANDLE
 (
HI_S32
)(0x80340008)

	)

365 
	#HI_ERR_VP_HANDLE_NOTEXIST
 (
HI_S32
)(0x80340009)

	)

366 
	#HI_ERR_VP_NOT_READY
 (
HI_S32
)(0x8034000a)

	)

367 
	#HI_ERR_VP_ILLEGAL_STATE
 (
HI_S32
)(0x8034000b)

	)

369 
	#HI_ERR_IR_OPEN_ERR
 (
HI_S32
)(0x80410001)

	)

370 
	#HI_ERR_IR_CLOSE_ERR
 (
HI_S32
)(0x80410002)

	)

371 
	#HI_ERR_IR_NOT_INIT
 (
HI_S32
)(0x80410003)

	)

372 
	#HI_ERR_IR_INVALID_PARA
 (
HI_S32
)(0x80410004)

	)

373 
	#HI_ERR_IR_NULL_PTR
 (
HI_S32
)(0x80410005)

	)

374 
	#HI_ERR_IR_READ_FAILED
 (
HI_S32
)(0x80410006)

	)

375 
	#HI_ERR_IR_ENABLE_FAILED
 (
HI_S32
)(0x80410007)

	)

376 
	#HI_ERR_IR_SET_BLOCKTIME_FAILED
 (
HI_S32
)(0x80410008)

	)

377 
	#HI_ERR_IR_SET_FETCHMETHOD_FAILED
 (
HI_S32
)(0x80410009)

	)

378 
	#HI_ERR_IR_SET_KEYUP_FAILED
 (
HI_S32
)(0x8041000A)

	)

379 
	#HI_ERR_IR_SET_REPEAT_FAILED
 (
HI_S32
)(0x8041000B)

	)

380 
	#HI_ERR_IR_SET_REPKEYTIMEOUT_FAILED
 (
HI_S32
)(0x8041000C)

	)

381 
	#HI_ERR_IR_RESET_FAILED
 (
HI_S32
)(0x8041000D)

	)

382 
	#HI_ERR_IR_ENABLE_PROT_FAILED
 (
HI_S32
)(0x8041000E)

	)

383 
	#HI_ERR_IR_DISABLE_PROT_FAILED
 (
HI_S32
)(0x8041000F)

	)

384 
	#HI_ERR_IR_GET_PROTENABLE_FAILED
 (
HI_S32
)(0x80410010)

	)

385 
	#HI_ERR_IR_SETFORMAT_FAILED
 (
HI_S32
)(0x80410011)

	)

386 
	#HI_ERR_IR_UNSUPPORT
 (
HI_S32
)(0x80410012)

	)

388 
	#HI_ERR_RTC_NOT_INIT
 (
HI_S32
)(0x80420001)

	)

389 
	#HI_ERR_RTC_REPEAT_INIT
 (
HI_S32
)(0x80420002)

	)

390 
	#HI_ERR_RTC_INVALID_POINT
 (
HI_S32
)(0x80420003)

	)

391 
	#HI_ERR_RTC_INVALID_PARA
 (
HI_S32
)(0x80420004)

	)

392 
	#HI_ERR_RTC_FAILED_INIT
 (
HI_S32
)(0x80420005)

	)

393 
	#HI_ERR_RTC_FAILED_SETTIME
 (
HI_S32
)(0x80420006)

	)

394 
	#HI_ERR_RTC_FAILED_GETTIME
 (
HI_S32
)(0x80420007)

	)

395 
	#HI_ERR_RTC_FAILED_ALARMENABLE
 (
HI_S32
)(0x80420008)

	)

396 
	#HI_ERR_RTC_FAILED_ALARMDISABLE
 (
HI_S32
)(0x80420009)

	)

397 
	#HI_ERR_RTC_FAILED_SETALARM
 (
HI_S32
)(0x8042000A)

	)

398 
	#HI_ERR_RTC_FAILED_GETALARM
 (
HI_S32
)(0x8042000B)

	)

400 
	#HI_ERR_WDG_NOT_INIT
 (
HI_S32
)(0x80430001)

	)

401 
	#HI_ERR_WDG_REPEAT_INIT
 (
HI_S32
)(0x80430002)

	)

402 
	#HI_ERR_WDG_INVALID_POINT
 (
HI_S32
)(0x80430003)

	)

403 
	#HI_ERR_WDG_INVALID_PARA
 (
HI_S32
)(0x80430004)

	)

404 
	#HI_ERR_WDG_FAILED_INIT
 (
HI_S32
)(0x80430005)

	)

405 
	#HI_ERR_WDG_FAILED_SETTIMEOUT
 (
HI_S32
)(0x80430006)

	)

406 
	#HI_ERR_WDG_FAILED_ENABLE
 (
HI_S32
)(0x80430007)

	)

407 
	#HI_ERR_WDG_FAILED_DISABLE
 (
HI_S32
)(0x80430008)

	)

408 
	#HI_ERR_WDG_FAILED_CLEARWDG
 (
HI_S32
)(0x80430009)

	)

409 
	#HI_ERR_WDG_FAILED_RESET
 (
HI_S32
)(0x8043000A)

	)

410 
	#HI_ERR_WDG_FAILED_RESMODE
 (
HI_S32
)(0x8043000B)

	)

411 
	#HI_ERR_WDG_NOT_SUPPORT
 (
HI_S32
)(0x8043000C)

	)

412 
	#HI_ERR_WDG_FAILED_GETTIMEOUT
 (
HI_S32
)(0x8043000D)

	)

413 
	#HI_ERR_WDG_FAILED_DEINIT
 (
HI_S32
)(0x8043000E)

	)

415 
	#HI_ERR_I2C_OPEN_ERR
 (
HI_S32
)(0x80440001)

	)

416 
	#HI_ERR_I2C_CLOSE_ERR
 (
HI_S32
)(0x80440002)

	)

417 
	#HI_ERR_I2C_NOT_INIT
 (
HI_S32
)(0x80440003)

	)

418 
	#HI_ERR_I2C_INVALID_PARA
 (
HI_S32
)(0x80440004)

	)

419 
	#HI_ERR_I2C_NULL_PTR
 (
HI_S32
)(0x80440005)

	)

420 
	#HI_ERR_I2C_COPY_DATA_ERR
 (
HI_S32
)(0x80440006)

	)

421 
	#HI_ERR_I2C_MALLOC_ERR
 (
HI_S32
)(0x80440007)

	)

422 
	#HI_ERR_I2C_WRITE_TIMEOUT
 (
HI_S32
)(0x80440008)

	)

423 
	#HI_ERR_I2C_READ_TIMEOUT
 (
HI_S32
)(0x80440009)

	)

425 
	#HI_ERR_SCI_OPEN_ERR
 (
HI_S32
)(0x80450001)

	)

426 
	#HI_ERR_SCI_CLOSE_ERR
 (
HI_S32
)(0x80450002)

	)

427 
	#HI_ERR_SCI_NOT_INIT
 (
HI_S32
)(0x80450003)

	)

428 
	#HI_ERR_SCI_INVALID_PARA
 (
HI_S32
)(0x80450004)

	)

429 
	#HI_ERR_SCI_NULL_PTR
 (
HI_S32
)(0x80450005)

	)

430 
	#HI_ERR_SCI_INVALID_OPT
 (
HI_S32
)(0x80450006)

	)

431 
	#HI_ERR_SCI_SEND_ERR
 (
HI_S32
)(0x80450007)

	)

432 
	#HI_ERR_SCI_RECEIVE_ERR
 (
HI_S32
)(0x80450008)

	)

433 
	#HI_ERR_SCI_NO_ATR
 (
HI_S32
)(0x80450009)

	)

434 
	#HI_ERR_SCI_PPS_PTYPE_ERR
 (
HI_S32
)(0x8045000A)

	)

435 
	#HI_ERR_SCI_PPS_FACTOR_ERR
 (
HI_S32
)(0x8045000B)

	)

436 
	#HI_ERR_SCI_PPS_NOTSUPPORT_ERR
 (
HI_S32
)(0x8045000C)

	)

437 
	#HI_ERR_SCI_NOTSUPPORT
 (
HI_S32
)(0x8045000D)

	)

439 
	#HI_ERR_ETH_NOT_INIT
 (
HI_S32
)(0x80460001)

	)

440 
	#HI_ERR_ETH_REPEAT_INIT
 (
HI_S32
)(0x80460002)

	)

441 
	#HI_ERR_ETH_INVALID_POINT
 (
HI_S32
)(0x80460003)

	)

442 
	#HI_ERR_ETH_INVALID_PARA
 (
HI_S32
)(0x80460004)

	)

443 
	#HI_ERR_ETH_FAILED_INIT
 (
HI_S32
)(0x80460005)

	)

445 
	#HI_ERR_GPIO_OPEN_ERR
 (
HI_S32
)(0x80470001)

	)

446 
	#HI_ERR_GPIO_CLOSE_ERR
 (
HI_S32
)(0x80470002)

	)

447 
	#HI_ERR_GPIO_NOT_INIT
 (
HI_S32
)(0x80470003)

	)

448 
	#HI_ERR_GPIO_INVALID_PARA
 (
HI_S32
)(0x80470004)

	)

449 
	#HI_ERR_GPIO_NULL_PTR
 (
HI_S32
)(0x80470005)

	)

450 
	#HI_ERR_GPIO_INVALID_OPT
 (
HI_S32
)(0x80470006)

	)

451 
	#HI_ERR_GPIO_FAILED_SETINT
 (
HI_S32
)(0x80470007)

	)

452 
	#HI_ERR_GPIO_FAILED_SETENABLE
 (
HI_S32
)(0x80470008)

	)

453 
	#HI_ERR_GPIO_FAILED_GETINT
 (
HI_S32
)(0x80470009)

	)

454 
	#HI_ERR_GPIO_GETINT_TIMEOUT
 (
HI_S32
)(0x8047000A)

	)

455 
	#HI_ERR_GPIO_INTTYPE_NOT_SUPPORT
 (
HI_S32
)(0x8047000B)

	)

456 
	#HI_ERR_GPIO_NOT_SUPPORT
 (
HI_S32
)(0x8047000C)

	)

457 
	#HI_ERR_GPIO_FAILED_SETOUTPUTTYPE
 (
HI_S32
)(0x8047000D)

	)

458 
	#HI_ERR_GPIO_FAILED_GETOUTPUTTYPE
 (
HI_S32
)(0x8047000E)

	)

460 
	#HI_ERR_DMAC_NOT_INIT
 (
HI_S32
)(0x80480001)

	)

461 
	#HI_ERR_DMAC_REPEAT_INIT
 (
HI_S32
)(0x80480002)

	)

462 
	#HI_ERR_DMAC_INVALID_POINT
 (
HI_S32
)(0x80480003)

	)

463 
	#HI_ERR_DMAC_INVALID_PARA
 (
HI_S32
)(0x80480004)

	)

464 
	#HI_ERR_DMAC_FAILED_INIT
 (
HI_S32
)(0x80480005)

	)

465 
	#HI_ERR_DMAC_FAILED_GETCHANNEL
 (
HI_S32
)(0x80480006)

	)

466 
	#HI_ERR_DMAC_FAILED_MEMTRANS
 (
HI_S32
)(0x80480007)

	)

467 
	#HI_ERR_DMAC_FAILED_PERTRANS
 (
HI_S32
)(0x80480008)

	)

468 
	#HI_ERR_DMAC_FAILED_GETSTAT
 (
HI_S32
)(0x80480009)

	)

469 
	#HI_ERR_DMAC_FAILED_LISTRESET
 (
HI_S32
)(0x8048000A)

	)

470 
	#HI_ERR_DMAC_FAILED_ADDLIST
 (
HI_S32
)(0x8048000B)

	)

471 
	#HI_ERR_DMAC_FAILED_LISTTRANS
 (
HI_S32
)(0x8048000C)

	)

473 
	#HI_ERR_PMOC_NOT_INIT
 (
HI_S32
)(0x80490001)

	)

474 
	#HI_ERR_PMOC_REPEAT_INIT
 (
HI_S32
)(0x80490002)

	)

475 
	#HI_ERR_PMOC_INVALID_POINT
 (
HI_S32
)(0x80490003)

	)

476 
	#HI_ERR_PMOC_INVALID_PARA
 (
HI_S32
)(0x80490004)

	)

477 
	#HI_ERR_PMOC_FAILED_INIT
 (
HI_S32
)(0x80490005)

	)

478 
	#HI_ERR_PMOC_FAILED_MODE
 (
HI_S32
)(0x80490006)

	)

479 
	#HI_ERR_PMOC_FAILED_READMODE
 (
HI_S32
)(0x80490007)

	)

480 
	#HI_ERR_PMOC_FAILED_IRPOWERVAL
 (
HI_S32
)(0x80490008)

	)

481 
	#HI_ERR_PMOC_FAILED_KEYLEDPOWERVAL
 (
HI_S32
)(0x80490009)

	)

482 
	#HI_ERR_PMOC_INVALID_MODE
 (
HI_S32
)(0x8049000A)

	)

483 
	#HI_ERR_PMOC_FAILED_STANDBY
 (
HI_S32
)(0x8049000B)

	)

484 
	#HI_ERR_PMOC_FAILED_SETDEV
 (
HI_S32
)(0x8049000C)

	)

485 
	#HI_ERR_PMOC_FAILED_GETPERIOD
 (
HI_S32
)(0x8049000D)

	)

487 
	#HI_ERR_TUNER_NOT_INIT
 (
HI_S32
)(0x804A0001)

	)

488 
	#HI_ERR_TUNER_NOT_OPEN
 (
HI_S32
)(0x804A0002)

	)

489 
	#HI_ERR_TUNER_INVALID_POINT
 (
HI_S32
)(0x804A0003)

	)

490 
	#HI_ERR_TUNER_INVALID_PARA
 (
HI_S32
)(0x804A0004)

	)

491 
	#HI_ERR_TUNER_FAILED_INIT
 (
HI_S32
)(0x804A0005)

	)

492 
	#HI_ERR_TUNER_FAILED_CONNECT
 (
HI_S32
)(0x804A0006)

	)

493 
	#HI_ERR_TUNER_FAILED_GETSTATUS
 (
HI_S32
)(0x804A0007)

	)

494 
	#HI_ERR_TUNER_FAILED_GETSIGNALSTRENGTH
 (
HI_S32
)(0x804A0008)

	)

495 
	#HI_ERR_TUNER_FAILED_GETBER
 (
HI_S32
)(0x804A0009)

	)

496 
	#HI_ERR_TUNER_FAILED_GETSNR
 (
HI_S32
)(0x804A000A)

	)

497 
	#HI_ERR_TUNER_FAILED_SETTSTYPE
 (
HI_S32
)(0x804A000B)

	)

498 
	#HI_ERR_TUNER_FAILED_SELECTTUNER
 (
HI_S32
)(0x804A000C)

	)

499 
	#HI_ERR_TUNER_FAILED_SELECTI2CCHANNEL
 (
HI_S32
)(0x804A000D)

	)

500 
	#HI_ERR_TUNER_FAILED_LOWCONS
 (
HI_S32
)(0x804A000E)

	)

501 
	#HI_ERR_TUNER_FAILED_NORMALMODE
 (
HI_S32
)(0x804A000F)

	)

502 
	#HI_ERR_TUNER_FAILED_REGRW
 (
HI_S32
)(0x804A0010)

	)

503 
	#HI_ERR_TUNER_FAILED_SETTUNER
 (
HI_S32
)(0x804A0011)

	)

504 
	#HI_ERR_TUNER_NOT_CONNECT
 (
HI_S32
)(0x804A0012)

	)

505 
	#HI_ERR_TUNER_INVALID_PORT
 (
HI_S32
)(0x804A0013)

	)

506 
	#HI_ERR_TUNER_FAILED_SETQAMINSIDE
 (
HI_S32
)(0x804A0014)

	)

507 
	#HI_ERR_TUNER_FAILED_SELECTSYMBOLRATE
 (
HI_S32
)(0x804A0015)

	)

508 
	#HI_ERR_TUNER_FAILED_GETSIGNALQUALITY
 (
HI_S32
)(0x804A0016)

	)

509 
	#HI_ERR_TUNER_FAILED_GETSIGNALINFO
 (
HI_S32
)(0x804A0017)

	)

510 
	#HI_ERR_TUNER_FAILED_BLINDSCAN
 (
HI_S32
)(0x804A0018)

	)

511 
	#HI_ERR_TUNER_FAILED_LNBCTRL
 (
HI_S32
)(0x804A0019)

	)

512 
	#HI_ERR_TUNER_FAILED_SWITCH
 (
HI_S32
)(0x804A001A)

	)

513 
	#HI_ERR_TUNER_FAILED_DISEQC
 (
HI_S32
)(0x804A001B)

	)

514 
	#HI_ERR_TUNER_FAILED_STANDBY
 (
HI_S32
)(0x804A001C)

	)

515 
	#HI_ERR_TUNER_FAILED_WAKEUP
 (
HI_S32
)(0x804A001D)

	)

516 
	#HI_ERR_TUNER_FAILED_DISABLE
 (
HI_S32
)(0x804A001E)

	)

517 
	#HI_ERR_TUNER_FAILED_ENABLE
 (
HI_S32
)(0x804A001F)

	)

518 
	#HI_ERR_TUNER_FAILED_SETPLPID
 (
HI_S32
)(0x804A0020)

	)

519 
	#HI_ERR_TUNER_FAILED_GETPLPNUM
 (
HI_S32
)(0x804A0021)

	)

520 
	#HI_ERR_TUNER_FAILED_GETPLPTYPE
 (
HI_S32
)(0x804A0022)

	)

521 
	#HI_ERR_TUNER_FAILED_SETTSOUT
 (
HI_S32
)(0x804A0023)

	)

522 
	#HI_ERR_TUNER_FAILED_SETSATATTR
 (
HI_S32
)(0x804A0024)

	)

523 
	#HI_ERR_TUNER_FAILED_SAMPLEDATA
 (
HI_S32
)(0x804A0025)

	)

524 
	#HI_ERR_TUNER_FAILED_SETTERATTR
 (
HI_S32
)(0x804A0026)

	)

526 
	#HI_ERR_KEYLED_NOT_INIT
 (
HI_S32
)(0x804B0001)

	)

527 
	#HI_ERR_KEYLED_INVALID_PARA
 (
HI_S32
)(0x804B0002)

	)

528 
	#HI_ERR_KEYLED_NULL_PTR
 (
HI_S32
)(0x804B0003)

	)

529 
	#HI_ERR_KEYLED_NO_NEW_KEY
 (
HI_S32
)(0x804B0004)

	)

530 
	#HI_ERR_KEYLED_TIMEOUT
 (
HI_S32
)(0x804B0005)

	)

531 
	#HI_ERR_KEYLED_FAILED_SETMODE
 (
HI_S32
)(0x804B0006)

	)

532 
	#HI_ERR_KEYLED_FAILED_DISPLAY
 (
HI_S32
)(0x804B0007)

	)

535 
	#HI_ERR_E2PROM_OPEN_ERR
 (
HI_S32
)(0x804C0001)

	)

536 
	#HI_ERR_E2PROM_CLOSE_ERR
 (
HI_S32
)(0x804C0002)

	)

537 
	#HI_ERR_E2PROM_NOT_INIT
 (
HI_S32
)(0x804C0003)

	)

538 
	#HI_ERR_E2PROM_INVALID_PARA
 (
HI_S32
)(0x804C0004)

	)

539 
	#HI_ERR_E2PROM_NULL_PTR
 (
HI_S32
)(0x804C0005)

	)

540 
	#HI_ERR_E2PROM_COPY_DATA_ERR
 (
HI_S32
)(0x804C0006)

	)

541 
	#HI_ERR_E2PROM_MALLOC_ERR
 (
HI_S32
)(0x804C0007)

	)

544 
	#HI_ERR_CIPHER_NOT_INIT
 (
HI_S32
)(0x804D0001)

	)

545 
	#HI_ERR_CIPHER_INVALID_HANDLE
 (
HI_S32
)(0x804D0002)

	)

546 
	#HI_ERR_CIPHER_INVALID_POINT
 (
HI_S32
)(0x804D0003)

	)

547 
	#HI_ERR_CIPHER_INVALID_PARA
 (
HI_S32
)(0x804D0004)

	)

548 
	#HI_ERR_CIPHER_FAILED_INIT
 (
HI_S32
)(0x804D0005)

	)

549 
	#HI_ERR_CIPHER_FAILED_GETHANDLE
 (
HI_S32
)(0x804D0006)

	)

550 
	#HI_ERR_CIPHER_FAILED_RELEASEHANDLE
 (
HI_S32
)(0x804D0007)

	)

551 
	#HI_ERR_CIPHER_FAILED_CONFIGAES
 (
HI_S32
)(0x804D0008)

	)

552 
	#HI_ERR_CIPHER_FAILED_CONFIGDES
 (
HI_S32
)(0x804D0009)

	)

553 
	#HI_ERR_CIPHER_FAILED_ENCRYPT
 (
HI_S32
)(0x804D000A)

	)

554 
	#HI_ERR_CIPHER_FAILED_DECRYPT
 (
HI_S32
)(0x804D000B)

	)

555 
	#HI_ERR_CIPHER_BUSY
 (
HI_S32
)(0x804D000C)

	)

558 
	#HI_ERR_CA_OPEN_ERR
 (
HI_S32
)(0x804E0001)

	)

559 
	#HI_ERR_CA_CLOSE_ERR
 (
HI_S32
)(0x804E0002)

	)

560 
	#HI_ERR_CA_NOT_INIT
 (
HI_S32
)(0x804E0003)

	)

561 
	#HI_ERR_CA_COPY_DATA_ERR
 (
HI_S32
)(0x804E0004)

	)

562 
	#HI_ERR_CA_INVALID_PARA
 (
HI_S32
)(0x804E0005)

	)

563 
	#HI_ERR_CA_WAIT_TIMEOUT
 (
HI_S32
)(0x804E0006)

	)

564 
	#HI_ERR_CA_CW_DECRYPT
 (
HI_S32
)(0x804E0007)

	)

565 
	#HI_ERR_CA_R2R_DECRYPT
 (
HI_S32
)(0x804E0008)

	)

566 
	#HI_ERR_CA_R2R_ENCRYPT
 (
HI_S32
)(0x804E0009)

	)

567 
	#HI_ERR_CA_SETPARAM_AGAIN
 (
HI_S32
)(0x804E000A)

	)

568 
	#HI_ERR_CA_DBG_INERR
 (
HI_S32
)(0x804E000B)

	)

569 
	#HI_ERR_CA_NOT_CONFIG
 (
HI_S32
)(0x804E000C)

	)

570 
	#HI_ERR_CA_LPK_DECRYPT
 (
HI_S32
)(0x804E000D)

	)

571 
	#HI_ERR_CA_NOT_SUPPORT
 (
HI_S32
)(0x804E000E)

	)

572 
	#HI_ERR_CA_SWPK_ENCRYPT
 (
HI_S32
)(0x804E000F)

	)

574 
	#HI_ERR_PM_COPY_DATA_ERR
 (
HI_S32
)(0x804F0001)

	)

575 
	#HI_ERR_PM_INVALID_PARAM
 (
HI_S32
)(0x804F0002)

	)

577 
	#HI_ERR_CI_NOT_INIT
 (
HI_S32
)(0x80500001)

	)

578 
	#HI_ERR_CI_OPEN_ERR
 (
HI_S32
)(0x80500002)

	)

579 
	#HI_ERR_CI_CLOSE_ERR
 (
HI_S32
)(0x80500003)

	)

580 
	#HI_ERR_CI_INVALID_PARA
 (
HI_S32
)(0x80500004)

	)

581 
	#HI_ERR_CI_NO_MEMORY
 (
HI_S32
)(0x80500005)

	)

582 
	#HI_ERR_CI_TIMEOUT
 (
HI_S32
)(0x80500006)

	)

583 
	#HI_ERR_CI_REG_READ_ERR
 (
HI_S32
)(0x80500007)

	)

584 
	#HI_ERR_CI_REG_WRITE_ERR
 (
HI_S32
)(0x80500008)

	)

585 
	#HI_ERR_CI_IO_READ_ERR
 (
HI_S32
)(0x80500009)

	)

586 
	#HI_ERR_CI_IO_WRITE_ERR
 (
HI_S32
)(0x8050000A)

	)

587 
	#HI_ERR_CI_ATTR_READ_ERR
 (
HI_S32
)(0x8050000B)

	)

588 
	#HI_ERR_CI_ATTR_WRITE_ERR
 (
HI_S32
)(0x8050000C)

	)

589 
	#HI_ERR_CI_CANNOT_POWEROFF
 (
HI_S32
)(0x8050000D)

	)

590 
	#HI_ERR_CI_PCCD_DEVICE_BUSY
 (
HI_S32
)(0x8050000E)

	)

591 
	#HI_ERR_CI_PCCD_CIS_READ
 (
HI_S32
)(0x8050000F)

	)

592 
	#HI_ERR_CI_UNSUPPORT
 (
HI_S32
)(0x80500010)

	)

593 
	#HI_ERR_CI_UNKONWN
 (
HI_S32
)(0x80500011)

	)

596 
	#HI_ERR_PDM_DEV_NOT_EXIST
 (
HI_S32
)(0x80330001)

	)

597 
	#HI_ERR_PDM_NOT_DEVICE
 (
HI_S32
)(0x80330002)

	)

598 
	#HI_ERR_PDM_DEV_OPEN_ERR
 (
HI_S32
)(0x80330003)

	)

599 
	#HI_ERR_PDM_DEV_NOT_INIT
 (
HI_S32
)(0x80330004)

	)

600 
	#HI_ERR_PDM_PTR_NULL
 (
HI_S32
)(0x80330005)

	)

601 
	#HI_ERR_PDM_PARAM_INVALID
 (
HI_S32
)(0x80330006)

	)

602 
	#HI_ERR_PDM_GET_MTDINFO_ERR
 (
HI_S32
)(0x80330007)

	)

603 
	#HI_ERR_PDM_MTD_OPEN
 (
HI_S32
)(0x80330008)

	)

604 
	#HI_ERR_PDM_MTD_CLOSE
 (
HI_S32
)(0x80330009)

	)

605 
	#HI_ERR_PDM_MTD_READ
 (
HI_S32
)(0x80330010)

	)

606 
	#HI_ERR_PDM_MTD_WRITE
 (
HI_S32
)(0x80330011)

	)

607 
	#HI_ERR_PDM_MTD_GETINFO
 (
HI_S32
)(0x80330012)

	)

608 
	#HI_ERR_PDM_MTD_ERASE
 (
HI_S32
)(0x80330013)

	)

609 
	#HI_ERR_PDM_MEM_ALLC
 (
HI_S32
)(0x80330014)

	)

610 
	#HI_ERR_PDM_INVALID_OPT
 (
HI_S32
)(0x80330015)

	)

612 
	#HI_ERR_PWM_DEV_NOT_EXIST
 (
HI_S32
)(0x80510001)

	)

613 
	#HI_ERR_PWM_NOT_INIT
 (
HI_S32
)(0x80510002)

	)

614 
	#HI_ERR_PWM_OPEN_ERR
 (
HI_S32
)(0x80510003)

	)

615 
	#HI_ERR_PWM_CLOSE_ERR
 (
HI_S32
)(0x80510004)

	)

616 
	#HI_ERR_PWM_INVALID_PARA
 (
HI_S32
)(0x80510005)

	)

617 
	#HI_ERR_PWM_INVALID_OPT
 (
HI_S32
)(0x80510006)

	)

618 
	#HI_ERR_PWM_UNSUPPORT
 (
HI_S32
)(0x80510007)

	)

620 
	#HI_ERR_PQ_DEV_NOT_EXIST
 (
HI_S32
)(0x80600001)

	)

621 
	#HI_ERR_PQ_NOT_DEV_FILE
 (
HI_S32
)(0x80600002)

	)

622 
	#HI_ERR_PQ_DEV_OPEN_ERR
 (
HI_S32
)(0x80600003)

	)

623 
	#HI_ERR_PQ_DEV_CLOSE_ERR
 (
HI_S32
)(0x80600004)

	)

624 
	#HI_ERR_PQ_NULL_PTR
 (
HI_S32
)(0x80600005)

	)

625 
	#HI_ERR_PQ_NO_INIT
 (
HI_S32
)(0x80600006)

	)

626 
	#HI_ERR_PQ_INVALID_PARA
 (
HI_S32
)(0x80600007)

	)

627 
	#HI_ERR_PQ_PARAM_NOT_BURN
 (
HI_S32
)(0x80600008)

	)

634 #ifde‡
__˝lu•lus


635 #i‡
__˝lu•lus


	@include/hisilicon/hi_module.h

15 #i‚de‡
__HI_MODULE_H__


16 
	#__HI_MODULE_H__


	)

18 #ifde‡
__˝lu•lus


19 #i‡
__˝lu•lus


24 
	#HI_INVALID_MODULE_ID
 (0xffffffff)

	)

25 
	#HI_MAX_USER_MODULE_NUMBER
 (256)

	)

28 
	ehiMOD_ID_E


30 
HI_ID_STB
 = 0,

33 
HI_ID_SYS
 = 1,

34 
HI_ID_MODULE
 ,

35 
HI_ID_LOG
 ,

36 
HI_ID_PROC
 ,

37 
HI_ID_MEM
 ,

38 
HI_ID_STAT
 ,

39 
HI_ID_PDM
 ,

40 
HI_ID_MEMDEV
 ,

42 
HI_ID_DEMUX
 = 0x0A,

45 
HI_ID_ADEC
 = 0x10,

46 
HI_ID_AO
 ,

47 
HI_ID_SIO_AI
 ,

48 
HI_ID_SIO_AO
 ,

49 
HI_ID_SIO
 ,

50 
HI_ID_AI
 ,

51 
HI_ID_AENC
 ,

52 
HI_ID_SRC
 ,

53 
HI_ID_AIAO
 ,

54 
HI_ID_ADE
 ,

55 
HI_ID_ADSP
 ,

58 
HI_ID_VFMW
 = 0x20,

59 
HI_ID_SVDEC
 ,

60 
HI_ID_DISP
 ,

61 
HI_ID_HDMI
 ,

62 
HI_ID_VO
 ,

63 
HI_ID_VPSS
 ,

64 
HI_ID_VDEC
 ,

65 
HI_ID_VI
 ,

66 
HI_ID_VENC
 ,

67 
HI_ID_PQ
 ,

68 
HI_ID_EDID
,

70 
HI_ID_TDE
 = 0x30,

71 
HI_ID_JPGDEC
 ,

72 
HI_ID_JPGENC
 ,

73 
HI_ID_FB
 ,

74 
HI_ID_PNG
 ,

75 
HI_ID_HIGO
 ,

78 
HI_ID_PVR
 = 0x40,

79 
HI_ID_AVPLAY
 ,

80 
HI_ID_SYNC
 ,

81 
HI_ID_VSYNC
 ,

82 
HI_ID_ASYNC
 ,

83 
HI_ID_FASTPLAY
 ,

86 
HI_ID_FLASH
 = 0x50,

87 
HI_ID_IR
 ,

88 
HI_ID_RTC
 ,

89 
HI_ID_I2C
 ,

90 
HI_ID_SCI
 ,

91 
HI_ID_ETH
 ,

92 
HI_ID_USB_PROTECT
 ,

93 
HI_ID_WDG
 = 0x57,

94 
HI_ID_GPIO
 ,

95 
HI_ID_GPIO_I2C
 ,

96 
HI_ID_DMAC
 ,

97 
HI_ID_PMOC
 ,

98 
HI_ID_TUNER
 ,

99 
HI_ID_KEYLED
 ,

100 
HI_ID_E2PROM
 ,

101 
HI_ID_CIPHER
 ,

102 
HI_ID_OTP
 = 0x60,

103 
HI_ID_CA
 ,

104 
HI_ID_PM
 ,

105 
HI_ID_CI
 ,

106 
HI_ID_CIMAXPLUS
 ,

107 
HI_ID_TVP5150
 ,

108 
HI_ID_SIL9293
 ,

109 
HI_ID_PWM
 ,

112 
HI_ID_VOIP_HME
 = 0x80,

113 
HI_ID_NDPT
 ,

114 
HI_ID_AUDADP
 ,

115 
HI_ID_BT
 ,

116 
HI_ID_ALSA
 ,

117 
HI_ID_3G
 ,

120 
HI_ID_VP
 = 0x90,

121 
HI_ID_HDCP
 ,

124 
HI_ID_SUBT
 = 0x98,

125 
HI_ID_TTX
 ,

126 
HI_ID_CC
 ,

129 
HI_ID_LOADER
 = 0xA0,

132 
HI_ID_USR_START
 = 0xB0,

133 
HI_ID_USR_END
 = 0xFE,

135 
HI_ID_BUTT
 = 0xFF

136 } 
	tHI_MOD_ID_E
;

138 #ifde‡
__˝lu•lus


139 #i‡
__˝lu•lus


	@include/hisilicon/hi_type.h

14 #i‚de‡
__HI_TYPE_H__


15 
	#__HI_TYPE_H__


	)

18 #ifde‡
__˝lu•lus


19 #i‡
__˝lu•lus


32 
	tHI_U8
;

33 
	tHI_UCHAR
;

34 
	tHI_U16
;

35 
	tHI_U32
;

37 sig√d 
	tHI_S8
;

38 
	tHI_S16
;

39 
	tHI_S32
;

41 #i‚de‡
_M_IX86


42 
	tHI_U64
;

43 
	tHI_S64
;

45 
__öt64
 
	tHI_U64
;

46 
__öt64
 
	tHI_S64
;

49 
	tHI_CHAR
;

50 * 
	tHI_PCHAR
;

52 
	tHI_FLOAT
;

53 
	tHI_DOUBLE
;

55 
	#HI_VOID
 

	)

57 
	tHI_SIZE_T
;

58 
	tHI_LENGTH_T
;

60 
HI_U32
 
	tHI_HANDLE
;

65 
HI_FALSE
 = 0,

66 
HI_TRUE
 = 1,

67 } 
	tHI_BOOL
;

69 #i‚de‡
NULL


70 
	#NULL
 0L

	)

73 
	#HI_NULL
 0L

	)

74 
	#HI_NULL_PTR
 0L

	)

76 
	#HI_SUCCESS
 0

	)

77 
	#HI_FAILURE
 (-1)

	)

79 
	#HI_INVALID_HANDLE
 (0xffffffff)

	)

81 
	#HI_INVALID_PTS
 (0xffffffff)

	)

82 
	#HI_INVALID_TIME
 (0xffffffff)

	)

84 
	#HI_OS_LINUX
 0xabcd

	)

85 
	#HI_OS_WIN32
 0xcdef

	)

87 #ifde‡
_WIN32


88 
	#HI_OS_TYPE
 
HI_OS_WIN32


	)

90 
	#__OS_LINUX__


	)

91 
	#HI_OS_TYPE
 
HI_OS_LINUX


	)

94 #ifde‡
HI_ADVCA_SUPPORT


95 
	#__INIT__


	)

96 
	#__EXIT__


	)

98 
	#__INIT__
 
__öô


	)

99 
	#__EXIT__
 
__exô


	)

114 
	#HI_HANDLE_MAKEHANDLE
(
mod
, 
¥iv©ed©a
, 
chnid
Ë(
HI_HANDLE
)–(((mod)& 0xffffË<< 16Ë| (((’riv©ed©a)& 0xffË<< 8ËË| (((chnidË& 0xff)Ë)

	)

116 
	#HI_HANDLE_GET_MODID
(
h™dÀ
Ë(((h™dÀË>> 16Ë& 0xffff)

	)

117 
	#HI_HANDLE_GET_PriDATA
(
h™dÀ
Ë(((h™dÀË>> 8Ë& 0xff)

	)

118 
	#HI_HANDLE_GET_CHNID
(
h™dÀ
Ë(((h™dÀ)Ë& 0xff)

	)

120 
	#UNUSED
(
x
Ë((x)=(x))

	)

123 #i‡
deföed
(
__KERNEL__
)

125 
	~<löux/vîsi⁄.h
>

127 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 36))

128 
	#DECLARE_MUTEX
 
DEFINE_SEMAPHORE


	)

136 #ifde‡
__˝lu•lus


137 #i‡
__˝lu•lus


	@include/hisilicon/hi_unf_gpio.h

14 #i‚de‡
__HI_UNF_GPIO_H__


15 
	#__HI_UNF_GPIO_H__


	)

17 
	~"hi_comm⁄.h
"

18 
	~"hi_îr‹_mpi.h
"

20 #ifde‡
__˝lu•lus


21 #i‡
__˝lu•lus


30 
	#HI_UNF_GPIO_O≥n
 
HI_UNF_GPIO_Inô


	)

31 
	#HI_UNF_GPIO_Clo£
 
HI_UNF_GPIO_DeInô


	)

35 
	ehiUNF_GPIO_INTTYPE_E


37 
HI_UNF_GPIO_INTTYPE_UP
,

38 
HI_UNF_GPIO_INTTYPE_DOWN
,

39 
HI_UNF_GPIO_INTTYPE_UPDOWN
,

40 
HI_UNF_GPIO_INTTYPE_HIGH
,

41 
HI_UNF_GPIO_INTTYPE_LOW
,

42 
HI_UNF_GPIO_INTTYPE_BUTT
,

43 } 
	tHI_UNF_GPIO_INTTYPE_E
;

47 
	ehiUNF_GPIO_OUTPUTTYPE_E


49 
HI_UNF_GPIO_OUTPUTTYPE_CMOS
,

50 
HI_UNF_GPIO_OUTPUTTYPE_OD
,

51 
HI_UNF_GPIO_OUTPUTTYPE_BUTT
,

52 }
	tHI_UNF_GPIO_OUTPUTTYPE_E
;

78 
HI_S32
 
HI_UNF_GPIO_Inô
(
HI_VOID
);

93 
HI_S32
 
HI_UNF_GPIO_DeInô
(
HI_VOID
);

116 
HI_S32
 
HI_UNF_GPIO_RódBô
(
HI_U32
 
u32GpioNo
, 
HI_BOOL
 *
pbHighVﬁt
);

135 
HI_S32
 
HI_UNF_GPIO_WrôeBô
(
HI_U32
 
u32GpioNo
, 
HI_BOOL
 
bHighVﬁt
 );

156 
HI_S32
 
HI_UNF_GPIO_SëDúBô
(
HI_U32
 
u32GpioNo
, 
HI_BOOL
 
bI≈ut
);

173 
HI_S32
 
HI_UNF_GPIO_GëDúBô
(
HI_U32
 
u32GpioNo
, 
HI_BOOL
 *
pbI≈ut
);

191 
HI_S32
 
HI_UNF_GPIO_SëI¡Ty≥
(
HI_U32
 
u32GpioNo
, 
HI_UNF_GPIO_INTTYPE_E
 
íI¡Ty≥
);

208 
HI_S32
 
HI_UNF_GPIO_SëI¡E«bÀ
(
HI_U32
 
u32GpioNo
, 
HI_BOOL
 
bE«bÀ
);

224 
HI_S32
 
HI_UNF_GPIO_QuîyI¡
(
HI_U32
 *
p32GpioNo
, HI_U32 
u32TimeoutMs
);

241 
HI_S32
 
HI_UNF_GPIO_SëOuçutTy≥
(
HI_U32
 
u32GpioNo
, 
HI_UNF_GPIO_OUTPUTTYPE_E
 
íOuçutTy≥
);

258 
HI_S32
 
HI_UNF_GPIO_GëOuçutTy≥
(
HI_U32
 
u32GpioNo
, 
HI_UNF_GPIO_OUTPUTTYPE_E
 *
≥nOuçutTy≥
);

263 #ifde‡
__˝lu•lus


264 #i‡
__˝lu•lus


	@include/thirdparty/mediadistribution/rtp_multicast_api.h

1 
	~<°dio.h
> #ö˛udê<°dlib.h> #ö˛udê<°rög.h> #ö˛udê<±hªad.h> #ö˛udê<√töë/ö.h> #ö˛udê<¨∑/öë.h> #i‚de‡__RTP_MULTICAST_API_H__ #deföê__RTP_MULTICAST_API_H__ #ifde‡__˝lu•lu†"C" { #ídif#deföêRTP_MULTICAST_FAILURE (-1Ë/*›î©êÁûuª*/#deföêRTP_MULTICAST_SUCCESS (0Ë /*›î©êsuc˚ss*/#deföêRTP_MULTICAST_NULL (-2Ë/*nuŒÖoôî*/#deföêRTP_MULTICAST_TRUE (1)#deföêRTP_MULTICAST_FALSE (0)#deföêMAX_RTP_MULTICAST_ONLINE_NUM 120íum{_MULTICAST_SEND = 0x01,_MULTICAST_RECEIVE,_MULTICAST_BULT}RTP_MULTICAST_TYPE;void (*RTP_MULTICAST_RECVMSG_FUNC)(unsig√d ch¨ *d©a, i¡ d©Æí);sig√d i¡Ñç_mu…iˇ°_öô(void);sig√d i¡Ñç_mu…iˇ°_deöô(void);sig√d i¡Ñç_mu…iˇ°_addrouã(c⁄° ch¨ *ùaddr, c⁄° ch¨ *√tdevi˚);sig√d i¡Ñç_mu…iˇ°_¸óã(RTP_MULTICAST_TYPEÅy≥, i¡Öaylﬂdty≥, i¡Ö‹t, c⁄° ch¨ *ùaddr, i¡ *πph™dÀ);sig√d i¡Ñç_mu…iˇ°_de°‹y(öàπph™dÀ);sig√d i¡Ñç_mu…iˇ°_£ndmsg(öàπph™dÀ, c⁄° ch¨ *d©a, i¡ d©Æí, i¡Öaylﬂdty≥);sig√d i¡Ñç_mu…iˇ°_uƒegi°î_ªcvmsg_func(öàπph™dÀ);sig√d i¡Ñç_mu…iˇ°_ªgi°î_ªcvmsg_func(öàπph™dÀ, RTP_MULTICAST_RECVMSG_FUNCÑecvfunc);sig√d i¡Ñç_mu…iˇ°_›í_ªcvmsg(öàπph™dÀ);sig√d i¡Ñç_mu…iˇ°_˛o£_ªcvmsg(öàπph™dÀ);#ifde‡__˝lu•lus}#ídif#ídif

	@include/thirdparty/mediadistribution/rtp_unicast_api.h

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<±hªad.h
>

5 
	~<√töë/ö.h
>

6 
	~<¨∑/öë.h
>

8 #i‚de‡
__RTP_UNICAST_API_H__


9 
	#__RTP_UNICAST_API_H__


	)

11 #ifde‡
__˝lu•lus


16 
	#RTP_UNICAST_FAILURE
 (-1Ë

	)

17 
	#RTP_UNICAST_SUCCESS
 (0Ë

	)

18 
	#RTP_UNICAST_NULL
 (-2Ë

	)

20 
	#RTP_UNICAST_TRUE
 (1)

	)

21 
	#RTP_UNICAST_FALSE
 (0)

	)

23 
	#MAX_RTP_UNICAST_ONLINE_NUM
 120

	)

25 (*
RTP_UNICAST_RECVMSG_FUNC
)(*
	td©a
, 
	td©Æí
);

27 sig√d 
πp_uniˇ°_öô
();

28 sig√d 
πp_uniˇ°_deöô
();

30 sig√d 
πp_uniˇ°_¸óã
(
p‹t
, 
∑ylﬂdty≥
, c⁄° *
ùaddr
, *
πph™dÀ
);

31 sig√d 
πp_uniˇ°_de°‹y
(
πph™dÀ
);

33 sig√d 
πp_uniˇ°_£ndmsg
(
πph™dÀ
, c⁄° *
d©a
, 
d©Æí
, 
∑ylﬂdty≥
);

35 sig√d 
πp_uniˇ°_uƒegi°î_ªcvmsg_func
(
πph™dÀ
);

36 sig√d 
πp_uniˇ°_ªgi°î_ªcvmsg_func
(
πph™dÀ
, 
RTP_UNICAST_RECVMSG_FUNC
 
ªcvfunc
);

37 sig√d 
πp_uniˇ°_›í_ªcvmsg
(
πph™dÀ
);

38 sig√d 
πp_uniˇ°_˛o£_ªcvmsg
(
πph™dÀ
);

40 #ifde‡
__˝lu•lus


	@include/thirdparty/mediadistribution/udp_multicast_api.h

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

5 
	~<±hªad.h
>

6 
	~<√töë/ö.h
>

7 
	~<¨∑/öë.h
>

9 #i‚de‡
__UDP_MULTICAST_API_H__


10 
	#__UDP_MULTICAST_API_H__


	)

12 #ifde‡
__˝lu•lus


17 
	#UDP_MULTICAST_FAILURE
 (-1Ë

	)

18 
	#UDP_MULTICAST_SUCCESS
 (0Ë

	)

19 
	#UDP_MULTICAST_NULL
 (-2Ë

	)

21 
	#UDP_MULTICAST_TRUE
 (1)

	)

22 
	#UDP_MULTICAST_FALSE
 (0)

	)

24 
	#MAX_UDP_MULTICAST_ONLINE_NUM
 120

	)

26 
	#UDP_MULTICAST_PACKET_LEN
 (188*8)

	)

30 
UDP_MULTICAST_SEND
 = 0x01,

31 
UDP_MULTICAST_RECEIVE
,

32 
UDP_MULTICAST_BULT


33 }
	tUDP_MULTICAST_TYPE
;

35 (*
UDP_MULTICAST_RECVMSG_FUNC
)(*
	td©a
, 
	td©Æí
);

37 sig√d 
udp_mu…iˇ°_öô
();

38 sig√d 
udp_mu…iˇ°_deöô
();

40 sig√d 
udp_mu…iˇ°_¸óã
(
UDP_MULTICAST_TYPE
 
ty≥
, 
p‹t
, c⁄° *
ùaddr
, *
udph™dÀ
);

41 sig√d 
udp_mu…iˇ°_de°‹y
(
udph™dÀ
);

42 sig√d 
udp_mu…iˇ°_addrouã
(c⁄° *
ùaddr
, c⁄° *
√tdevi˚
);

44 sig√d 
udp_mu…iˇ°_£ndmsg
(
udph™dÀ
, c⁄° *
d©a
, 
d©Æí
);

46 sig√d 
udp_mu…iˇ°_uƒegi°î_ªcvmsg_func
(
udph™dÀ
);

47 sig√d 
udp_mu…iˇ°_ªgi°î_ªcvmsg_func
(
udph™dÀ
, 
UDP_MULTICAST_RECVMSG_FUNC
 
ªcvfunc
);

48 sig√d 
udp_mu…iˇ°_›í_ªcvmsg
(
udph™dÀ
);

49 sig√d 
udp_mu…iˇ°_˛o£_ªcvmsg
(
udph™dÀ
);

51 #ifde‡
__˝lu•lus


	@include/thirdparty/mediadistribution/udp_unicast_api.h

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

5 
	~<±hªad.h
>

6 
	~<√töë/ö.h
>

7 
	~<¨∑/öë.h
>

9 #i‚de‡
__UDP_UNICAST_API_H__


10 
	#__UDP_UNICAST_API_H__


	)

12 #ifde‡
__˝lu•lus


17 
	#UDP_UNICAST_FAILURE
 (-1Ë

	)

18 
	#UDP_UNICAST_SUCCESS
 (0Ë

	)

19 
	#UDP_UNICAST_NULL
 (-2Ë

	)

21 
	#UDP_UNICAST_TRUE
 (1)

	)

22 
	#UDP_UNICAST_FALSE
 (0)

	)

24 
	#MAX_UDP_UNICAST_ONLINE_NUM
 120

	)

26 
	#UDP_UNICAST_PACKET_LEN
 (188*8)

	)

30 
UDP_UNICAST_SEND
 = 0x01,

31 
UDP_UNICAST_RECEIVE
,

32 
UDP_UNICAST_BULT


33 }
	tUDP_UNICAST_TYPE
;

35 (*
UDP_UNICAST_RECVMSG_FUNC
)(*
	td©a
, 
	td©Æí
);

37 sig√d 
udp_uniˇ°_öô
();

38 sig√d 
udp_uniˇ°_deöô
();

40 sig√d 
udp_uniˇ°_¸óã
(
UDP_UNICAST_TYPE
 
ty≥
, 
p‹t
, c⁄° *
ùaddr
, *
udph™dÀ
);

41 sig√d 
udp_uniˇ°_de°‹y
(
udph™dÀ
);

43 sig√d 
udp_uniˇ°_£ndmsg
(
udph™dÀ
, c⁄° *
d©a
, 
d©Æí
);

45 sig√d 
udp_uniˇ°_uƒegi°î_ªcvmsg_func
(
udph™dÀ
);

46 sig√d 
udp_uniˇ°_ªgi°î_ªcvmsg_func
(
udph™dÀ
, 
UDP_UNICAST_RECVMSG_FUNC
 
ªcvfunc
);

48 sig√d 
udp_uniˇ°_›í_ªcvmsg
(
udph™dÀ
);

49 sig√d 
udp_uniˇ°_˛o£_ªcvmsg
(
udph™dÀ
);

51 #ifde‡
__˝lu•lus


	@midware/include/gos_socket/socket_client.h

1 #i‚de‡
_SOCKET_CLIENT_H_


2 
	#_SOCKET_CLIENT_H_


	)

4 #ifde‡
__˝lu•lus


8 
GOS_S32
 
Sockë_Clõ¡_O≥n
();

9 
GOS_S32
 
Sockë_Clõ¡_Clo£
();

10 
GOS_S32
 
Sockë_Gë_ChùIndex
();

11 
GOS_S32
 
Sockë_Clõ¡_Síd_TCP_Msg
(c⁄° * 
pD©a
, 
iD©Æí
);

12 
GOS_S32
 
Sockë_Clõ¡_Síd_UDP_Msg
(c⁄° * 
pD©a
, 
iD©Æí
);

13 
GOS_S32
 
SOCKET_Cª©_RecvIP_D©a
();

14 
GOS_S32
 
Sockë_Clõ¡_T˝Sockë_O≥n
();

15 
GOS_S32
 
Sockë_Clõ¡_T˝Sockë_Clo£
();

16 
GOS_S32
 
Sockë_Clõ¡_Recv_Sîvî
();

18 #ifde‡
__˝lu•lus


	@midware/include/gos_socket/socket_common.h

1 #i‚de‡
_PORTING_SOCKET_H_


2 
	#_PORTING_SOCKET_H_


	)

4 
	~"u£r_deföe.h
"

5 
	~"löuxos.h
"

6 
	~"gosˇ.h
"

7 
	~"d©aba£.h
"

8 
	~"upgrd_comm⁄.h
"

10 #ifde‡
__˝lu•lus


14 
	#MYPORT
 3490

	)

15 
	#BACKLOG
 32

	)

17 
	#IPCKEY
 0x344370

	)

18 
	#HOST_ID
 100

	)

19 
	#MSG_CH_LEN
 3

	)

20 
	#MAX_SEND_BUF_LEN
 1500

	)

23 
	#RECV_ES_PORT
 6000

	)

24 
	#RECV_UDP_PORT
 4567

	)

28 
	#SEND_ES_PORT
 6000

	)

31 
	#SEND_UDP_PORT
 4567

	)

33 
	ssockë_d©a_hód


35 
GOS_U16
 
£nd_id
;

36 
GOS_U16
 
ªcv_id
;

37 
GOS_U16
 
msg_id
;

38 
GOS_U32
 
d©a_Àn
;

39 }
	tSockë_Msg_D©a_Hód
;

41 
	ssockë_msg_öfo


43 
HI_U16
 
u16SídID
;

44 
HI_U16
 
u16RecvID
;

45 
HI_U16
 
u16MsgID
;

46 
HI_U32
 
u32D©aLí
;

47 }
	tSOCKET_MSG_INFO_S
;

51 
HI_U8
 
u8D©aTy≥
;

52 
HI_U32
 
u32D©aLí
;

53 
HI_U8
* 
u8D©a
;

54 }
	tSOCKET_MSG_RECV_S
;

58 
DB_SERVICE_DATA_S
 
°Sîvi˚D©a
;

59 
PORTING_TUNER_TP_P¨am_t
 
°TPD©a
;

60 
DB_SATPARA_S
 
°S©D©a
;

61 }
	tSOCKET_MSG_PROGRAM_t
;

65 
GOS_CHAR
 
ùaddr
[32];

66 
GOS_U8
 
ty≥
;

67 
GOS_U8
 
chùIndex
;

68 }
	tSOCKET_CLIENT_INFO_t
;

72 
GOS_U32
 
u32WöID
;

73 
GOS_U32
 
u32MixAudVÆue
;

74 
GOS_U32
 
u32Le·AudVÆue
;

75 
GOS_U32
 
u32RightAudVÆue
;

76 }
	tSOCKET_AUDIO_MSG_t
;

80 
GOS_U8
 
u8ChùIndex
;

81 
GOS_U32
 
u32STBID
;

82 
GOS_U32
 
u32CAC¨dID
;

83 
GOS_U32
 
u32E¡ôÀNum
;

84 
SGOSCASîvi˚E¡ôÀ_Ex_Pröt
 
°E¡ôÀs
[
GOSCA_MAX_CAENTITLE_COUNT
];

85 }
	tSOCKET_CAINFO_MSG_t
;

89 
GOS_MSG_ERROR_PLAYER
 = 0,

90 
GOS_MSG_PLAY_EVENT
 = 1,

91 
GOS_MSG_OTHER_BOARDMATCH
 = 4,

92 
GOS_MSG_PLAY_STOPMEDIA
 = 7,

93 
GOS_MSG_PLAY_LOCKFREQ
 = 9,

94 
GOS_MSG_PLAY_STARTMEDIA
 = 10,

96 
GOS_MSG_OTHER_UPG2SLAVE
 = 15,

97 
GOS_MSG_OTHER_UPGREBOOT
= 16,

98 
GOS_MSG_SVC_CALL
 = 17,

99 
GOS_MSG_OTHER_CAINFO
 = 19,

100 
GOS_MSG_OTHER_STBID
 = 20,

101 
GOS_MSG_ERROR_AUDIO
 = 21,

102 
GOS_MSG_SLAVE_CHIP_REBOOT
 = 23,

103 
GOS_MSG_PLAY_UNLOCKFREQ
 = 24,

105 
GOS_MSG_EMAIL_GET_INFO
 = 25,

106 
GOS_MSG_EMAIL_SET_INFO
 = 26,

107 
GOS_MSG_EMAIL_GET_RECEIVER
 = 27,

108 
GOS_MSG_EMAIL_SET_RECEIVER
 = 28,

109 
GOS_MSG_EMAIL_SEND_MSG
 = 29,

111 
GOS_MSG_SEARCH_START_MANUAL
 =30,

112 
GOS_MSG_SEARCH_GET_PROGRAM
 = 36,

113 
GOS_MSG_SEARCH_STOP
 = 37,

115 
GOS_MSG_MATCH_SOURCETYPE
 = 39,

116 
GOS_MSG_MATCH_MODIFYIP
 = 40,

118 
GOS_MSG_SPECTRUM_INIT
 = 41,

119 
GOS_MSG_SPECTRUM_OPEN
 = 42,

120 
GOS_MSG_SPECTRUM_RECV
 = 43,

122 
GOS_MSG_LANGUAGE_TYPE
 = 44,

124 
GOS_MSG_MODEL_TOTAL


125 }
	tGOS_MSG_Ty≥
;

129 
eMSG_GET_ONE
 = 0,

130 
eMSG_GET_MORE
,

131 
eMSG_GET_HEAD
,

132 
eMSG_GET_PART
,

133 
eMSG_GET_FAIL
,

135 }
	tSOCKET_RECV_MSG_TYPE_E
;

139 
SLAVE_NET_CONNECT
 = 0,

140 
SLAVE_NET_DISCONNECT
,

141 
SLAVE_NET_READY


143 }
	tSOCKET_NETPORT_STATUS_E
;

147 
eMSG_PAGE_SWITCH
 = 0,

148 
eMSG_PROG_STOP
 = 1,

150 
eMSG_TYPE_MUTT


153 
GOS_S32
 
PORT_SOCKET_GëIP_ByChùID
(*
desIP
, *
§cIP
, 
chùID
);

154 
GOS_S32
 
PORT_SOCKET_Gë_Ho°IP
(*
Ho°IP
, c⁄° *
ëh_«me
);

155 
GOS_S32
 
PORT_SOCKET_Síd_Msg_TCP
(
sockedfd
, 
p‹äum
, c⁄° * 
ùaddr
, c⁄° * 
pd©a
, 
d©Æí
);

156 
GOS_S32
 
PORT_SOCKET_Recv_Msg_TCP
(
sockedfd
, * 
pd©a
, * 
pd©Æí
);

157 
GOS_S32
 
PORT_SOCKET_Msg_Check
(
SOCKET_MSG_INFO_S
 *
°MsgInfo
, c⁄° * 
pMsgBuf
, 
u32D©aLí
);

158 
GOS_VOID
* 
PORT_SOCKET_Msg_Package
(
SOCKET_MSG_INFO_S
 *
°MsgInfo
, c⁄° * 
pD©aBuf
, 
HI_S32
 
s32D©aLí
);

159 
GOS_VOID
* 
PORT_SOCKET_Msg_UnPackage
(
SOCKET_MSG_INFO_S
 *
°MsgInfo
, c⁄° * 
pD©aBuf
, 
HI_S32
 *
ps32D©aLí
);

160 
GOS_S32
 
PORT_SOCKET_Dëe˘_NëSètus_byPög
(c⁄° *
if_«me
, c⁄° *
pögAddr
);

162 #ifde‡
__˝lu•lus


	@midware/include/gos_socket/socket_server.h

1 #i‚de‡
_SOCKET_SERVER_H_


2 
	#_SOCKET_SERVER_H_


	)

4 #ifde‡
__˝lu•lus


8 
	~"p‹tög_sockë.h
"

10 
GOS_S32
 
Sockë_Sîvî_O≥n
();

11 
GOS_S32
 
Sockë_Sîvî_Clo£
();

12 
GOS_S32
 
Sockë_Sîvî_Recv_Clõ¡
(
GOS_U32
 
askChùIndex
);

13 
GOS_S32
 
Sockë_Sîvî_M©ch_Clõ¡
(
SOCKET_CLIENT_INFO_t
* 
p°Clõ¡Info
);

14 
GOS_S32
 
Sockë_Sîvî_Síd_TCP_Msg
(
iChùIndex
, c⁄° * 
pD©a
, 
iD©Æí
);

15 
GOS_S32
 
Sockë_Check_Task_Clo£
();

16 
GOS_S32
 
Sockë_Sîvî_Síd_TCP_Msg_AŒ
(c⁄° * 
pD©a
, 
iD©Æí
);

17 
GOS_S32
 
Sockë_Sîvî_Clo£Sœve
(
chùID
);

18 
GOS_S32
 
Sockë_Sîvî_Brﬂdˇ°_toReboŸ
(
chùID
);

19 
GOS_BOOL
 
Sockë_Sîvî_GëSœveSètus
(
chùID
);

20 
GOS_BOOL
 
Sockë_Sîvî_GëSœveSètus_Ex
(
chùID
, *
pAddr
);

21 
GOS_S32
 
Sockë_Sîvî_GëSœveChùID
(*
pAddr
);

23 #ifde‡
__˝lu•lus


	@midware/include/gos_sys/gos_sys.h

1 #i‚de‡
_GOS_SYS_H_


2 
	#_GOS_SYS_H_


	)

4 
	~"u£r_deföe.h
"

5 
	~"löuxos.h
"

7 #ifde‡
__˝lu•lus


11 
	#BUF_SIZE
 1024

	)

12 
	#INVALID_CHIP_ID
 0xffffffff

	)

14 
GOS_S32
 
GOS_SYS_Inô
();

15 
GOS_S32
 
GOS_SYS_DeInô
();

16 
GOS_U32
 
GOS_SYS_Gë_ChùID
();

18 #ifde‡
__˝lu•lus


	@midware/src/gos_socket/socket_client.c

1 
	~"löuxos.h
"

2 
	~"upgrd_gpio.h
"

3 
	~"upgrd_comm⁄.h
"

4 
	~"sockë_˛õ¡.h
"

5 
	~"av∂ay¶ave.h
"

6 
	~"p‹tög_sockë.h
"

7 
	~"p‹tög_sys.h
"

8 
	~"p‹tög_demux.h
"

9 
	~"p‹tög_tsbuf„r.h
"

10 
	~"check_√t.h
"

11 
	~"mevít.h
"

13 
GOS_S32
 
	ggUDPSockëFd
;

14 
GOS_S32
 
	gs32T˝_Sockë
 = -1;

16 
OS_Task_H™dÀ_t
 
	gH™dÀ_NëP‹t_Check
;

17 
OS_Task_H™dÀ_t
 
	gH™dÀ_SMsg_Di•©ch
;

18 
OS_Task_H™dÀ_t
 
	gH™dÀ_ackSèã_Check
;

20 
OS_Sem≠h‹e_t
* 
	gackSèã_Sem≠h‹e
 = 
GOS_NULL
;

21 
OS_Sem≠h‹e_t
* 
	gsockë_Clõ¡_Sem≠h‹e
 = 
GOS_NULL
;

23 
GOS_U8
 
	gbNë_Sètus
 = 
SLAVE_NET_READY
;

24 
GOS_U8
 
	gbCÆlC¡
 = 0;

25 
GOS_BOOL
 
	gbThªad_Run
 = 
GOS_FALSE
;

26 
GOS_BOOL
 
	gbAckSèã
 = 
GOS_FALSE
;

28 
GOS_S32
 
MAYBE_UNUSED
 
	$sockë_gëùaddr
(*
≤umaddr
, * 
p°øddr
)

30 *
pName
 = 
GOS_NULL
;

31 
ùaddr
;

33 if(
	`PORT_SYS_Gë_ChùID
() % 2 == 0)

35 
pName
 = 
NETCARD_EVEN
;

39 
pName
 = 
NETCARD_ODD
;

42 i‡(
	`√tw‹k_gë_ùaddr
(
pName
, &
ùaddr
Ë=
GOS_SUCCESS
)

44 i‡(
≤umaddr
)

46 *
≤umaddr
 = 
ùaddr
;

49 i‡(
p°øddr
)

51 
ùaddr
 = 
	`SWAP32
(ipaddr);

52 
	`öë_¡›
(
AF_INET
, (
HI_CHAR
 *)&
ùaddr
, 
p°øddr
, 16);

55  
GOS_SUCCESS
;

58  
GOS_FAILURE
;

59 
	}
}

61 
	$sockë_˛õ¡_bﬂrd_check_èsk
(*
¨g
)

63 
bThªad_Run
)

65 i‡(
bAckSèã
 =
GOS_TRUE
)

67 
	`OS_WaôSem≠h‹e
(
ackSèã_Sem≠h‹e
);

69 
bAckSèã
 = 
GOS_FALSE
;

70 
bCÆlC¡
 = 0;

72 
	`OS_Sig«lSem≠h‹e
(
ackSèã_Sem≠h‹e
);

76 if(
bCÆlC¡
 > 10)

78 
	`OS_WaôSem≠h‹e
(
ackSèã_Sem≠h‹e
);

80 
bAckSèã
 = 
GOS_FALSE
;

81 
bCÆlC¡
 = 0;

83 
	`OS_Sig«lSem≠h‹e
(
ackSèã_Sem≠h‹e
);

85 
	`¥ötf
("\n###Check Task TimeOut, Reboot Now!###\n");

88 
	`ªboŸ
(
RB_AUTOBOOT
);

93 
	`OS_WaôSem≠h‹e
(
ackSèã_Sem≠h‹e
);

94 
bCÆlC¡
++;

95 
	`OS_Sig«lSem≠h‹e
(
ackSèã_Sem≠h‹e
);

97 
	`¶ìp
(3);

100 
	}
}

102 
GOS_S32
 
MAYBE_UNUSED
 
	$sockë_˛õ¡_c⁄√˘
(
HI_S32
 
s32P‹t
, HI_S32* 
ps32SockëFd
)

104 
HI_S32
 
s32SockëFd
 = -1;

105 
sockaddr_ö
 
£vi˚_addr
;

107 
s32SockëFd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
);

108 i‡(
s32SockëFd
 < 0)

110 
	`LOG_ERROR
("SocketÉrror...\n");

111  
HI_FAILURE
;

114 
	`bzîo
(&
£vi˚_addr
, (sevice_addr));

115 
£vi˚_addr
.
sö_Ámûy
 = 
AF_INET
;

116 
£vi˚_addr
.
sö_p‹t
 = 
	`ht⁄s
(
s32P‹t
);

117 
£vi˚_addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
	`PORT_SYS_Gë_Ho°Addr
());

119 
	`LOG_INFO
("start connect sevice...\n");

121 i‡(
	`c⁄√˘
(
s32SockëFd
, (
sockaddr
 *)&
£vi˚_addr
, (sevice_addr)) < 0)

123 
	`LOG_ERROR
("c⁄√˘ faûed!Éºnÿ%d \n", 
î∫o
);

124 
	`˛o£
(
s32SockëFd
);

125  
HI_FAILURE
;

128 i‡(
ps32SockëFd
)

130 *
ps32SockëFd
 = 
s32SockëFd
;

133  
HI_SUCCESS
;

134 
	}
}

136 
GOS_S32
 
MAYBE_UNUSED
 
	$sockë_˛õ¡_ª•⁄d_£rvî
(
GOS_S32
 
s32ChùID
, * 
ùdŸdec
)

138 
GOS_VOID
* 
£nd_buf
 = 
NULL
;

139 
SOCKET_CLIENT_INFO_t
 
°Clõ¡Info
;

140 
SOCKET_MSG_INFO_S
 
°MsgHód
;

141 
GOS_S32
 
s32Rë
;

143 
°MsgHód
.
u16MsgID
 = 
GOS_MSG_OTHER_BOARDMATCH
;

144 
°MsgHód
.
u16RecvID
 = 
HOST_ID
;

145 
°MsgHód
.
u16SídID
 = 
s32ChùID
;

147 if(
	`PORT_SYS_Gë_ChùID
() % 2 == 0)

149 
°Clõ¡Info
.
ty≥
 = 
E_BOARD_EVEN
;

153 
°Clõ¡Info
.
ty≥
 = 
E_BOARD_ODD
;

156 
°Clõ¡Info
.
chùIndex
 = 
s32ChùID
;

157 
	`mem£t
(
°Clõ¡Info
.
ùaddr
, 0x00, (stClientInfo.ipaddr));

158 
	`°r˝y
(
°Clõ¡Info
.
ùaddr
, 
ùdŸdec
);

160 
£nd_buf
 = 
	`PORT_SOCKET_Msg_Package
(&
°MsgHód
, (
GOS_VOID
*)&
°Clõ¡Info
, (stClientInfo));

161 i‡(
£nd_buf
 =
NULL
)

163 
	`LOG_ERROR
("PORT_SOCKET_Msg_Package Error!\n");

164  
GOS_FAILURE
;

167 
s32Rë
 = 
	`Sockë_Clõ¡_Síd_TCP_Msg
(
£nd_buf
, 
°MsgHód
.
u32D©aLí
);

169 
	`OS_FªeMem‹y
(
£nd_buf
);

171  
GOS_SUCCESS
;

172 
	}
}

174 
	$sockë_˛õ¡_check_√ç‹t_èsk
()

176 *
pName
 = "eth1";

178 
bNë_Sètus
 = 
SLAVE_NET_READY
;

181 if(
	`PORT_SOCKET_Dëe˘_Nëlök_Sètus
(
pName
) == 1)

183 if(
SLAVE_NET_DISCONNECT
 =
bNë_Sètus
)

185 
	`¥ötf
("\n=====Net Connectágian\n");

186 
bNë_Sètus
 = 
SLAVE_NET_CONNECT
;

188 if(
	`PORT_SYS_Gë_ChùID
() % 2 != 0)

190 
	`u¶ìp
(500*1000);

194 
	`PORT_SYS_HWReboŸ
();

195 
	`ªboŸ
(
RB_AUTOBOOT
);

198 
bNë_Sètus
 = 
SLAVE_NET_CONNECT
;

202 if(
SLAVE_NET_CONNECT
 =
bNë_Sètus
)

204 
	`¥ötf
("\n########Net Break\n");

205 
bNë_Sètus
 = 
SLAVE_NET_DISCONNECT
;

208 
	`u¶ìp
(500 * 1000);

212 
	}
}

214 
	$sockë_˛õ¡_di•©ch_èsk
(*
¨gv
)

216 
ãmp_Àn
 = 0;

217 
HI_S32
 
s32Rë
 = 
GOS_FAILURE
;

218 
HI_S32
 
s32RcvLígth
 = -1;

219 
SOCKET_MSG_INFO_S
 
°MsgHód
;

220 
HI_CHAR
 
ùdŸdec
[32] = {0};

221 
HI_CHAR
 
u8RecvBuf„r
[1024*1024];

222 
HI_CHAR
 
u8TempBuf„r
[1024*1024];

223 
HI_CHAR
 *
pOff£t
;

225 
i
;

227 
bThªad_Run
)

229 i‡(
	`sockë_gëùaddr
(
NULL
, 
ùdŸdec
Ë=
GOS_SUCCESS
)

231 
	`LOG_INFO
("thêùadd∏i†: %s\n", 
ùdŸdec
);

236 
	`¶ìp
(1);

240 
	`¥ötf
("ùdŸdec:%s--c⁄√˘ sîvî...\n",
ùdŸdec
);

244 
i
=0; i<5; i++)

246 i‡(
	`sockë_˛õ¡_c⁄√˘
(
MYPORT
, &
s32T˝_Sockë
Ë!
GOS_SUCCESS
)

248 
	`¥ötf
("socket_client_connect failure!\n");

249 
	`u¶ìp
(200);

259 if(
i
 >= 5)

261 #ifde‡
TEST_BY_HARDWARE


264 
	`¶ìp
(5*60);

265 
	`sy°em
("reboot");

268 
	`˛o£
(
s32T˝_Sockë
);

269 
	`¥ötf
("chù:%d, c⁄√˘Åimêout,ÑeboŸÇew...\n",
	`PORT_SYS_Gë_ChùID
());

272 
	`¶ìp
(1);

273 
	`sy°em
("reboot");

277 
	`sockë_˛õ¡_ª•⁄d_£rvî
(
	`PORT_SYS_Gë_ChùID
(), 
ùdŸdec
);

280 i‡(!
	`OS_Cª©eTask
(
sockë_˛õ¡_bﬂrd_check_èsk
, 
NULL
, (
OS_Task_H™dÀ_t
*)&
H™dÀ_ackSèã_Check
))

282 
	`LOG_ERROR
("CreateÅhe socket_client_board_check_task Failed!\n");

285 
	`¥ötf
("Thês32ChùIndex i†%d--s32T˝_Sockë:%#x\n", 
	`PORT_SYS_Gë_ChùID
(), 
s32T˝_Sockë
);

287 
bThªad_Run
)

289 
	`mem£t
(
u8RecvBuf„r
, 0, (u8RecvBuffer));

291 i‡(
	`PORT_SOCKET_Recv_Msg_TCP
(
s32T˝_Sockë
, 
u8RecvBuf„r
, &
s32RcvLígth
Ë!
GOS_SUCCESS
)

296 i‡(
s32RcvLígth
 > 0)

298 
pOff£t
 = 
u8RecvBuf„r
;

299 
pOff£t
[
s32RcvLígth
] = '\0';

300 
ªcv_msg
 :

301 
s32Rë
 = 
	`PORT_SOCKET_Msg_Check
(&
°MsgHód
, 
pOff£t
, 
s32RcvLígth
);

302 i‡(
s32Rë
 =
eMSG_GET_HEAD
)

304 
ãmp_Àn
 = 0;

305 
	`mem£t
(
u8TempBuf„r
, 0, (u8TempBuffer));

306 
	`mem˝y
(
u8TempBuf„r
 + 
ãmp_Àn
, 
pOff£t
, 
s32RcvLígth
);

307 
ãmp_Àn
 =Åemp_À¿+ 
s32RcvLígth
;

309 i‡(
s32Rë
 =
eMSG_GET_PART
)

311 if(
ãmp_Àn
 == 0)

316 
	`mem˝y
(
u8TempBuf„r
 + 
ãmp_Àn
, 
pOff£t
, 
s32RcvLígth
);

317 
ãmp_Àn
 =Åemp_À¿+ 
s32RcvLígth
;

318 i‡(
°MsgHód
.
u32D©aLí
 =
ãmp_Àn
)

320 
	`GOS_AVPLAYSLAVE_Di•©ch_RecvMsg
(0, 
u8TempBuf„r
, 
ãmp_Àn
);

321 
ãmp_Àn
 = 0;

322 
	`mem£t
(
u8TempBuf„r
, 0, (u8TempBuffer));

324 if(
°MsgHód
.
u32D©aLí
 < 
ãmp_Àn
)

326 
	`GOS_AVPLAYSLAVE_Di•©ch_RecvMsg
(0, 
u8TempBuf„r
, 
°MsgHód
.
u32D©aLí
);

328 
	`mem£t
(
u8TempBuf„r
, 0, (u8TempBuffer));

329 
ãmp_Àn
 =Åemp_À¿- 
°MsgHód
.
u32D©aLí
;

330 if(
s32RcvLígth
 <
ãmp_Àn
)

335 
pOff£t
 =ÖOff£à+ 
s32RcvLígth
 - 
ãmp_Àn
;

336 
s32RcvLígth
 = 
ãmp_Àn
;

337 
ãmp_Àn
 = 0;

338 
ªcv_msg
;

342 i‡(
s32Rë
 =
eMSG_GET_ONE
)

344 i‡(
°MsgHód
.
u32D©aLí
 <
s32RcvLígth
)

346 
	`GOS_AVPLAYSLAVE_Di•©ch_RecvMsg
(0, 
pOff£t
, 
s32RcvLígth
);

349 i‡(
s32Rë
 =
eMSG_GET_MORE
)

351 
	`GOS_AVPLAYSLAVE_Di•©ch_RecvMsg
(0, 
pOff£t
, 
°MsgHód
.
u32D©aLí
);

352 
s32RcvLígth
 = s32RcvLígth - 
°MsgHód
.
u32D©aLí
;

353 
pOff£t
 =ÖOff£à+ 
°MsgHód
.
u32D©aLí
;

354 
ªcv_msg
;

359 
	}
}

361 
GOS_S32
 
	$Sockë_Clõ¡_O≥n
()

363 
bThªad_Run
 = 
GOS_TRUE
;

364 
bAckSèã
 = 
GOS_FALSE
;

366 if(
sockë_Clõ¡_Sem≠h‹e
 =
GOS_NULL
)

368 
sockë_Clõ¡_Sem≠h‹e
 = 
	`OS_Cª©eSem≠h‹e
(1);

371 if(
ackSèã_Sem≠h‹e
 =
GOS_NULL
)

373 
ackSèã_Sem≠h‹e
 = 
	`OS_Cª©eSem≠h‹e
(1);

376 
gUDPSockëFd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
);

377 i‡(
gUDPSockëFd
 < 0)

379 
	`¥ötf
("¸óã ud∞sockëÉº‹ [%d].\n", 
î∫o
);

382 i‡(!
	`OS_Cª©eTask
(
sockë_˛õ¡_di•©ch_èsk
, 
NULL
, (
OS_Task_H™dÀ_t
*)&
H™dÀ_SMsg_Di•©ch
))

384 
	`LOG_ERROR
("socket_client_dispatch_task Failure!\n");

385  
GOS_FAILURE
;

388 if(
	`PORT_SYS_Gë_ChùID
()%2 == 0)

390 i‡(!
	`OS_Cª©eTask
(
sockë_˛õ¡_check_√ç‹t_èsk
, 
NULL
, (
OS_Task_H™dÀ_t
*)&
H™dÀ_NëP‹t_Check
))

392 
	`LOG_ERROR
("socket_client_check_netport_task Failure!\n");

393  
GOS_FAILURE
;

396 
	`LOG_INFO
("Socket_Client_Open Success!\n");

398  
GOS_SUCCESS
;

399 
	}
}

401 
GOS_S32
 
	$Sockë_Clõ¡_Clo£
()

403 
bThªad_Run
 = 
GOS_FALSE
;

404 
bAckSèã
 = 
GOS_FALSE
;

406 
	`OS_WaôSem≠h‹e
(
sockë_Clõ¡_Sem≠h‹e
);

410 i‡(
s32T˝_Sockë
 > 0)

412 
	`˛o£
(
s32T˝_Sockë
);

413 
s32T˝_Sockë
 = -1;

415 
	`OS_Sig«lSem≠h‹e
(
sockë_Clõ¡_Sem≠h‹e
);

417 
	`OS_DñëeSem≠h‹e
(
sockë_Clõ¡_Sem≠h‹e
);

418 
sockë_Clõ¡_Sem≠h‹e
 = 
GOS_NULL
;

420 
	`OS_DñëeSem≠h‹e
(
ackSèã_Sem≠h‹e
);

421 
ackSèã_Sem≠h‹e
 = 
GOS_NULL
;

422  
GOS_SUCCESS
;

423 
	}
}

424 
GOS_S32
 
	$Sockë_Clõ¡_T˝Sockë_O≥n
()

426 if(
bThªad_Run
)

427  
GOS_FAILURE
;

429 
bThªad_Run
 = 
GOS_TRUE
;

431 if(!
H™dÀ_SMsg_Di•©ch
)

433 i‡(!
	`OS_Cª©eTask
(
sockë_˛õ¡_di•©ch_èsk
, 
NULL
, (
OS_Task_H™dÀ_t
*)&
H™dÀ_SMsg_Di•©ch
))

435 
	`LOG_ERROR
("socket_client_dispatch_task Failure!\n");

436  
GOS_FAILURE
;

441 
	`LOG_ERROR
("Socket_Client_TcpSocket_Close Failure:Öthread handle isÇot NULL!\n");

442  
GOS_FAILURE
;

444 
	`LOG_INFO
("=== Socket_Client_TcpSocket_Open Success !\n");

446  
GOS_SUCCESS
;

447 
	}
}

448 
GOS_S32
 
	$Sockë_Clõ¡_T˝Sockë_Clo£
()

450 if(!
bThªad_Run
)

451  
GOS_FAILURE
;

453 
bThªad_Run
 = 
GOS_FALSE
;

454 
	`u¶ìp
(500 *1000);

456 
	`OS_WaôSem≠h‹e
(
sockë_Clõ¡_Sem≠h‹e
);

458 if(0 !
H™dÀ_SMsg_Di•©ch
)

460 
	`±hªad_ˇn˚l
(
H™dÀ_SMsg_Di•©ch
);

461 
H™dÀ_SMsg_Di•©ch
 = 0;

464 i‡(
s32T˝_Sockë
 > 0)

466 
	`˛o£
(
s32T˝_Sockë
);

467 
s32T˝_Sockë
 = -1;

469 
	`OS_Sig«lSem≠h‹e
(
sockë_Clõ¡_Sem≠h‹e
);

471 
	`LOG_INFO
("### Socket_Client_TcpSocket_Close OK !");

473  
GOS_SUCCESS
;

474 
	}
}

476 
GOS_S32
 
	$Sockë_Clõ¡_Síd_TCP_Msg
(c⁄° * 
pD©a
, 
iD©Æí
)

478 
GOS_S32
 
s32Rë
;

479 i‡(!
pD©a
)

481 
	`LOG_ERROR
("TheÖData is NULL\n");

482  
GOS_FAILURE
;

485 if(
s32T˝_Sockë
 < 0)

487  
GOS_FAILURE
;

490 
s32Rë
 = 
	`PORT_SOCKET_Síd_Msg_TCP
(
s32T˝_Sockë
, 
MYPORT
, 
	`PORT_SYS_Gë_Ho°Addr
(), 
pD©a
, 
iD©Æí
);

492  
s32Rë
;

493 
	}
}

495 
GOS_S32
 
	$Sockë_Clõ¡_Síd_UDP_Msg
(c⁄° * 
pD©a
, 
iD©Æí
)

497 
GOS_U32
 
u32SídD©a
 = 0;

498 
sockaddr_ö
 
udpSîvîAddr
;

500 i‡(!
pD©a
)

502 
	`LOG_ERROR
("TheÖData is NULL\n");

503  
GOS_FAILURE
;

506 if(
iD©Æí
 > (800*1024))

508  
GOS_FAILURE
;

511 
	`mem£t
(&
udpSîvîAddr
, 0x00, (udpServerAddr));

512 
udpSîvîAddr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
	`PORT_SYS_Gë_Ho°Addr
());

513 
udpSîvîAddr
.
sö_p‹t
 = 
	`ht⁄s
(
SEND_UDP_PORT
);

514 
udpSîvîAddr
.
sö_Ámûy
 = 
AF_INET
;

515 
u32SídD©a
 = 
	`£ndto
(
gUDPSockëFd
, 
pD©a
, 
iD©Æí
,

516 0 , (
sockaddr
 *)&
udpSîvîAddr
, (udpServerAddr));

518  
GOS_SUCCESS
;

519 
	}
}

521 
GOS_S32
 
	$Sockë_Clõ¡_Recv_Sîvî
()

523 
	`OS_WaôSem≠h‹e
(
ackSèã_Sem≠h‹e
);

525 
bAckSèã
 = 
GOS_TRUE
;

527 
	`OS_Sig«lSem≠h‹e
(
ackSèã_Sem≠h‹e
);

529  
GOS_SUCCESS
;

530 
	}
}

	@midware/src/gos_socket/socket_common.c

1 
	~<uni°d.h
>

2 
	~<°rög.h
>

3 
	~<±hªad.h
>

4 
	~"hi_unf_sci.h
"

5 
	~"u£r_deföe.h
"

6 
	~"löuxos.h
"

7 
	~"hi_ty≥.h
"

8 
	~"hi_comm⁄.h
"

9 
	~"p‹tög_sockë.h
"

10 
	~"p‹tög_sys.h
"

12 
	~"check_√t.h
"

15 #ifde‡
__˝lu•lus


19 
	#SOCKET_IS_MSG
(
a
Ë(◊[0] ='M'Ë&& (a[1] ='S'Ë&& (a[2]='G'))

	)

22 
PORT_SOCKET_Sh¨eEnv_InôIPFœg
(*
Ho°IP
)

24 
Sh¨eEnv_EnvSë
("ùaddr", 
Ho°IP
);

25 
Sh¨eEnv_EnvSë
("TCP_SERVER", 
USER_ADDR_YES
);

26 
Sh¨eEnv_St‹eEnv
();

31 
PORT_SOCKET_Sh¨eEnv_SëIPFœg
(*
Ho°IP
)

33 
Sh¨eEnv_EnvSë
("ùaddr", 
Ho°IP
);

34 
Sh¨eEnv_EnvSë
("TCP_SERVER", 
USER_ADDR_YES
);

35 
Sh¨eEnv_St‹eEnv
();

40 
PORT_SOCKET_Sh¨eEnv_GëIPFœg
(*
Ho°IP
)

42 
HI_CHAR
 *
pEnvBuff
 = 
NULL
;

43 
pEnvBuff
 = (
HI_CHAR
 *)
Sh¨eEnv_EnvGë
("ipaddr");

44 i‡(!
pEnvBuff
)

46 
LOG_INFO
("ShareEnv_EnvGet Error!\n");

49 if(0 !
°rcmp
(
pEnvBuff
, 
USER_ADDR_YES
))

54 
pEnvBuff
 = (
HI_CHAR
 *)
Sh¨eEnv_EnvGë
("TCP_SERVER");

55 i‡(!
pEnvBuff
)

57 
LOG_INFO
("ShareEnv_EnvGet Error!\n");

60 
Ho°IP


66 
GOS_S32
 
PORT_SOCKET_Dëe˘_NëSètus_byPög
(c⁄° *
if_«me
, c⁄° *
pögAddr
)

68 
ªt
 ;

69 
SYS_CMD
[256] = {0};

71 if((
NULL
 =
if_«me
Ë|| (NULL =
pögAddr
))

74 
•rötf
(
SYS_CMD
,"pög %†-¯1 -W 1 > /dev/nuŒ 2>/dev/nuŒ",
pögAddr
);

76 
ªt
 = 
sy°em
(
SYS_CMD
);

77  
ªt
;

81 
GOS_S32
 
PORT_SOCKET_Gë_Ho°IP
(*
Ho°IP
, c⁄° *
ëh_«me
)

83 
sock
;

84 
sockaddr_ö
 
sö
;

85 
i‰eq
 
i‰
;

86 
sock
 = 
sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

87 i‡(
sock
 == -1)

89 
≥º‹
("socket");

92 
°∫˝y
(
i‰
.
i‰_«me
, 
ëh_«me
, 
IFNAMSIZ
);

93 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = 0;

94 i‡(
io˘l
(
sock
, 
SIOCGIFADDR
, &
i‰
) < 0)

96 
≥º‹
("ioctl");

97 
˛o£
(
sock
);

100 
˛o£
(
sock
);

101 
mem˝y
(&
sö
, &
i‰
.
i‰_addr
, (sin));

102 
•rötf
(
Ho°IP
,"%s", 
öë_¡ﬂ
(
sö
.
sö_addr
));

107 
GOS_S32
 
PORT_SOCKET_GëIP_ByChùID
(*
desIP
, *
§cIP
, 
chùID
)

109 
uN©iveIP
;

110 
pName
[32] = {0};

112 if((
NULL
 =
desIP
Ë|| (NULL =
§cIP
) )

117 
uN©iveIP
 = 
¡ohl
(
öë_addr
(
§cIP
));

118 
uN©iveIP
 +
chùID
;

119 
uN©iveIP
 = 
SWAP32
(uNativeIP);

121 
ù2°rögex
(
uN©iveIP
, 
pName
);

123 
°r˝y
(
desIP
, 
pName
);

128 
GOS_S32
 
PORT_SOCKET_Síd_Msg_TCP
(
sockedfd
, 
p‹äum
, c⁄° * 
ùaddr
, c⁄° * 
pd©a
, 
d©Æí
)

130 
iovec
 
io
;

131 
msghdr
 
msg
;

132 
sockaddr_ö
 
£vi˚_addr
;

134 i‡(!
ùaddr
 || !
pd©a
)

136 
LOG_ERROR
("The inputÖaram invalied !\n");

137  
GOS_FAILURE
;

139 if(
sockedfd
 <= 0)

141 
LOG_ERROR
("The inputÖaram invalied !\n");

142  
GOS_FAILURE
;

145 
bzîo
(&
£vi˚_addr
, (sevice_addr));

146 
£vi˚_addr
.
sö_Ámûy
 = 
AF_INET
;

147 
£vi˚_addr
.
sö_p‹t
 = 
ht⁄s
(
p‹äum
);

148 
öë_±⁄
(
AF_INET
, 
ùaddr
, &
£vi˚_addr
.
sö_addr
);

152 
io
.
iov_ba£
 = (*)
pd©a
;

153 
io
.
iov_Àn
 = 
d©Æí
;

154 
msg
.
msg_«me
 = &
£vi˚_addr
;

155 
msg
.
msg_«mñí
 = (
sockaddr_ö
);

156 
msg
.
msg_iov
 = &
io
;

157 
msg
.
msg_iovÀn
 = 1;

158 
msg
.
msg_c⁄åﬁ
 = 0;

159 
msg
.
msg_c⁄åﬁÀn
 = 0;

161 
msg
.
msg_Êags
 = 
MSG_NOSIGNAL
;

163 
OS_Prötf_Buf„r
(
io
.
iov_ba£
, io.
iov_Àn
);

165 i‡(
£ndmsg
(
sockedfd
, &
msg
, 0) < 0)

167 
LOG_ERROR
("> sídmsgÉº‹... :%d\n", 
î∫o
);

169 if(
î∫o
 =
SIGPIPE
)

171 
¥ötf
("socket closed 1...\n");

173 if(
î∫o
 =
ECONNRESET
)

175 
¥ötf
("socket closed 2...\n");

177 if(
î∫o
 =
EAGAIN
)

179 
¥ötf
("∑¢ÀÕª∫≥Â«¯ £”‡ø’º‰–°”⁄∑¢ÀÕ∞¸¥Û–°\n");

181 if(
î∫o
=
EINTR
)

183 
¥ötf
("errno EINTR,“Ï≥££¨µ»¥˝‘Ÿ¥Œ¥•∑¢\n");

184  
GOS_SUCCESS
;

186 if(
î∫o
=
EDESTADDRREQ
)

188 
¥ötf
("errno EDESTADDRREQ,Ã◊Ω”◊÷≤ª¥¶”⁄¡¨Ω”ƒ£ Ω£¨√ª”–÷∏∂®∂‘∂Àµÿ÷∑\n");

189  
GOS_SUCCESS
;

191 if(
î∫o
=
EFAULT
)

193 
¥ötf
("errno EFAULT,ƒ⁄¥Êø’º‰∑√Œ ≥ˆ¥Ì\n");

194  
GOS_SUCCESS
;

197  
GOS_FAILURE
;

200  
GOS_SUCCESS
;

203 
GOS_S32
 
PORT_SOCKET_Recv_Msg_TCP
(
sockedfd
, * 
pd©a
, * 
pd©Æí
)

205 
ªcvÀn
 = 0;

206 
msghdr
 
msg
;

207 
iovec
 
io
;

209 i‡(!
pd©a
)

211 
LOG_ERROR
("The inputÖaram invalied !\n");

212  
GOS_FAILURE
;

214 if(
sockedfd
 <= 0)

216 
LOG_ERROR
("The inputÖaram invalied !\n");

217  
GOS_FAILURE
;

220 
io
.
iov_ba£
 = 
pd©a
;

221 
io
.
iov_Àn
 = 1024 * 1024;

222 
msg
.
msg_«me
 = 
NULL
;

223 
msg
.
msg_iov
 = &
io
;

224 
msg
.
msg_iovÀn
 = 1;

225 
msg
.
msg_Êags
 = 0;

227 i‡((
ªcvÀn
 = 
ªcvmsg
(
sockedfd
, &
msg
, 0)) < 0)

229 
¥ötf
(">ÑecvmsgÉº‹... :%d\n", 
î∫o
);

230 if(
î∫o
=
EAGAIN
)

232 
¥ötf
("RE-Lí:%dÉºnÿEAGAIN,“Ï≥££¨µ»¥˝‘Ÿ¥Œ¥•∑¢∂¡»°\n", 
ªcvÀn
);

233  
GOS_SUCCESS
;

235 if(
î∫o
=
EINTR
)

237 
¥ötf
("RE-Lí:%dÉºnÿEINTR,“Ï≥££¨µ»¥˝‘Ÿ¥Œ¥•∑¢∂¡»°\n", 
ªcvÀn
);

239 if(
î∫o
=
ENOBUFS
)

241 
¥ötf
("RE-Lí:%dÉºnÿENOBUFS, œµÕ≥µƒª∫≥Âƒ⁄¥Ê≤ª◊„\n", 
ªcvÀn
);

243 if(
î∫o
==
ENOMEM
)

245 
¥ötf
("RE-Lí:%dÉºnÿENOMEM, ∫À–ƒƒ⁄¥Ê≤ª◊„\n", 
ªcvÀn
);

248 if(0 !
PORT_SYS_Gë_ChùID
())

252 
sy°em
("reboot");

255  
GOS_FAILURE
;

257 if(
ªcvÀn
 == 0)

260 
¥ötf
(">ÑecvmsgÉº‹... :%d\n", 
î∫o
);

261 
¥ötf
("PORT_SOCKET_Recv_Msg_TCPÑecvÀ¿=0,msg_Êags=%d\n",
msg
.
msg_Êags
);

262 
msg
.
msg_Êags
)

264 
MSG_EOR
:

265 
¥ötf
("÷∏ æº«¬º±ﬂΩÁ, ’µΩµƒ ˝æ›ÕÍ≥…¡À“ª∏ˆº«¬º\n");

267 
MSG_TRUNC
:

268 
¥ötf
("±Ì√˜ ˝æ›±®µƒŒ≤≤ø±ª∂™∆˙¡À£¨“ÚŒ™ ˝æ›±®±»Ã·π©µƒª∫≥Â¥Û\n");

270 
MSG_CTRUNC
:

271 
¥ötf
("±Ì√˜“ª–©øÿ÷∆ ˝æ›±ª∂™∆˙¡À£¨“ÚŒ™√ª”–∏¸∂‡µƒø’º‰¥Ê¥¢∏®÷˙ ˝æ›\n");

273 
MSG_OOB
:

274 
¥ötf
("∑µªÿ±Ì√˜ ’µΩ¡ÀΩÙº±ªÚ¥¯Õ‚ ˝æ›\n");

276 
MSG_ERRQUEUE
:

277 
¥ötf
(">MSG_ERRQUEUEÑecvmsgÉº‹... :%d\n", 
î∫o
);

283 
MSG_FIN
:

284 
¥ötf
(">MSG_FIN\n");

288 if(0 !
PORT_SYS_Gë_ChùID
())

292 
sy°em
("reboot");

295  
GOS_FAILURE
;

298 
OS_Prötf_Buf„r
(
msg
.
msg_iov
[0].
iov_ba£
, 
ªcvÀn
);

300 i‡(
pd©Æí
)

302 *
pd©Æí
 = 
ªcvÀn
;

305 i‡(
ªcvÀn
 > 0)

307 
mem˝y
(
pd©a
, 
msg
.
msg_iov
[0].
iov_ba£
, 
ªcvÀn
);

310  
GOS_SUCCESS
;

313 
GOS_S32
 
PORT_SOCKET_Msg_Check
(
SOCKET_MSG_INFO_S
 *
°MsgInfo
, c⁄° * 
pMsgBuf
, 
u32D©aLí
)

315 i‡(
pMsgBuf
 =
HI_NULL
 || 
°MsgInfo
 == HI_NULL)

317 
LOG_ERROR
("param inÉrror!!\n");

318  
eMSG_GET_FAIL
;

321 i‡(!
SOCKET_IS_MSG
(
pMsgBuf
))

323  
eMSG_GET_PART
;

326 
mem˝y
(
°MsgInfo
, 
pMsgBuf
 + 
MSG_CH_LEN
, (
SOCKET_MSG_INFO_S
));

328 i‡(
°MsgInfo
->
u32D©aLí
 > u32DataLen)

330  
eMSG_GET_HEAD
;

332 i‡(
°MsgInfo
->
u32D©aLí
 < u32DataLen)

334  
eMSG_GET_MORE
;

337  
eMSG_GET_ONE
;

340 
GOS_VOID
* 
PORT_SOCKET_Msg_Package
(
SOCKET_MSG_INFO_S
 *
°MsgInfo
, c⁄° * 
pD©aBuf
, 
HI_S32
 
s32D©aLí
)

342 i‡((
s32D©aLí
 <= 0))

344 
LOG_ERROR
("param isÉrror!!\n");

345  
HI_NULL
;

348 
°MsgInfo
->
u32D©aLí
 = 
MSG_CH_LEN
 + (
SOCKET_MSG_INFO_S
Ë+ 
s32D©aLí
;

349 
HI_VOID
 *
pSídBuf
 = (HI_VOID*)
OS_AŒocMem‹y
(
°MsgInfo
->
u32D©aLí
);

350 i‡((
pSídBuf
 =
HI_NULL
))

352 
LOG_ERROR
("mallocÉrror!!\n");

353  
HI_NULL
;

356 
mem˝y
(
pSídBuf
, "MSG", 
MSG_CH_LEN
);

357 
mem˝y
(
pSídBuf
 + 
MSG_CH_LEN
, 
°MsgInfo
, (
SOCKET_MSG_INFO_S
));

358 
mem˝y
(
pSídBuf
 + 
MSG_CH_LEN
 + (
SOCKET_MSG_INFO_S
), 
pD©aBuf
, 
s32D©aLí
);

360  
pSídBuf
;

363 
GOS_VOID
* 
PORT_SOCKET_Msg_UnPackage
(
SOCKET_MSG_INFO_S
 *
°MsgInfo
, c⁄° * 
pD©aBuf
, 
HI_S32
 *
ps32D©aLí
)

365 i‡((
pD©aBuf
 =
HI_NULL
Ë|| (*
ps32D©aLí
 <
MSG_CH_LEN
 + (
SOCKET_MSG_INFO_S
)))

367 
LOG_ERROR
("param inÉrror!\n");

368  
HI_NULL
;

370 i‡(!
SOCKET_IS_MSG
(
pD©aBuf
))

373  
HI_NULL
;

376 
mem˝y
(
°MsgInfo
, 
pD©aBuf
 + 
MSG_CH_LEN
, (
SOCKET_MSG_INFO_S
));

377 
GOS_VOID
* 
pu8D©aBuf
 = (GOS_VOID*)(
pD©aBuf
 + (
MSG_CH_LEN
 + (
SOCKET_MSG_INFO_S
)));

379 i‡(
°MsgInfo
->
u32D©aLí
 !*
ps32D©aLí
)

381 
LOG_ERROR
("°MsgInfo->u32D©aLí :%d *pu32D©aLí :%d\n", 
°MsgInfo
->
u32D©aLí
, *
ps32D©aLí
);

382  
HI_NULL
;

385 *
ps32D©aLí
 = *ps32D©aLí - 
MSG_CH_LEN
 - (
SOCKET_MSG_INFO_S
);

386  
pu8D©aBuf
;

389 #ifde‡
__˝lu•lus


	@midware/src/gos_socket/socket_server.c

1 
	~"löuxos.h
"

2 
	~"av∂ayho°.h
"

3 
	~"p‹tög_sys.h
"

4 
	~"sockë_£rvî.h
"

5 
	~"p‹tög_sockë.h
"

7 
	~"check_√t.h
"

10 
GOS_S32
 
	ma˘iveFœg
;

11 
GOS_S32
 
	ms32T˝Fd
;

12 
GOS_S32
 
	ms32UdpFd
;

13 
GOS_CHAR
 
	mùaddr
[32];

14 
GOS_U8
 
	mchùIndex
;

15 
GOS_U8
 
	mty≥
;

16 
HI_BOOL
 
	mackSèã
;

17 
GOS_U8
 
	mˇŒC¡
;

18 
OS_Sem≠h‹e_t
 *
	mlockSem
;

19 
GOS_CHAR
 
	mu8RecvBuf„r
[1024*1024];

20 
GOS_S32
 
	md©aLí
;

21 }
	tGOS_Clõ¡_Info_t
;

25 
GOS_S32
 
	ma˘iveClõ¡C¡
;

26 
GOS_S32
 
	mªboŸGpioIndex
;

27 
GOS_S32
 
	m¶ŸTimeC¡
;

28 
GOS_S32
 
	m∂ayFœg
;

29 
GOS_Clõ¡_Info_t
 *
	mpClõ¡Info
[2];

30 
SOCKET_MSG_PROGRAM_t
 
	m°Sîvi˚Info
[4];

31 }
	tGOS_SlŸ_Info_t
;

33 
OS_Task_H™dÀ_t
 
	gH™dÀ_Bﬂrd_Check
;

34 
OS_Task_H™dÀ_t
 
	gH™dÀ_HMsg_Di•©ch
;

35 
GOS_SlŸ_Info_t
 
	ggSlŸInfo
[
MAX_SLOT_NUM
];

36 
GOS_Clõ¡_Info_t
 
	ggClõ¡Info
[
MAX_MAIN_AVPLAY_NUM
];

37 
GOS_BOOL
 
	ggCheck_˛õ¡_run
 = 
GOS_TRUE
;

38 
GOS_BOOL
 
	ggGëMsg_˛õ¡_run
 = 
GOS_TRUE
;

40 
OS_Task_H™dÀ_t
 
	gH™dÀ_Sîv_Nëp‹t_Pro˚ss
;

41 
GOS_U8
 
	gbNë_Sîv_Sètus
 = 
SLAVE_NET_READY
;

43 
GOS_S32
 
	$sockë_£rvî_bulid
(
HI_S32
 
s32P‹t
, HI_S32* 
ps32SockëFd
)

45 
HI_S32
 
s32SockëFd
 = -1;

46 
sockaddr_ö
 
£vi˚_addr
;

48 
s32SockëFd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

49 i‡(
s32SockëFd
 < 0)

51 
	`LOG_ERROR
("SocketÉrror...\n");

52  
HI_FAILURE
;

55 
	`LOG_INFO
("s32SockëFd = %d\n", 
s32SockëFd
);

57 
	`bzîo
(&
£vi˚_addr
, (sevice_addr));

58 
£vi˚_addr
.
sö_Ámûy
 = 
AF_INET
;

59 
£vi˚_addr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

60 
£vi˚_addr
.
sö_p‹t
 = 
	`ht⁄s
(
s32P‹t
);

61 
	`bzîo
(&(
£vi˚_addr
.
sö_zîo
), (sevice_addr.sin_zero));

62 i‡(
	`böd
(
s32SockëFd
, (
sockaddr
 *)&
£vi˚_addr
, (sockaddr)) < 0)

64 
	`˛o£
(
s32SockëFd
);

65 
	`LOG_ERROR
("BindÉrror...\n");

66  
HI_FAILURE
;

69 
	`li°í
(
s32SockëFd
, 
BACKLOG
);

70 i‡(
s32SockëFd
 < 0)

72 
	`˛o£
(
s32SockëFd
);

73 
	`LOG_ERROR
("ListenÉrror...\n");

74  
HI_FAILURE
;

77 i‡(
ps32SockëFd
)

79 *
ps32SockëFd
 = 
s32SockëFd
;

82  
HI_SUCCESS
;

83 
	}
}

86 
GOS_S32
 
	$sockë_£rvî_ˇŒ_˛õ¡
(
GOS_U16
 
u16ChùID
)

88 
i
;

89 
GOS_S32
 
Evít
 = 1;

90 
GOS_VOID
* 
£nd_buf
 = 
NULL
;

91 
SOCKET_MSG_INFO_S
 
°MsgHód
;

92 
ªt
 = 
GOS_SUCCESS
;

94 
i
 = 0; i < 
MAX_MAIN_AVPLAY_NUM
; i++)

96 if((
gClõ¡Info
[
i
].
chùIndex
 != 0xFF) &&

97 (
gClõ¡Info
[
i
].
chùIndex
 != 0x00) &&

98 (
gClõ¡Info
[
i
].
chùIndex
 =
u16ChùID
))

104 i‡(
i
 >
MAX_MAIN_AVPLAY_NUM
)

105  
GOS_FAILURE
;

107 i‡(
gClõ¡Info
[
i
].
a˘iveFœg
 !
HI_TRUE
)

108  
GOS_FAILURE
;

110 
°MsgHód
.
u16MsgID
 = 
GOS_MSG_SVC_CALL
;

111 
°MsgHód
.
u16RecvID

u16ChùID
;

112 
°MsgHód
.
u16SídID
 = 
HOST_ID
;

113 
£nd_buf
 = 
	`PORT_SOCKET_Msg_Package
(&
°MsgHód
, (
GOS_VOID
*)&
Evít
, (
GOS_S32
));

114 i‡(
£nd_buf
 =
NULL
)

116 
	`LOG_ERROR
("PORT_SOCKET_Msg_Package Error!\n");

117  
GOS_FAILURE
;

120 
ªt
 = 
	`PORT_SOCKET_Síd_Msg_TCP
(
gClõ¡Info
[
i
].
s32T˝Fd
, 
MYPORT
, gClõ¡Info[i].
ùaddr
, 
£nd_buf
, 
°MsgHód
.
u32D©aLí
);

121 if(
ªt
 =
GOS_FAILURE
)

123 i‡(
gClõ¡Info
[
i
].
s32T˝Fd
 > 0)

125 
	`OS_WaôSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

126 
gClõ¡Info
[
i
].
ˇŒC¡
 = 4;

127 
gClõ¡Info
[
i
].
a˘iveFœg
 = 
HI_FALSE
;

128 
gClõ¡Info
[
i
].
ackSèã
 = 
HI_FALSE
;

130 if(
gClõ¡Info
[
i
].
s32T˝Fd
 > 0)

131 
	`˛o£
(
gClõ¡Info
[
i
].
s32T˝Fd
);

132 
gClõ¡Info
[
i
].
s32T˝Fd
 = -1;

133 
	`OS_Sig«lSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

137 
	`OS_FªeMem‹y
(
£nd_buf
);

139  
GOS_SUCCESS
;

140 
	}
}

143 
	$sockë_udpmsg_di•©ch_èsk
(*
¨g
)

145 
ödex
;

146 
sö_Àn
;

147 
sockaddr_ö
 
sö
;

148 
GOS_S32
 
SockëFd
;

150 
HI_S32
 
s32RcvLígth
 = -1;

151 
ãmp_Àn
 = 0;

152 
sockë_ödex
 = 0;

154 
HI_S32
 
s32Rë
 = -1;

156 
SOCKET_MSG_INFO_S
 
°MsgHód
;

157 
HI_CHAR
 
u8RecvBuf„r
[1024*1024];

158 
HI_CHAR
 
u8TempBuf„r
[1024*1024];

159 
HI_CHAR
 *
pOff£t
;

161 
ödex
 = ()
¨g
;

163 
	`mem£t
(&
sö
, 0, (sin));

164 
sö
.
sö_Ámûy
 = 
AF_INET
;

165 
sö
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

166 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
RECV_UDP_PORT
);

167 
sö_Àn
 = (
sö
);

169 
SockëFd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 
IPPROTO_UDP
);

170 
	`böd
(
SockëFd
, (
sockaddr
 *)&
sö
, (sin));

172 
	`LOG_INFO
("Creat socket_msg_dispatch_task!\n");

176 
	`mem£t
(
u8RecvBuf„r
, 0, (u8RecvBuffer));

177 
s32RcvLígth
 = 
	`ªcv‰om
(
SockëFd
, 
u8RecvBuf„r
, 1024*1024, 0, (
sockaddr
 *)&
sö
, (
sockÀn_t
*)&
sö_Àn
);;

179 i‡(
s32RcvLígth
 > 0)

181 
pOff£t
 = 
u8RecvBuf„r
;

182 
pOff£t
[
s32RcvLígth
] = '\0';

183 
msg_check_ty≥
:

184 
s32Rë
 = 
	`PORT_SOCKET_Msg_Check
(&
°MsgHód
, 
pOff£t
, 
s32RcvLígth
);

186 i‡(
s32Rë
 =
eMSG_GET_HEAD
)

189 
ãmp_Àn
 = 0;

190 
	`mem£t
(
u8TempBuf„r
, 0x00, (u8TempBuffer));

191 
	`mem˝y
(
u8TempBuf„r
, 
pOff£t
, 
s32RcvLígth
);

192 
ãmp_Àn
 = 
s32RcvLígth
;

195 i‡(
s32Rë
 =
eMSG_GET_PART
)

198 if(
ãmp_Àn
 == 0)

203 
	`mem˝y
(
u8TempBuf„r
 + 
ãmp_Àn
, 
pOff£t
, 
s32RcvLígth
);

204 
ãmp_Àn
 =Åemp_À¿+ 
s32RcvLígth
;

206 i‡(
°MsgHód
.
u32D©aLí
 =
ãmp_Àn
)

208 
	`GOS_AVPLAYHOST_Di•©ch_RecvMsg
(
sockë_ödex
, 
u8TempBuf„r
, 
ãmp_Àn
);

209 
ãmp_Àn
 = 0;

210 
	`mem£t
(
u8TempBuf„r
, 0x00, (u8TempBuffer));

212 if(
°MsgHód
.
u32D©aLí
 < 
ãmp_Àn
)

214 
	`GOS_AVPLAYHOST_Di•©ch_RecvMsg
(
sockë_ödex
, 
u8TempBuf„r
, 
°MsgHód
.
u32D©aLí
);

216 
	`mem£t
(
u8TempBuf„r
, 0, (u8TempBuffer));

217 
ãmp_Àn
 =Åemp_À¿- 
°MsgHód
.
u32D©aLí
;

218 if(
s32RcvLígth
 <
ãmp_Àn
)

223 
pOff£t
 =ÖOff£à+ (
s32RcvLígth
 - 
ãmp_Àn
);

224 
s32RcvLígth
 = 
ãmp_Àn
;

227 
ãmp_Àn
 = 0;

229 
msg_check_ty≥
;

232 i‡(
s32Rë
 =
eMSG_GET_ONE
)

235 i‡(
°MsgHód
.
u32D©aLí
 <
s32RcvLígth
)

238 
	`GOS_AVPLAYHOST_Di•©ch_RecvMsg
(
sockë_ödex
, 
pOff£t
, 
s32RcvLígth
);

241 i‡(
s32Rë
 =
eMSG_GET_MORE
)

244 
	`GOS_AVPLAYHOST_Di•©ch_RecvMsg
(
sockë_ödex
, 
pOff£t
, 
°MsgHód
.
u32D©aLí
);

245 
s32RcvLígth
 = s32RcvLígth - 
°MsgHód
.
u32D©aLí
;

246 
pOff£t
 =ÖOff£à+ 
°MsgHód
.
u32D©aLí
;

247 
msg_check_ty≥
;

251 
	}
}

253 
	$sockë_hmsg_di•©ch_èsk
(*
¨g
)

255 
i
 = 0;

256 
sockë_ödex
 = 0;

257 
maxfdp
;

258 
HI_S32
 
s32Rë
 = -1;

259 
HI_S32
 
s32Size
 = 0;

260 
HI_S32
 
s32SockFd
 = -1;

261 
HI_S32
 
s32SockëFd
 = -1;

262 
HI_S32
 
s32RcvLígth
 = -1;

263 
fd_£t
 
fd_£t_r
, 
fd_£t_w
;

264 
sockaddr_ö
 
˛õ¡_addr
;

265 
SOCKET_MSG_INFO_S
 
°MsgHód
;

266 
HI_CHAR
 
u8RecvBuf„r
[1024*1024];

267 
HI_CHAR
 *
pOff£t
;

269 
	`LOG_INFO
("Creat socket_msg_dispatch_task!\n");

272 
	`FD_ZERO
(&
fd_£t_r
);

273 
	`FD_ZERO
(&
fd_£t_w
);

275 i‡(
HI_SUCCESS
 !
	`sockë_£rvî_bulid
(
MYPORT
, &
s32SockëFd
))

277 
	`LOG_ERROR
("socket_server_bulid failure!\n");

280 
	`LOG_INFO
("Sîvî-->s32SockëFd : %d\n", 
s32SockëFd
);

282 
	`FD_SET
(
s32SockëFd
, &
fd_£t_r
);

283 
maxfdp
 = 
s32SockëFd
;

285 
gGëMsg_˛õ¡_run
)

287 
	`FD_ZERO
(&
fd_£t_w
);

288 
	`FD_ZERO
(&
fd_£t_r
);

289 
	`FD_SET
(
s32SockëFd
, &
fd_£t_r
);

290 
maxfdp
 = 
s32SockëFd
;

292 
i
 = 0; i < 
MAX_MAIN_AVPLAY_NUM
; i++)

294 i‡(
gClõ¡Info
[
i
].
a˘iveFœg
 =
HI_TRUE
)

296 
	`FD_SET
(
gClõ¡Info
[
i
].
s32T˝Fd
, &
fd_£t_r
);

297 
maxfdp
 = 
gClõ¡Info
[
i
].
s32T˝Fd
 > maxfdp ? gClientInfo[i].s32TcpFd : maxfdp;

301 i‡(
	`£À˘
(
maxfdp
 + 1, &
fd_£t_r
, &
fd_£t_w
, 
NULL
, NULL) <= 0)

303 
	`LOG_ERROR
("select failure!\n");

307 i‡(
	`FD_ISSET
(
s32SockëFd
, &
fd_£t_r
))

310 
s32Size
 = (
˛õ¡_addr
);

311 
	`bzîo
(&
˛õ¡_addr
, 
s32Size
);

312 i‡((
s32SockFd
 = 
	`ac˚±
(
s32SockëFd
, (
sockaddr
 *)&
˛õ¡_addr
, (
sockÀn_t
 *)&
s32Size
)) < 0)

314 if(
î∫o
=
EINTR
)

319 
	`LOG_INFO
("\nClõ¡ O∆öe::=========s32SockFd:%d,IP:%s\n", 
s32SockFd
, 
	`öë_¡ﬂ
(
˛õ¡_addr
.
sö_addr
));

321 
i
 = 0; i < 
MAX_MAIN_AVPLAY_NUM
; i++)

323 i‡(
gClõ¡Info
[
i
].
a˘iveFœg
 =
HI_FALSE
)

325 
	`OS_WaôSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

327 
gClõ¡Info
[
i
].
s32T˝Fd
 = 
s32SockFd
;

328 
	`°r˝y
(
gClõ¡Info
[
i
].
ùaddr
, 
	`öë_¡ﬂ
(
˛õ¡_addr
.
sö_addr
));

329 
gClõ¡Info
[
i
].
a˘iveFœg
 = 
HI_TRUE
;

330 
gClõ¡Info
[
i
].
ˇŒC¡
 = 0;

331 
gClõ¡Info
[
i
].
ackSèã
 = 
HI_FALSE
;

332 
gClõ¡Info
[
i
].
chùIndex
 = 0x00;

334 
	`OS_Sig«lSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

340 i‡(
i
 >
MAX_MAIN_AVPLAY_NUM
)

347 
i
 = 0; i < 
MAX_MAIN_AVPLAY_NUM
; i++)

350 i‡((
	`FD_ISSET
(
gClõ¡Info
[
i
].
s32T˝Fd
, &
fd_£t_r
)Ë&& (gClõ¡Info[i].
a˘iveFœg
 =
HI_TRUE
))

352 
	`mem£t
(
gClõ¡Info
[
i
].
u8RecvBuf„r
, 0x00, (gClientInfo[i].u8RecvBuffer));

353 i‡(
	`PORT_SOCKET_Recv_Msg_TCP
(
gClõ¡Info
[
i
].
s32T˝Fd
, 
u8RecvBuf„r
, &
s32RcvLígth
Ë!
GOS_SUCCESS
)

356 
	`LOG_INFO
("FD_ISSET::=====i:%d=˜˘iveFœg:%d==s32SockFd:%d,IP:%s\n",
i
, 
gClõ¡Info
[i].
a˘iveFœg
,gClõ¡Info[i].
s32T˝Fd
, gClõ¡Info[i].
ùaddr
);

357 
	`OS_WaôSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

358 
gClõ¡Info
[
i
].
ˇŒC¡
 = 4;

359 
gClõ¡Info
[
i
].
a˘iveFœg
 = 
HI_FALSE
;

360 
gClõ¡Info
[
i
].
ackSèã
 = 
HI_FALSE
;

362 if(
gClõ¡Info
[
i
].
s32T˝Fd
 > 0)

363 
	`˛o£
(
gClõ¡Info
[
i
].
s32T˝Fd
);

364 
gClõ¡Info
[
i
].
s32T˝Fd
 = -1;

365 
	`OS_Sig«lSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

370 i‡(
s32RcvLígth
 == 0)

372 
	`OS_WaôSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

373 
gClõ¡Info
[
i
].
ˇŒC¡
 = 4;

374 
gClõ¡Info
[
i
].
a˘iveFœg
 = 
HI_FALSE
;

375 
gClõ¡Info
[
i
].
ackSèã
 = 
HI_FALSE
;

377 if(
gClõ¡Info
[
i
].
s32T˝Fd
 > 0)

378 
	`˛o£
(
gClõ¡Info
[
i
].
s32T˝Fd
);

379 
gClõ¡Info
[
i
].
s32T˝Fd
 = -1;

380 
	`OS_Sig«lSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

384 i‡(
gClõ¡Info
[
i
].
a˘iveFœg
 !
HI_TRUE
)

387 i‡(
s32RcvLígth
 > 0)

389 
pOff£t
 = 
u8RecvBuf„r
;

390 
pOff£t
[
s32RcvLígth
] = '\0';

391 
msg_check_ty≥
:

392 
s32Rë
 = 
	`PORT_SOCKET_Msg_Check
(&
°MsgHód
, 
pOff£t
, 
s32RcvLígth
);

393 i‡(
s32Rë
 =
eMSG_GET_HEAD
)

395 
gClõ¡Info
[
i
].
d©aLí
 = 0;

396 
	`mem£t
(
gClõ¡Info
[
i
].
u8RecvBuf„r
, 0x00, (gClientInfo[i].u8RecvBuffer));

397 
	`mem˝y
(
gClõ¡Info
[
i
].
u8RecvBuf„r
, 
pOff£t
, 
s32RcvLígth
);

399 
gClõ¡Info
[
i
].
d©aLí
 = 
s32RcvLígth
;

401 i‡(
s32Rë
 =
eMSG_GET_PART
)

403 if(
gClõ¡Info
[
i
].
d©aLí
 == 0)

408 
	`mem˝y
(
gClõ¡Info
[
i
].
u8RecvBuf„r
 + gClõ¡Info[i].
d©aLí
, 
pOff£t
, 
s32RcvLígth
);

409 
gClõ¡Info
[
i
].
d©aLí
 = gClõ¡Info[i].d©aLí + 
s32RcvLígth
;

410 i‡(
°MsgHód
.
u32D©aLí
 =
gClõ¡Info
[
i
].
d©aLí
)

412 
	`GOS_AVPLAYHOST_Di•©ch_RecvMsg
(
sockë_ödex
, 
gClõ¡Info
[
i
].
u8RecvBuf„r
, gClõ¡Info[i].
d©aLí
);

413 
gClõ¡Info
[
i
].
d©aLí
 = 0;

414 
	`mem£t
(
gClõ¡Info
[
i
].
u8RecvBuf„r
, 0x00, (gClientInfo[i].u8RecvBuffer));

416 if(
°MsgHód
.
u32D©aLí
 < 
gClõ¡Info
[
i
].
d©aLí
)

418 
	`GOS_AVPLAYHOST_Di•©ch_RecvMsg
(
sockë_ödex
, 
gClõ¡Info
[
i
].
u8RecvBuf„r
, 
°MsgHód
.
u32D©aLí
);

419 
	`mem£t
(
gClõ¡Info
[
i
].
u8RecvBuf„r
, 0x00, (gClientInfo[i].u8RecvBuffer));

420 
gClõ¡Info
[
i
].
d©aLí
 = gClõ¡Info[i].d©aLí - 
°MsgHód
.
u32D©aLí
;

421 if(
s32RcvLígth
 <
gClõ¡Info
[
i
].
d©aLí
)

426 
pOff£t
 =ÖOff£à+ (
s32RcvLígth
 - 
gClõ¡Info
[
i
].
d©aLí
);

427 
s32RcvLígth
 = 
gClõ¡Info
[
i
].
d©aLí
;

428 
gClõ¡Info
[
i
].
d©aLí
 = 0;

429 
msg_check_ty≥
;

433 i‡(
s32Rë
 =
eMSG_GET_ONE
)

435 i‡(
°MsgHód
.
u32D©aLí
 <
s32RcvLígth
)

437 
	`GOS_AVPLAYHOST_Di•©ch_RecvMsg
(
sockë_ödex
, 
pOff£t
, 
s32RcvLígth
);

440 i‡(
s32Rë
 =
eMSG_GET_MORE
)

442 
	`GOS_AVPLAYHOST_Di•©ch_RecvMsg
(
sockë_ödex
, 
pOff£t
, 
°MsgHód
.
u32D©aLí
);

443 
s32RcvLígth
 = s32RcvLígth - 
°MsgHód
.
u32D©aLí
;

444 
pOff£t
 =ÖOff£à+ 
°MsgHód
.
u32D©aLí
;

445 
msg_check_ty≥
;

451 
	}
}

453 
GOS_S32
 
	$sockë_check_¶ave_√t°©us
(
i
, 
j
)

455 
GOS_S32
 
døwFœg
[
MAX_SLOT_NUM
][2];

456 
GOS_S32
 
˛órFœg
 = 0;

457 
GOS_S32
 
m⁄ô‹Sètus
 = 0;

458 
GOS_U16
 
wöID
 = 0;

459 
GOS_CHAR
 
p_IpAddr
[32] = "0.0.0.0";

461 
wöID
 = (
i
*2+
j
)*2-2;

463 if(
GOS_SUCCESS
 !
	`PORT_SOCKET_GëIP_ByChùID
(
p_IpAddr
, 
	`PORT_SYS_Gë_Ho°Addr
(), (
wöID
)/2+1))

468 
m⁄ô‹Sètus
 = 
	`GOS_AVPLAYHOST_GëPageSètus
();

470 i‡(
GOS_FALSE
 =
m⁄ô‹Sètus
)

472 i‡(
˛órFœg
 == 0)

474 
	`mem£t
(
døwFœg
, 0, (drawFlag));

475 
˛órFœg
 = 1;

477  
GOS_SUCCESS
;

481 i‡(
GOS_NULL
 =
gSlŸInfo
[
i
].
pClõ¡Info
[
j
])

484 i‡((
GOS_TRUE
 =
m⁄ô‹Sètus
Ë&& ((0 =
døwFœg
[
i
][
j
])))

486 i‡(
WIN_STATUS_MONITOR
 =
	`GOS_AVPLAYHOST_GëWöU£Sètus
(
wöID
))

488 
	`GOS_AVCAPTURE_St›PœyIFøme
((
i
*2+
j
) - 1);

490 
	`OSD_Døw_No_NëC⁄√˘
(
wöID
, 
GOS_TRUE
,
p_IpAddr
, 
	`GOS_AVPLAYHOST_GëPageIãmNum
());

493 i‡(
WIN_STATUS_MONITOR
 =
	`GOS_AVPLAYHOST_GëWöU£Sètus
(
wöID
+1))

495 
	`OSD_Døw_No_NëC⁄√˘
(
wöID
+1, 
GOS_TRUE
, 
p_IpAddr
, 
	`GOS_AVPLAYHOST_GëPageIãmNum
());

497 
døwFœg
[
i
][
j
] = 1;

499 i‡(1 =
˛órFœg
)

501 
˛órFœg
 = 0;

506  
GOS_SUCCESS
;

511 i‡((
GOS_TRUE
 =
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
a˘iveFœg
Ë&& (1 =
døwFœg
[i][j]))

513 
	`OSD_Døw_No_NëC⁄√˘
(
wöID
, 
GOS_FALSE
, 
p_IpAddr
, 
	`GOS_AVPLAYHOST_GëPageIãmNum
());

514 i‡(
WIN_STATUS_MONITOR
 =
	`GOS_AVPLAYHOST_GëWöU£Sètus
(
wöID
+1))

516 
	`OSD_Døw_No_NëC⁄√˘
(
wöID
+1, 
GOS_FALSE
, 
p_IpAddr
, 
	`GOS_AVPLAYHOST_GëPageIãmNum
());

518 
døwFœg
[
i
][
j
] = 0;

520  
GOS_SUCCESS
;

525  
GOS_SUCCESS
;

526 
	}
}

528 
	$sockë_bﬂrd_check_èsk
(*
¨g
)

530 
i
, 
j
;

532 
gCheck_˛õ¡_run
)

535 
i
 = 0; i < 
MAX_SLOT_NUM
; i++)

537 
j
 = 0; j < 2; j++)

539 i‡((0 =
i
)&&(0 =
j
))

543 
	`sockë_check_¶ave_√t°©us
(
i
, 
j
);

545 i‡(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
] !
NULL
)

548 
	`¥ötf
("sockë_bﬂrd_check_èsk %d : i∞: %†chù : %d sèã†: %d %d %d\n" , 
i
,

549 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
ùaddr
,

550 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
chùIndex
,

551 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
a˘iveFœg
,

552 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
ackSèã
,

553 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
ˇŒC¡
);

556 (
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
chùIndex
 != 0xFF) &&

557 (
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
chùIndex
 != 0x00))

559 i‡(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
ackSèã
 =
HI_TRUE
)

561 
	`OS_WaôSem≠h‹e
(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
lockSem
);

563 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
ackSèã
 = 
HI_FALSE
;

564 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
ˇŒC¡
 = 0;

566 
	`OS_Sig«lSem≠h‹e
(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
lockSem
);

568 
	`sockë_£rvî_ˇŒ_˛õ¡
(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
chùIndex
);

572 i‡(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
ˇŒC¡
 > 3)

574 
	`¥ötf
("===========Lo° Lök===sockë:%d--chù:%d=====================\n",
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
s32T˝Fd
,gSlŸInfo[i].pClõ¡Info[j]->
chùIndex
);

575 i‡(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
] !
NULL
)

578 
	`Sockë_Sîvî_Brﬂdˇ°_toReboŸ
(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
chùIndex
);

580 
	`OS_WaôSem≠h‹e
(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
lockSem
);

582 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
ˇŒC¡
 = 0;

583 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
a˘iveFœg
 = 
HI_FALSE
;

584 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
ackSèã
 = 
HI_FALSE
;

585 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
chùIndex
 = 0x00;

587 
	`OS_Sig«lSem≠h‹e
(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
lockSem
);

589 if(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
s32T˝Fd
 > 0)

590 
	`˛o£
(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
s32T˝Fd
);

591 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
s32T˝Fd
 = -1;

592 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
] = 
NULL
;

597 
	`OS_WaôSem≠h‹e
(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
lockSem
);

599 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
ackSèã
 = 
HI_FALSE
;

600 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
ˇŒC¡
++;

602 
	`OS_Sig«lSem≠h‹e
(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
lockSem
);

604 
	`sockë_£rvî_ˇŒ_˛õ¡
(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
chùIndex
);

612 
	`¶ìp
(3);

614 
	}
}

616 
	$sockë_check_ho°_√ç‹t_èsk
()

618 
pName
[32] = "eth1";

620 
bNë_Sîv_Sètus
 = 
SLAVE_NET_READY
;

623 if(
	`PORT_SOCKET_Dëe˘_Nëlök_Sètus
(
pName
) == 1)

625 if(
SLAVE_NET_DISCONNECT
 =
bNë_Sîv_Sètus
)

627 
	`¥ötf
("=====Net Connectágian\n");

628 
bNë_Sîv_Sètus
 = 
SLAVE_NET_CONNECT
;

630 
	`exô
(0);

632 
bNë_Sîv_Sètus
 = 
SLAVE_NET_CONNECT
;

636 if(
SLAVE_NET_CONNECT
 =
bNë_Sîv_Sètus
)

638 
	`¥ötf
("########Net Break\n");

639 
	`Sockë_Sîvî_Clo£
();

640 
bNë_Sîv_Sètus
 = 
SLAVE_NET_DISCONNECT
;

643 
	`u¶ìp
(500 * 1000);

647 
	}
}

649 
GOS_S32
 
	$Sockë_Sîvî_O≥n
()

651 
i
 = 0;

653 
i
 = 0; i < 
MAX_SLOT_NUM
; i++)

655 
gSlŸInfo
[
i
].
a˘iveClõ¡C¡
 = 0;

656 
gSlŸInfo
[
i
].
pClõ¡Info
[0] = 
NULL
;

657 
gSlŸInfo
[
i
].
pClõ¡Info
[1] = 
NULL
;

658 
gSlŸInfo
[
i
].
ªboŸGpioIndex
 = i;

659 
gSlŸInfo
[
i
].
¶ŸTimeC¡
 = 0;

662 
i
 = 0; i < 
MAX_MAIN_AVPLAY_NUM
; i++)

664 
gClõ¡Info
[
i
].
a˘iveFœg
 = 
HI_FALSE
;

665 
gClõ¡Info
[
i
].
s32T˝Fd
 = -1;

666 
gClõ¡Info
[
i
].
s32UdpFd
 = -1;

667 
	`mem£t
((*)
gClõ¡Info
[
i
].
ùaddr
, 0x00, (gClientInfo[i].ipaddr));

668 
gClõ¡Info
[
i
].
chùIndex
 = 0xFF;

669 
gClõ¡Info
[
i
].
ˇŒC¡
 = 0;

670 
gClõ¡Info
[
i
].
ackSèã
 = 
HI_FALSE
;

671 
gClõ¡Info
[
i
].
lockSem
 = 
	`OS_Cª©eSem≠h‹e
(1);

674 
OS_Task_H™dÀ_t
 
msg_di•©ch_h™dÀ
;

675 i‡(
	`OS_Cª©eTask
(
sockë_udpmsg_di•©ch_èsk
, (*)
i
, (
OS_Task_H™dÀ_t
*)&
msg_di•©ch_h™dÀ
Ë!
GOS_TRUE
)

677 
	`LOG_OUTPUTF
(
E_LOG_LEVELERROR
, "FailedÅo createÅhe install_task \n" );

678  
GOS_FAILURE
;

681 
gGëMsg_˛õ¡_run
 = 
GOS_TRUE
;

682 
gCheck_˛õ¡_run
 = 
GOS_TRUE
;

683 i‡(!
	`OS_Cª©eTask
(
sockë_hmsg_di•©ch_èsk
, 
NULL
, (
OS_Task_H™dÀ_t
*)&
H™dÀ_HMsg_Di•©ch
))

685 
	`LOG_ERROR
("CreateÅhe socket_msg_dispatch_task Failed!\n");

686  
GOS_FAILURE
;

689 i‡(!
	`OS_Cª©eTask
(
sockë_bﬂrd_check_èsk
, 
NULL
, (
OS_Task_H™dÀ_t
*)&
H™dÀ_Bﬂrd_Check
))

691 
	`LOG_ERROR
("CreateÅhe media_moniterSocket_task Failed!\n");

692  
GOS_FAILURE
;

695 i‡(!
	`OS_Cª©eTask
(
sockë_check_ho°_√ç‹t_èsk
, 
NULL
, (
OS_Task_H™dÀ_t
*)&
H™dÀ_Sîv_Nëp‹t_Pro˚ss
))

697 
	`LOG_ERROR
("CreateÅhe socket_check_host_netport_task Failed!\n");

698  
GOS_FAILURE
;

701 
	`LOG_INFO
("Socket_Server_Open Success!\n");

702  
GOS_SUCCESS
;

703 
	}
}

705 
GOS_S32
 
	$Sockë_Check_Task_Clo£
()

707 
gCheck_˛õ¡_run
 = 
GOS_FALSE
;

708  
GOS_SUCCESS
;

709 
	}
}

712 
GOS_BOOL
 
	$Sockë_Sîvî_GëSœveSètus
(
chùID
)

714 
i
 = 0;

715 
j
 = 0;

716 
GOS_BOOL
 
bSètus
 = 
GOS_FALSE
;

718 
i
 = 0; i < 
MAX_SLOT_NUM
; i++)

720 
j
 = 0; j < 2; j++)

722 i‡(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
] !
NULL
)

724 if(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
chùIndex
 =
chùID
)

726 
	`LOG_INFO
("### O∆öêchù:%d\n",
chùID
);

727 
bSètus
 = 
GOS_TRUE
;

733  
bSètus
;

734 
	}
}

737 
GOS_S32
 
	$Sockë_Sîvî_GëSœveChùID
(*
pAddr
)

739 
i
 = 0;

740 
j
 = 0;

741 
chùid
 = -1;

743 if(
GOS_NULL
 =
pAddr
)

745  
chùid
;

748 
i
 = 0; i < 
MAX_SLOT_NUM
; i++)

750 
j
 = 0; j < 2; j++)

752 i‡(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
] !
NULL
)

754 i‡(0 =
	`memcmp
((c⁄° *)
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
ùaddr
, (c⁄° *)
pAddr
,32))

756 
	`LOG_INFO
("###ù sóch chùID :%d\n",
chùid
);

757 
chùid
 = 
i
 * 2 + 
j
;

764 if(
chùid
 == 0x00)

765 
chùid
 = -1;

767  
chùid
;

768 
	}
}

771 
GOS_BOOL
 
	$Sockë_Sîvî_GëSœveSètus_Ex
(
chùID
, *
pAddr
)

773 
i
 = 0;

774 
j
 = 0;

775 
GOS_BOOL
 
bSètus
 = 
GOS_FALSE
;

777 if(
GOS_NULL
 =
pAddr
)

779  
bSètus
;

782 
i
 = 0; i < 
MAX_SLOT_NUM
; i++)

784 
j
 = 0; j < 2; j++)

786 i‡(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
] !
NULL
)

788 if((
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
chùIndex
 =
chùID
Ë&& (!
	`memcmp
((c⁄° *)gSlŸInfo[i].pClõ¡Info[j]->
ùaddr
, (c⁄° *)
pAddr
,32)))

790 
bSètus
 = 
GOS_TRUE
;

796  
bSètus
;

797 
	}
}

799 
GOS_S32
 
	$Sockë_Sîvî_Clo£Sœve
(
chùID
)

801 
i
 = 0;

802 
j
 = 0;

803 
i
 = 0; i < 
MAX_SLOT_NUM
; i++)

805 
j
 = 0; j < 2; j++)

807 i‡(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
] !
NULL
)

809 if(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
chùIndex
 =
chùID
)

811 
	`¥ötf
("##############-------M™uÆ Clo£ chù:%d\n",
chùID
);

812 
	`OS_WaôSem≠h‹e
(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
lockSem
);

814 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
ˇŒC¡
 = 0;

815 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
a˘iveFœg
 = 
HI_FALSE
;

816 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
ackSèã
 = 
HI_FALSE
;

817 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
chùIndex
 = 0x00;

819 
	`OS_Sig«lSem≠h‹e
(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
lockSem
);

821 if(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
s32T˝Fd
 > 0)

822 
	`˛o£
(
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
s32T˝Fd
);

823 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
]->
s32T˝Fd
 = -1;

824 
gSlŸInfo
[
i
].
pClõ¡Info
[
j
] = 
NULL
;

829  
GOS_SUCCESS
;

830 
	}
}

832 
GOS_S32
 
	$Sockë_Sîvî_Clo£
()

834 
i
 = 0;

836 
gGëMsg_˛õ¡_run
 = 
GOS_FALSE
;

842 
i
 = 0; i < 
MAX_MAIN_AVPLAY_NUM
; i++)

844 i‡(
gClõ¡Info
[
i
].
s32T˝Fd
 > 0)

846 
	`˛o£
(
gClõ¡Info
[
i
].
s32T˝Fd
);

847 
gClõ¡Info
[
i
].
a˘iveFœg
 = 
HI_FALSE
;

848 
gClõ¡Info
[
i
].
s32T˝Fd
 = -1;

849 
	`mem£t
((*)
gClõ¡Info
[
i
].
ùaddr
, 0x00, (gClientInfo[i].ipaddr));

850 
gClõ¡Info
[
i
].
chùIndex
 = 0xFF;

851 
gClõ¡Info
[
i
].
ˇŒC¡
 = 0;

852 
gClõ¡Info
[
i
].
ackSèã
 = 
HI_FALSE
;

853 
	`OS_DñëeSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

854 
gClõ¡Info
[
i
].
lockSem
 = 
NULL
;

858 
i
 = 0; i < 
MAX_SLOT_NUM
; i++)

860 
gSlŸInfo
[
i
].
a˘iveClõ¡C¡
 = 0;

861 
gSlŸInfo
[
i
].
pClõ¡Info
[0] = 
NULL
;

862 
gSlŸInfo
[
i
].
pClõ¡Info
[1] = 
NULL
;

863 
gSlŸInfo
[
i
].
ªboŸGpioIndex
 = i;

864 
gSlŸInfo
[
i
].
¶ŸTimeC¡
 = 0;

867  
GOS_SUCCESS
;

868 
	}
}

870 
GOS_S32
 
	$Sockë_Sîvî_Recv_Clõ¡
(
GOS_U32
 
askChùIndex
)

872 
i
 = 0;

874 
i
 = 0; i < 
MAX_MAIN_AVPLAY_NUM
; i++)

876 i‡((
gClõ¡Info
[
i
].
chùIndex
 != 0xFF) &&

877 (
gClõ¡Info
[
i
].
chùIndex
 != 0x00) &&

878 (
gClõ¡Info
[
i
].
chùIndex
 =
askChùIndex
) )

881 
	`OS_WaôSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

883 
gClõ¡Info
[
i
].
ackSèã
 = 
HI_TRUE
;

885 
	`OS_Sig«lSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

889  
GOS_SUCCESS
;

890 
	}
}

892 
GOS_S32
 
	$Sockë_Sîvî_M©ch_Clõ¡
(
SOCKET_CLIENT_INFO_t
* 
p°Clõ¡Info
)

894 
i
 = 0;

895 
iSlŸIndex
 = 0;

897 i‡(!
p°Clõ¡Info
)

899 
	`LOG_ERROR
("TheÖstClientInfo is NULL\n");

900  
GOS_FAILURE
;

905 
i
 = 0; i < 
MAX_MAIN_AVPLAY_NUM
; i++)

907 i‡(
gClõ¡Info
[
i
].
a˘iveFœg
 =
HI_TRUE
)

909 i‡(0 =
	`memcmp
((c⁄° *)
gClõ¡Info
[
i
].
ùaddr
, (c⁄° *)
p°Clõ¡Info
->ipaddr,(pstClientInfo->ipaddr)))

911 
	`OS_WaôSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

913 
gClõ¡Info
[
i
].
ty≥
 = 
p°Clõ¡Info
->type;

914 
gClõ¡Info
[
i
].
chùIndex
 = 
p°Clõ¡Info
->chipIndex;

916 
	`LOG_INFO
("Sockë_Sîvî_M©ch_Clõ¡->ty≥:%d, chùIndex:%d, i∑ddr:%s\n", 
p°Clõ¡Info
->
ty≥
,Ö°Clõ¡Info->
chùIndex
,Ö°Clõ¡Info->
ùaddr
);

918 
	`OS_Sig«lSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

920 
iSlŸIndex
 = ()(
gClõ¡Info
[
i
].
chùIndex
 /2);

921 if(
gClõ¡Info
[
i
].
chùIndex
 % 2 ==0)

923 
gSlŸInfo
[
iSlŸIndex
].
pClõ¡Info
[0] = &
gClõ¡Info
[
i
];

927 
gSlŸInfo
[
iSlŸIndex
].
pClõ¡Info
[1] = &
gClõ¡Info
[
i
];

930 
gSlŸInfo
[
iSlŸIndex
].
ªboŸGpioIndex
 = iSlotIndex;

936 i‡(
i
 =
MAX_MAIN_AVPLAY_NUM
)

938 
	`LOG_ERROR
("Not matchány ipaddress !\n");

939  
GOS_FAILURE
;

942  
GOS_SUCCESS
;

943 
	}
}

945 
GOS_S32
 
	$Sockë_Sîvî_Síd_TCP_Msg
(
iChùIndex
, c⁄° * 
pD©a
, 
iD©Æí
)

947 
i
 = 0;

948 
ªt
 = 
GOS_SUCCESS
;

950 i‡(!
pD©a
)

952 
	`LOG_ERROR
("TheÖData is NULL\n");

953  
GOS_FAILURE
;

956 
i
 = 0; i < 
MAX_MAIN_AVPLAY_NUM
; i++)

958 i‡(
gClõ¡Info
[
i
].
chùIndex
 =(
iChùIndex
 ))

962 i‡(
i
 >
MAX_MAIN_AVPLAY_NUM
)

965  
GOS_FAILURE
;

968 i‡(
gClõ¡Info
[
i
].
a˘iveFœg
 =
HI_FALSE
)

971  
GOS_FAILURE
;

974 
	`OS_WaôSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

975 
ªt
 = 
	`PORT_SOCKET_Síd_Msg_TCP
(
gClõ¡Info
[
i
].
s32T˝Fd
, 
MYPORT
, gClõ¡Info[i].
ùaddr
, 
pD©a
, 
iD©Æí
);

976 if(
ªt
 =
GOS_FAILURE
)

978 i‡(
gClõ¡Info
[
i
].
s32T˝Fd
 > 0)

981 
gClõ¡Info
[
i
].
ˇŒC¡
 = 4;

982 
gClõ¡Info
[
i
].
a˘iveFœg
 = 
HI_FALSE
;

983 
gClõ¡Info
[
i
].
ackSèã
 = 
HI_FALSE
;

985 if(
gClõ¡Info
[
i
].
s32T˝Fd
 > 0)

986 
	`˛o£
(
gClõ¡Info
[
i
].
s32T˝Fd
);

987 
gClõ¡Info
[
i
].
s32T˝Fd
 = -1;

991 
	`OS_Sig«lSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

993  
ªt
;

994 
	}
}

996 
GOS_S32
 
	$Sockë_Sîvî_Síd_TCP_Msg_AŒ
(c⁄° * 
pD©a
, 
iD©Æí
)

998 
i
 = 0;

999 
ªt
 = 
GOS_SUCCESS
;

1001 
i
 = 0; i < 
MAX_MAIN_AVPLAY_NUM
; i++)

1003 i‡(
gClõ¡Info
[
i
].
a˘iveFœg
 =
HI_FALSE
)

1006 
	`OS_WaôSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

1007 
ªt
 = 
	`PORT_SOCKET_Síd_Msg_TCP
(
gClõ¡Info
[
i
].
s32T˝Fd
, 
MYPORT
, gClõ¡Info[i].
ùaddr
, 
pD©a
, 
iD©Æí
);

1008 if(
ªt
 =
GOS_FAILURE
)

1010 i‡(
gClõ¡Info
[
i
].
s32T˝Fd
 > 0)

1012 
gClõ¡Info
[
i
].
ˇŒC¡
 = 4;

1013 
gClõ¡Info
[
i
].
a˘iveFœg
 = 
HI_FALSE
;

1014 
gClõ¡Info
[
i
].
ackSèã
 = 
HI_FALSE
;

1016 if(
gClõ¡Info
[
i
].
s32T˝Fd
 > 0)

1017 
	`˛o£
(
gClõ¡Info
[
i
].
s32T˝Fd
);

1018 
gClõ¡Info
[
i
].
s32T˝Fd
 = -1;

1023 
	`LOG_INFO
("----------Síd SœvêChù:%d ReboŸ OK!!!-------\n", 
i
+1);

1025 
	`OS_Sig«lSem≠h‹e
(
gClõ¡Info
[
i
].
lockSem
);

1028  
ªt
;

1029 
	}
}

1032 
	#BROADCAST_PORT
 7676

	)

1033 
	$gëBrﬂdˇ°IP
(
sockaddr_ö
 *
sö
)

1035 
sock
;

1036 *
ETH_NAME
 = 
NETCARD_EVEN
;

1038 
i‰eq
 
i‰
;

1039 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

1040 i‡(
sock
 == -1)

1042 
	`≥º‹
("socket");

1045 
	`mem£t
(&
i‰
,0,(ifr));

1046 
	`mem˝y
(
i‰
.
i‰_«me
,
ETH_NAME
,(ETH_NAME));

1048 i‡(
	`io˘l
(
sock
, 
SIOCGIFBRDADDR
, &
i‰
) < 0)

1050 
	`≥º‹
("ioctl");

1051 
	`˛o£
(
sock
);

1054 
	`˛o£
(
sock
);

1056 
	`mem˝y
(
sö
,&(
i‰
.
i‰_brﬂdaddr
),(
sockaddr_ö
));

1059 
	}
}

1061 
GOS_S32
 
	$Sockë_Sîvî_Brﬂdˇ°_toReboŸ
(
chùID
)

1063 
sockfd
;

1064 
sockaddr_ö
 
£r_addr
;

1066 if((15 < 
chùID
) || (0 > chipID))

1071 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

1072 if(
sockfd
 < 0)

1074 
	`≥º‹
("socket");

1078 
	`gëBrﬂdˇ°IP
(&
£r_addr
);

1079 
£r_addr
.
sö_Ámûy
 = 
AF_INET
;

1080 
£r_addr
.
sö_p‹t
 = 
	`ht⁄s
(
BROADCAST_PORT
);

1082 
›t
=1;

1083 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_BROADCAST
, &
›t
, (opt));

1085 
	`¥ötf
("Cª© Suc˚ss! brﬂdCa°IP i†%†\n",
	`öë_¡ﬂ
(
£r_addr
.
sö_addr
));

1087 
£ndmsg
 = 
chùID
;

1088 
i
 = 0;

1089 
n
 = 
	`£ndto
(
sockfd
, &
£ndmsg
, (£ndmsg), 0, (
sockaddr
*)&
£r_addr
, (
sockaddr_ö
));

1090 if–
n
 < 0)

1092 
i
 = 0; i < 5; i++)

1094 
	`£ndto
(
sockfd
, &
£ndmsg
, (£ndmsg), 0, (
sockaddr
*)&
£r_addr
, (
sockaddr_ö
));

1097 
	`˛o£
(
sockfd
);

1101 
	`¥ötf
("\nSídÅÿchù:%d ReboŸ OK!!!\n", 
chùID
);

1103 
	`˛o£
(
sockfd
);

1106 
	}
}

	@midware/src/gos_sys/gos_sys.c

1 
	~"hi_comm⁄.h
"

2 
	~"hi_unf_gpio.h
"

3 
	~"gos_sys.h
"

5 #ifde‡
__˝lu•lus


9 
	#HI_TYPE_ETH
 "ëh1"

	)

10 
	#HI_DEFAULTE_IP
 "192.168.100.50"

	)

12 
GOS_U32
 
gu32GpioChùVÆue
 = 0;

13 
gp_AddrHo°
[32] = 
HI_DEFAULTE_IP
;

15 
	#SWAP32
(
x
Ë((((x)&0xFF)<<24)|(((x)>>24)&0xFF)|(((x)&0x0000FF00)<<8)|(((x)&0x00FF0000)>>8))

	)

17 
ù2°rögex
(
GOS_U32
 
u32IP
, *
pcDŸIp
)

19 
u32IP
 = 
¡ohl
 (u32IP);

20 
¢¥ötf
 (
pcDŸIp
, 20, "%d.%d.%d.%d",

21 (Ë((
u32IP
 >> 24) & 0xff),

22 (Ë((
u32IP
 >> 16) & 0xff),

23 (Ë((
u32IP
 >> 8) & 0xff), () ((u32IP >> 0) & 0xff));

27 
°πok_ù_°r2ul
(*
pAddr
,*
pAddrNum
)

29 
°rög
[32] = {0};

30 *
tok£ps
 = ".";

31 *
±
;

32 
i
 = 0;

33 if((
NULL
 =
pAddr
Ë|| (NULL =
pAddrNum
))

38 
°r˝y
(
°rög
, 
pAddr
);

39 
±
 = 
°πok
(
°rög
,
tok£ps
);

40 
±
)

42 
pAddrNum
[
i
] = 
©oi
(
±
);

43 
±
 = 
°πok
(
NULL
,
tok£ps
);

44 
i
++;

50 
gë_desù_by§cù
(*
desIP
, *
§cIP
, 
chùID
)

52 
uN©iveIP
;

53 
pName
[32] = {0};

55 if((
NULL
 =
desIP
Ë|| (NULL =
§cIP
) )

60 
uN©iveIP
 = 
¡ohl
(
öë_addr
(
§cIP
));

61 
uN©iveIP
 +
chùID
;

62 
uN©iveIP
 = 
SWAP32
(uNativeIP);

64 
ù2°rögex
(
uN©iveIP
, 
pName
);

66 
°r˝y
(
desIP
, 
pName
);

71 
sy°em_√tw‹k_≥Ωór
()

73 
chùID
 = 0;

74 
cmd
[256] = {0};

75 
MAC
[18] = {0};

76 
pLoˇlIP
[32] = {0};

78 
chùID
 = 
gu32GpioChùVÆue
;

80 
pAddrNum
[4] = {0};

81 i‡(
GOS_SUCCESS
 !
°πok_ù_°r2ul
(
gp_AddrHo°
,
pAddrNum
))

83 
¥ötf
( "strtok_ip_str2ulÉrror!\n");

87 
•rötf
(
MAC
, "00:1C:1D:00:%2x", 
pAddrNum
[3]);

89 
MAC
[14] = ':';

90 
MAC
[15] = '0' + (
chùID
 * 2)/10;

91 
MAC
[16] = '0' + (
chùID
 * 2)%10;

92 
MAC
[17] = '\0';

95 
•rötf
(
cmd
,"ifconfigÉth1 down");

96 
sy°em
(
cmd
);

97 
•rötf
(
cmd
,"ifc⁄figÉth1 hwÉthî %s",
MAC
);

98 
sy°em
(
cmd
);

100 if(
GOS_SUCCESS
 !
gë_desù_by§cù
(
pLoˇlIP
, 
gp_AddrHo°
, 
chùID
))

102 
¥ötf
("PORT_SOCKET_GetIP_ByChipID Error\n");

106 
•rötf
(
cmd
,"ifc⁄fig %†up", 
HI_TYPE_ETH
);

107 
sy°em
(
cmd
);

108 
•rötf
(
cmd
,"ifc⁄fig %†%s", 
HI_TYPE_ETH
, 
pLoˇlIP
);

109 
sy°em
(
cmd
);

111 
¥ötf
("\n\nIP:\n%s\n\n", 
pLoˇlIP
);

116 
	#GPIO_MAX_NUM
 4

	)

117 
	#HI_IO_BASE_ADDR
 (0xf8a21000)

	)

118 
sy°em_gpio_gëvÆue
()

120 
i
 = 0;

121 
Rë
 = 
GOS_FAILURE
;

122 
GOS_U32
 
Reg_Addr
[
GPIO_MAX_NUM
] = {(
HI_IO_BASE_ADDR
 + 0x074), (HI_IO_BASE_ADDR + 0x094), (HI_IO_BASE_ADDR + 0x080), (HI_IO_BASE_ADDR + 0x08C)};

123 
GOS_U32
 
Reg_Mask
[
GPIO_MAX_NUM
] = { 0xfffffff8, 0xfffffff8, 0xfffffff8, 0xfffffff8};

124 
GOS_U32
 
Reg_VÆue
[
GPIO_MAX_NUM
] = { 0, 0, 0, 0,};

125 
GOS_U32
 
Gpio_P‹t
[
GPIO_MAX_NUM
] = { 3*8+5, 4*8+5, 4*8+0, 4*8+3};

126 
GOS_U32
 
u32VÆue_ªad
 = 0;

127 
GOS_U32
 
u32VÆue_wrôe
 = 0;

131 
i
 = 0; i < 
GPIO_MAX_NUM
; i++)

133 
HI_SYS_RódRegi°î
(
Reg_Addr
[
i
], &
u32VÆue_ªad
);

134 
u32VÆue_wrôe
 = (
u32VÆue_ªad
 & 
Reg_Mask
[
i
]Ë| 
Reg_VÆue
[i];

135 
HI_SYS_WrôeRegi°î
(
Reg_Addr
[
i
], 
u32VÆue_wrôe
);

136 
Rë
 = 
HI_UNF_GPIO_SëDúBô
(
Gpio_P‹t
[
i
], 
GOS_TRUE
);

137 if(
GOS_SUCCESS
 !
Rë
)

139 
¥ötf
("%s: %d Eº‹Code=0x%x\n", 
__FILE__
, 
__LINE__
, 
Rë
);

144 
GOS_U32
 
RódBôVÆ
[
GPIO_MAX_NUM
];

145 
i
 = 0; i < 
GPIO_MAX_NUM
; i++)

147 
Rë
 = 
HI_UNF_GPIO_RódBô
(
Gpio_P‹t
[
i
], (
HI_BOOL
 *)&
RódBôVÆ
[i]);

148 if(
GOS_SUCCESS
 !
Rë
)

150 
¥ötf
("%s: %d Eº‹Code=0x%x\n", 
__FILE__
, 
__LINE__
, 
Rë
);

155 
gu32GpioChùVÆue
 = (
RódBôVÆ
[0] * 8 + ReadBitVal[1] * 4 + ReadBitVal[2] * 2 + ReadBitVal[3]);

157 
¥ötf
("###---gu32GpioChùVÆuê%#x\n",
gu32GpioChùVÆue
);

163 
GOS_U32
 
GOS_SYS_Gë_ChùID
()

165  
gu32GpioChùVÆue
;

168 
GOS_S32
 
GOS_SYS_Inô
()

170 i‡(
HI_SYS_Inô
(Ë!
GOS_SUCCESS
)

172 
LOG_ERROR
("HI_SYS_Init Error!\n");

173  
GOS_FAILURE
;

176 i‡(
HI_UNF_GPIO_Inô
(Ë!
GOS_SUCCESS
)

178 
LOG_ERROR
("HI_UNF_GPIO_Init Error\n");

179  
GOS_FAILURE
;

182 
sy°em_gpio_gëvÆue
();

183 
sy°em_√tw‹k_≥Ωór
();

185 
LOG_INFO
("PORT_SYS_Init success!!!!!!!\n");

187  
GOS_SUCCESS
;

190 
GOS_S32
 
GOS_SYS_DeInô
()

192 i‡(
HI_SYS_DeInô
(Ë!
GOS_SUCCESS
)

194 
LOG_ERROR
("HI_SYS_DeInit Error!\n");

195  
GOS_FAILURE
;

198  
GOS_SUCCESS
;

201 #ifde‡
__˝lu•lus


	@porting/include/crc/crc.h

1 #i‚de‡
__CRC_H__


2 
	#__CRC_H__


	)

4 #ifde‡
__˝lu•lus


5 #i‡
__˝lu•lus


10 
	~"u£r_deföe.h
"

12 
GOS_S32
 
GOS_CRC_Inô
();

13 
GOS_CRC_16bCÆcuœã
(
GOS_U8
 *
buf„r
, 
GOS_U32
 
size
, 
GOS_U16
 *
CRC16
);

14 
GOS_CRC_32bCÆcuœã
(
GOS_U8
 *
buf„r
, 
GOS_U32
 
size
, GOS_U32 *
CRC32
);

15 
GOS_U32
 
GOS_CRC_Crc32
 (GOS_U32 
¸c
, c⁄° 
GOS_U8
* 
buf
, GOS_U32 
Àn
);

17 #ifde‡
__˝lu•lus


18 #i‡
__˝lu•lus


	@porting/include/linuxos/linuxlist.h

1 #i‚de‡
__LIST_H__


2 
	#__LIST_H__


	)

4 #i‡
HI_OS_TYPE
 =
HI_OS_WIN32


5 
	#INLINE
 
__ölöe


	)

6 #ñi‡
HI_OS_TYPE
 =
HI_OS_LINUX


7 
	#INLINE
 
ölöe


	)

25 
	sli°_hód
 {

26 
li°_hód
 *
	m√xt
, *
	m¥ev
;

29 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

31 
	#LIST_HEAD
(
«me
) \

32 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

34 
	#INIT_LIST_HEAD
(
±r
) do { \

35 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

36 } 0Ë

	)

44 
INLINE
 
	$__li°_add
(
li°_hód
 * c⁄° 
p°ru√w
,

45 
li°_hód
 *
¥ev
,

46 
li°_hód
 *
√xt
)

48 
√xt
->
¥ev
 = 
p°ru√w
;

49 
p°ru√w
->
√xt
 =Çext;

50 
p°ru√w
->
¥ev
 =Örev;

51 
¥ev
->
√xt
 = 
p°ru√w
;

52 
	}
}

62 
INLINE
 
	$li°_add
(
li°_hód
 * c⁄° 
p°ru√w
, li°_hód *
hód
)

64 
	`__li°_add
(
p°ru√w
, 
hód
, hód->
√xt
);

65 
	}
}

75 
INLINE
 
	$li°_add_èû
(
li°_hód
 * c⁄° 
p°ru√w
, li°_hód *
hód
)

77 
	`__li°_add
(
p°ru√w
, 
hód
->
¥ev
, head);

78 
	}
}

87 
INLINE
 
	$__li°_dñ
(
li°_hód
 *
¥ev
, li°_hód *
√xt
)

89 
√xt
->
¥ev
 =Örev;

90 
¥ev
->
√xt
 =Çext;

91 
	}
}

98 
INLINE
 
	$li°_dñ
(
li°_hód
 *
íåy
)

100 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

101 
íåy
->
√xt
 = 
NULL
;

102 
íåy
->
¥ev
 = 
NULL
;

103 
	}
}

109 
INLINE
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

111 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

112 
	`INIT_LIST_HEAD
(
íåy
);

113 
	}
}

120 
INLINE
 
	$li°_move
(
li°_hód
 *
li°
, li°_hód *
hód
)

122 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

123 
	`li°_add
(
li°
, 
hód
);

124 
	}
}

131 
INLINE
 
	$li°_move_èû
(
li°_hód
 *
li°
,

132 
li°_hód
 *
hód
)

134 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

135 
	`li°_add_èû
(
li°
, 
hód
);

136 
	}
}

142 
INLINE
 
	$li°_em±y
(
li°_hód
 c⁄° * c⁄° 
hód
)

144  (
hód
->
√xt
 == head);

145 
	}
}

147 
INLINE
 
	$__li°_•li˚
(c⁄° 
li°_hód
 * c⁄° 
li°
,

148 
li°_hód
 * c⁄° 
hód
)

150 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

151 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

152 
li°_hód
 *
©
 = 
hód
->
√xt
;

154 
fú°
->
¥ev
 = 
hód
;

155 
hód
->
√xt
 = 
fú°
;

157 
œ°
->
√xt
 = 
©
;

158 
©
->
¥ev
 = 
œ°
;

159 
	}
}

166 
INLINE
 
	$li°_•li˚
(c⁄° 
li°_hód
 * c⁄° 
li°
,

167 
li°_hód
 * c⁄° 
hód
)

169 i‡(!
	`li°_em±y
(
li°
))

170 
	`__li°_•li˚
(
li°
, 
hód
);

171 
	}
}

180 
INLINE
 
	$li°_•li˚_öô
(
li°_hód
 *
li°
,

181 
li°_hód
 *
hód
)

183 i‡(!
	`li°_em±y
(
li°
)) {

184 
	`__li°_•li˚
(
li°
, 
hód
);

185 
	`INIT_LIST_HEAD
(
li°
);

187 
	}
}

199 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

200 ((
ty≥
 *)(()(
±r
)-(()(&(—y≥ *)1)->
membî
Ë- 1)))

	)

207 
	#li°_f‹_óch
(
pos
, 
hód
) \

208 
pos
 = (
hód
)->
√xt
; (’o†!(hód)Ë&& (po†!
NULL
)); \

209 
pos
 =Öos->
√xt
)

	)

215 
	#li°_f‹_óch_¥ev
(
pos
, 
hód
) \

216 
pos
 = (
hód
)->
¥ev
;Öos != (head); \

217 
pos
 =Öos->
¥ev
)

	)

225 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

226 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

227 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

235 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

236 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
); \

237 &
pos
->
membî
 !(
hód
); \

238 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

247 
	#li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

248 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

249 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

250 &
pos
->
membî
 !(
hód
); \

251 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

	@porting/include/linuxos/linuxos.h

1 #i‚de‡
__LINUXOS_H__


2 
	#__LINUXOS_H__


	)

4 #ifde‡
__˝lu•lus


9 
	~<±hªad.h
>

10 
	~<sched.h
>

11 
	~<˘y≥.h
>

12 
	~<m©h.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°ddef.h
>

16 
	~<°rög.h
>

17 
	~<°d¨g.h
>

18 
	~<f˙é.h
>

19 
	~<î∫o.h
>

20 
	~<sig«l.h
>

21 
	~<uni°d.h
>

22 
	~<as£π.h
>

23 
	~<dúít.h
>

24 
	~<£m≠h‹e.h
>

25 
	~<sys/vfs.h
>

26 
	~<sys/waô.h
>

27 
	~<sys/mm™.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/time.h
>

30 
	~<sys/mou¡.h
>

31 
	~<sys/ty≥s.h
>

32 
	~<sys/io˘l.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<sys/ªboŸ.h
>

35 
	~<sys/°©fs.h
>

36 
	~<sys/sockë.h
>

37 
	~<sys/sysöfo.h
>

39 
	~<sys/un.h
>

40 
	~<sys/ùc.h
>

41 
	~<sys/shm.h
>

42 
	~<sys/£m.h
>

44 
	~<√t/if.h
>

45 
	~<√t/rouã.h
>

46 
	~<¨∑/öë.h
>

47 
	~<√töë/ö.h
>

49 
	~<löux/fb.h
>

50 
	~<löux/mii.h
>

51 
	~<löux/sockios.h
>

52 
	~<löux/ëhtoﬁ.h
>

53 
	~<löux/π√éök.h
>

55 
	~"löuxli°.h
"

56 
	~"log.h
"

58 #ifde‡
__GNUC__


59 #i‚de‡
MAYBE_UNUSED


60 
	#MAYBE_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

63 #i‚de‡
MAYBE_UNUSED


64 
	#MAYBE_UNUSED


	)

68 #i‚de‡
CHECK_NOTEQU_RET


69 
	#CHECK_NOTEQU_RET
(
ªt
,
§ë
,
a
Ë\

	)

71 i‡(
ªt
 !
§ë
){\

72 
LOG_OUTPUTF
(
E_LOG_LEVELERROR
,"Löê%d CÆ»%†Áûed!,ªà=0x%x\n",
__LINE__
,
__FUNCTION__
,
ªt
);\

73 
a
;\

78 #i‚de‡
CHECK_EQU_RET


79 
	#CHECK_EQU_RET
(
ªt
,
§ë
,
a
Ë\

	)

81 i‡(
ªt
 =
§ë
){\

82 
LOG_OUTPUTF
(
E_LOG_LEVELERROR
,"Löê%d CÆ»%†Áûed!,ªà=0x%x\n",
__LINE__
,
__FUNCTION__
,
ªt
);\

83 
a
;\

88 #i‚de‡
HIAPI_RUN


89 
	#HIAPI_RUN
(
≠i
, 
ªt
Ë\

	)

91 
HI_S32
 
îrCode
; \

92 
îrCode
 = 
≠i
; \

93 i‡(
îrCode
 !
HI_SUCCESS
)\

95 
LOG_OUTPUTF
(
E_LOG_LEVELERROR
, "\033[0;31m" "[Fun˘i⁄: %†löe: %d] %†ÁûedÑë = 0x%x \n" "\033[0m", 
__FUNCTION__
, 
__LINE__
 , #≠i, 
îrCode
); \

97 
ªt
 = 
îrCode
;\

101 #i‚de‡
HIAPI_RUN_RETURN


102 
	#HIAPI_RUN_RETURN
(
≠i
Ë\

	)

104 
HI_S32
 
îrCode
; \

105 
îrCode
 = 
≠i
; \

106 i‡(
îrCode
 != 0)\

108 
LOG_OUTPUTF
(
E_LOG_LEVELERROR
, "\033[0;31m" "[Fun˘i⁄: %†löe: %d] %†ÁûedÑë = 0x%x \n" "\033[0m", 
__FUNCTION__
, 
__LINE__
 , #≠i, 
îrCode
); \

109  
HI_FAILURE
; \

114 
	#WrôeDw‹d
(
pBuf
, 
vÆ
Ë{ \

	)

115 *((
pBuf
Ë+ 0Ë(
GOS_U8
)(((
vÆ
) >> 24) & 0xff);\

116 *((
pBuf
Ë+ 1Ë(
GOS_U8
)(((
vÆ
) >> 16) & 0xff);\

117 *((
pBuf
Ë+ 2Ë(
GOS_U8
)(((
vÆ
) >> 8) & 0xff);\

118 *((
pBuf
Ë+ 3Ë(
GOS_U8
)((
vÆ
) & 0xff); \

121 
	#RódDw‹d
(
pBuf
, 
vÆ
Ë{ \

	)

122 
vÆ
 = ((
pBuf
[0] << 24) | \

123 (
pBuf
[1] << 16) | \

124 (
pBuf
[2] << 8)|ÖBuf[3]); \

127 
	#WrôeW‹d
(
pBuf
, 
vÆ
Ë{ \

	)

128 *((
pBuf
Ë+ 0Ë((
vÆ
) >> 8) & 0xff; \

129 *((
pBuf
Ë+ 1Ë(
vÆ
) & 0xff; \

132 
	#BIT_SET
(
v32
, 
id
Ë(v32 |(1 << id))

	)

133 
	#BIT_CHK
(
v32
, 
id
Ë((v32 >> idË& 0x1)

	)

135 
	#IS_VIDEO_STREAM
(
eSåómTy≥
Ë(”SåómTy≥Ë=
ePSISI_STREAM_VIDEO_AVS
 \

	)

136 ||(
eSåómTy≥
Ë=
ePSISI_STREAM_VIDEO_MPEG1
\

137 ||(
eSåómTy≥
Ë=
ePSISI_STREAM_VIDEO_MPEG2
\

138 ||(
eSåómTy≥
Ë=
ePSISI_STREAM_VIDEO_MPEG4
\

139 ||(
eSåómTy≥
Ë=
ePSISI_STREAM_VIDEO_H264
\

140 ||(
eSåómTy≥
Ë=
ePSISI_STREAM_VIDEO_WM9
)

142 
	#IS_AUDIO_STREAM
(
eSåómTy≥
Ë(”SåómTy≥Ë=
ePSISI_STREAM_AUDIO_MPEG1
\

	)

143 ||(
eSåómTy≥
Ë=
ePSISI_STREAM_AUDIO_MPEG2
 \

144 ||(
eSåómTy≥
Ë=
ePSISI_STREAM_AUDIO_AAC_ADTS
\

145 ||(
eSåómTy≥
Ë=
ePSISI_STREAM_AUDIO_AAC_LATM
\

146 ||(
eSåómTy≥
Ë=
ePSISI_STREAM_AUDIO_AAC_RAW
\

147 ||(
eSåómTy≥
Ë=
ePSISI_STREAM_AUDIO_AC3
 \

148 ||(
eSåómTy≥
Ë=
ePSISI_STREAM_AUDIO_AAC_ADTS
\

149 ||(
eSåómTy≥
Ë=
ePSISI_STREAM_AUDIO_AVS
 \

150 ||(
eSåómTy≥
Ë=
ePSISI_STREAM_AUDIO_DTS
)

156 
	#Tî_Fªq_Max_Off£t
 500

	)

157 
	#mTîFªqInR™ge
(
x
,
y
Ë(((x =yË|| ((x >y - 
Tî_Fªq_Max_Off£t
Ë&& (x <y + Tî_Fªq_Max_Off£t))Ë? 1 : 0)

	)

159 
	#SETIPADDRESS
(
addr1
,
addr2
,
addr3
,
addr4
,
ù
Ëdo{ù = 
	`ht⁄l
(◊ddr1 << 24Ë| (addr2 << 16Ë| (addr3 << 8Ë|áddr4);}0)

	)

165 
	#OS_AŒocMem‹y
(
size
Ë
	`ˇŒoc
(1, size)

166 
	#OS_FªeMem‹y
(
±r
Ëdo{i‡’å){
	`‰ì
’å);Öå = 
NULL
;}}0)

	)

168 
	#OS_time_möus
(
t1
, 
t2
Ë
	`abs
—1-t2)

	)

169 
	#OS_time_∂us
(
t1
, 
t2
Ët1+
	)
t2

170 
	#OS_time_a·î
(
t1
, 
t2
Ë(—1 >Å2Ë? 1 : 0)

	)

171 
	#OS_C⁄vîtM°oTick
(
t1
Ët1/1

	)

172 
	#OS_C⁄vîtTicktoMs
 (
t1
Ë
	)
t1

174 
	#Comp_Mö
(
x
, 
y
Ë((()x < ()yË? (xË: (y))

	)

175 
	#Comp_Max
(
x
, 
y
Ë((()x > ()yË? (xË: (y))

	)

177 
	#GET_HGH_BYTE
(
a
Ë((◊Ë& 0xFF00Ë>> 8)

	)

178 
	#GET_LOW_BYTE
(
a
Ë(◊Ë& 0x00FF)

	)

180 
	#ALIGN_4
(
_x_
Ë(((_x_Ë+ 3Ë& ~3)

	)

181 
	#ALIGN_8
(
_x_
Ë(((_x_Ë+ 7Ë& ~7)

	)

182 
	#ALIGN_16
(
_x_
Ë(((_x_Ë+ 15Ë& ~15)

	)

183 
	#ALIGN_32
(
_x_
Ë(((_x_Ë+ 31Ë& ~31)

	)

185 #i‚de‡
ASSERT


186 
	#ASSERT
(
x
Ë
	`as£π
(x)

	)

189 
	#SCREEN_WIDTH
 1280

	)

190 
	#SCREEN_HIGHT
 720

	)

193 
£m_t
 
	tOS_Sem≠h‹e_t
;

194 
GOS_U32
 
	tOS_MesßgeQueue_t
;

195 
±hªad_muãx_t
 
	tOS_Muãx_t
;

196 
±hªad_t
 
	tOS_Task_H™dÀ_t
;

197 
GOS_U32
 
	tOS_TaskDesc_t
;

198 
GOS_U32
 
	tOS_TaskFœg_t
;

203 
OS_Sem≠h‹e_t
 *
OS_Cª©eSem≠h‹e
 (c⁄° 
InôülVÆue
);

204 
GOS_BOOL
 
OS_DñëeSem≠h‹e
 (
OS_Sem≠h‹e_t
 *
Sem≠h‹e_p
);

205 
GOS_BOOL
 
OS_Sig«lSem≠h‹e
 (
OS_Sem≠h‹e_t
 *
Sem≠h‹e_p
);

206 
GOS_BOOL
 
OS_WaôSem≠h‹e
 (
OS_Sem≠h‹e_t
 *
Sem≠h‹e_p
);

207 
GOS_BOOL
 
OS_WaôSem≠h‹eTimeOut
 (
OS_Sem≠h‹e_t
 *
Sem≠h‹e_p
, 
GOS_U32
 
TimeOutMs
);

208 
GOS_BOOL
 
OS_GëSem≠h‹eVÆue
 (
OS_Sem≠h‹e_t
 *
Sem≠h‹e_p
, *
svÆ
);

212 
OS_MesßgeQueue_t
 *
OS_Cª©eMesßgeQueue
 (c⁄° *
Q«me
, 
EÀmítSize
, 
NoEÀmíts
);

213 
GOS_S32
 
OS_DñëeMesßgeQueue
 (
OS_MesßgeQueue_t
 *
MsgQueue_p
);

214 
GOS_S32
 
OS_SídMesßge
 (
OS_MesßgeQueue_t
 *
MsgQueue_p
, *
Msg_p
, 
GOS_U32
 
Msg_Size
, 
Pri‹ôy
);

215 
GOS_VOID
*
OS_Re˚iveMesßge
 (
OS_MesßgeQueue_t
 *
MsgQueue_p
);

216 
GOS_VOID
*
OS_Re˚iveMesßgeTimeOut
 (
OS_MesßgeQueue_t
 *
MsgQueue_p
, 
GOS_U32
 
TimeOutMs
);

217 
GOS_S32
 
OS_Rñó£MesßgeBuf„r
 (
OS_MesßgeQueue_t
 *
MsgQueue_p
, *
Msg_p
);

218 
GOS_S32
 
OS_FlushMesßgeBuf„r
 (
OS_MesßgeQueue_t
 *
MsgQueue_p
);

219 
GOS_S32
 
OS_FlushMesßge
 (
OS_MesßgeQueue_t
 *
MsgQueue_p
);

222 
OS_Muãx_t
 *
OS_Cª©eMuãxFifo
 ();

223 
GOS_BOOL
 
OS_DñëeMuãx
 (
OS_Muãx_t
 *
Muãx_p
);

224 
GOS_BOOL
 
OS_LockMuãx
 (
OS_Muãx_t
 *
Muãx_p
);

225 
GOS_BOOL
 
OS_U∆ockMuãx
 (
OS_Muãx_t
 *
Muãx_p
);

228 
GOS_BOOL
 
OS_Cª©eTask
 (*
Fun˘i⁄
, *
P¨am
, 
OS_Task_H™dÀ_t
 *
Task
);

229 
GOS_BOOL
 
OS_DñëeTask
 (
OS_Task_H™dÀ_t
 
Task
);

231 
GOS_U32
 
OS_TimeNow
 ();

232 
GOS_VOID
 
OS_DñayTaskMs
 (
mûli£c⁄
);

233 
GOS_VOID
 
OS_Prötf_Buf„r
 (*
buf„r
, 
Àngth
);

235 #ifde‡
__˝lu•lus


	@porting/include/linuxos/log.h

13 #i‚de‡
__OS_LOG_H__


14 
	#__OS_LOG_H__


	)

16 
	~"löuxos.h
"

17 
	~"u£r_deföe.h
"

19 #ifde‡
__˝lu•lus


20 #i‡
__˝lu•lus


25 
	#ERROR_HEAD
 "%s-%s-%d:"

	)

26 
	#ERROR_HEAD_MEMBER
 
__FILE__
,
__FUNCTION__
,
__LINE__


	)

28 
	#HI_VOID
 

	)

31 
eOS_MODULE_NULL
 = 0,

32 
eOS_MODULE_BUTT


36 
	ee_LOG_LEVEL_E


38 
E_LOG_LEVELDEBUG
 = 0,

39 
E_LOG_LEVELERROR
,

40 
E_LOG_LEVELWARING
,

41 
E_LOG_LEVELINFO
,

42 
E_LOG_LEVELBUTT


43 }
	tLOG_LEVEL_E
;

51 #i‚de‡ 
__THIS_LOG_MOD_ID


52 
	#__THIS_LOG_MOD_ID
 
eOS_MODULE_NULL


	)

56 
	#LOG_OUTPUTF
(
íEºLevñ
, 
pszF‹m©
...Ë\

	)

57 (
HI_VOID
)
LOG_Ouçutf
(
__THIS_LOG_MOD_ID
, (
íEºLevñ
), (
GOS_FAILURE
),\

58 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
pszF‹m©
)

61 
	#LOG_ERROR_NO
(
EºNumbî
 , 
pszF‹m©
...Ë\

	)

62 (
HI_VOID
)
LOG_Ouçutf
(
__THIS_LOG_MOD_ID
, 
E_LOG_LEVELERROR
, (
EºNumbî
),\

63 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
pszF‹m©
)

66 
	#LOG_ERROR
–
pszF‹m©
...Ë\

	)

67 (
HI_VOID
)
LOG_Ouçutf
(
__THIS_LOG_MOD_ID
, 
E_LOG_LEVELERROR
, (
GOS_FAILURE
),\

68 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
pszF‹m©
)

71 
	#LOG_DEBUG
–
pszF‹m©
...Ë\

	)

72 (
HI_VOID
)
LOG_Ouçutf
(
__THIS_LOG_MOD_ID
, 
E_LOG_LEVELDEBUG
, (
GOS_FAILURE
),\

73 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
pszF‹m©
)

76 
	#LOG_INFO
–
pszF‹m©
...Ë\

	)

77 (
HI_VOID
)
LOG_Ouçutf
(
__THIS_LOG_MOD_ID
, 
E_LOG_LEVELINFO
, (
GOS_FAILURE
),\

78 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
pszF‹m©
)

81 
	#dump
()

82 

	)

85 
	#LOG_CHK_PARA
–
vÆ
 ) \

	)

88 i‡((
vÆ
)) \

90 
LOG_OUTPUTF
(
E_LOG_LEVELERROR
 ,""); \

91  
HI_EINVAL
; \

97 
	#LOG_CHK_RETURN_ERR
(
vÆ
, 
ªt
 ) \

	)

100 i‡((
vÆ
)) \

102 
LOG_ERROR_NO
(
ªt
 , ""); \

103  
ªt
; \

109 
	#LOG_CHK_PRINT_ERR
(
vÆ
, 
ªt
Ë\

	)

112 i‡((
vÆ
)) \

114 
LOG_ERROR_NO
(
ªt
 , ""); \

120 
	#LOG_DOFUNC
–
func
 ) \

	)

122 
GOS_S32
 
ªt
 = 0 ; \

123 
ªt
 = 
func
 ; \

124 i‡(
ªt
 !
SUCCESS
) \

126 
LOG_ERROR_NO
(
ªt
, "CALL %s", #func); \

132 
	#LOG_DOFUNC_RETURN
–
func
 ) \

	)

134 
GOS_S32
 
ªt
 = 0 ; \

135 
ªt
 = 
func
 ; \

136 i‡(
ªt
 !
SUCCESS
) \

138 
LOG_ERROR_NO
(
ªt
, "CALL %s", #func); \

139  
ªt
; \

145 
	#LOG_DOFUNC_RETURN_ERR
–
func
 ,
îr
Ë\

	)

147 
GOS_S32
 
ªt
 = 0 ; \

148 
ªt
 = 
func
 ; \

149 i‡(
ªt
 !
SUCCESS
) \

151 
LOG_ERROR_NO
(
ªt
, "CALL %s", #func); \

152  
îr
; \

158 
	#LOG_DOFUNC_RETURN_VOID
(
func
Ë\

	)

160 
GOS_S32
 
ªt
 = 
func
; \

161 i‡(
ªt
 !
SUCCESS
) \

163 
LOG_ERROR_NO
(
ªt
, "CALL %s", #func); \

169 
	#LOG_DOFUNC_GOTO
(
func
, 
îrh™dÀ
Ë\

	)

171 
GOS_S32
 
s32Rë
 = 
func
; \

172 i‡(
s32Rë
 !
SUCCESS
 ) \

174 
LOG_ERROR
("%†Áû:0x%x,Üöe:%d\n", #func, 
s32Rë
, 
__LINE__
); \

175 
îrh™dÀ
; \

189 
GOS_S32
 
LOG_Inô
();

199 
GOS_S32
 
LOG_DeInô
();

215 
GOS_S32
 
LOG_Ouçutf
(
GOS_U32
 
u32ModID
, 
LOG_LEVEL_E
 
íEºLevñ
, GOS_S32 
íoEºno
,

216 c⁄° *
pszProgømFûeName
, c⁄° *
pszProgømFun˘i⁄Name
, 
GOS_S32
 
s32ProgømLöeNo
,

217 c⁄° *
pszF‹m©
, ...);

230 
GOS_S32
 
LOG_SëAŒowOuçut
(
GOS_U32
 
u32ModID
, 
LOG_LEVEL_E
 
íEºLevñ
);

240 
GOS_S32
 
LOG_SèπOuçutToUSB
(*
UsbP©h
);

250 
GOS_S32
 
LOG_St›OuçutToUSB
();

252 #ifde‡
__˝lu•lus


253 #i‡
__˝lu•lus


	@porting/include/linuxos/message.h

1 #i‚de‡
__OS_MSGQUEUE_MSG_H__


2 
	#__OS_MSGQUEUE_MSG_H__


	)

4 
	~<±hªad.h
>

5 
	~"u£r_deföe.h
"

7 #ifde‡
__˝lu•lus


11 
	sègMESSAGE_S


13 
GOS_U16
 
u16MsgLígth
;

14 
GOS_U8
* 
pu8MsgD©a
;

16 
ègMESSAGE_S
 * 
p°Next
;

17 }
	t°MESSAGE_S
, *
	tp°MESSAGE_S
;

19 
	sèg°MSG_QUEUE_S


21 
GOS_U8
* 
pu8Ba£Addr
;

22 
GOS_U32
 
u32MaxLí
;

23 
OS_Sem≠h‹e_t
 *
£m_QueueAc˚ss
;

25 
p°MESSAGE_S
 
p°MsgRór
;

26 
p°MESSAGE_S
 
p°MsgFr⁄t
;

27 }
	t°MSG_QUEUE_S
, *
	tp°MSG_QUEUE_S
;

29 
GOS_S32
 
MsgQueue_Cª©e
(
°MSG_QUEUE_S
 **
p°MsgQueue
, 
EÀmítSize
, 
NoEÀmíts
);

30 
GOS_S32
 
MsgQueue_De°‹y
(
°MSG_QUEUE_S
 *
pMsgQueue
);

31 
GOS_S32
 
MsgQueue_En
(
°MSG_QUEUE_S
 *
p°MsgQueue
, 
°MESSAGE_S
 *
pMsg
);

32 
GOS_S32
 
MsgQueue_De
(
°MSG_QUEUE_S
 *
p°MsgQueue
, 
°MESSAGE_S
 *
pMsg
);

33 
GOS_S32
 
MsgQueue_DeTimeOut
(
°MSG_QUEUE_S
 *
p°MsgQueue
, 
°MESSAGE_S
 *
pMsg
, 
GOS_U32
 
TimeOutMs
);

34 
GOS_S32
 
MsgQueue_Flush
(
°MSG_QUEUE_S
 *
p°MsgQueue
);

38 #ifde‡
__˝lu•lus


	@porting/include/linuxos/user_define.h

7 #i‚de‡
__USER_DEFILE_H__


8 
	#__USER_DEFILE_H__


	)

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

14 
	~<sys/sockë.h
>

15 
	~<√töë/ö.h
>

16 
	~<¨∑/öë.h
>

17 
	~<î∫o.h
>

18 
	~<sys/ty≥s.h
>

20 
	tGOS_U8
;

21 
	tGOS_U16
;

22 
	tGOS_U32
;

23 
	tGOS_U64
;

25 sig√d 
	tGOS_S8
;

26 
	tGOS_S16
;

27 
	tGOS_S32
;

28 
	tGOS_S64
;

30 
	tGOS_CHAR
;

31 * 
	tGOS_PCHAR
;

33 
	tGOS_FLOAT
;

34 
	tGOS_DOUBLE
;

36 
	#GOS_VOID
 

	)

38 
GOS_U32
 
	tGOS_HANDLE
;

40 
	#GOS_RECT_S
 
HI_RECT


	)

46 
	mGOS_FALSE
 = 0,

47 
	mGOS_TRUE
 = 1,

48 } 
	tGOS_BOOL
;

50 
	#GOS_NULL
 0L

	)

52 
	#GOS_SUCCESS
 0

	)

53 
	#GOS_FAILURE
 (-1)

	)

55 
	#INVALID_HANDLE
 0xFFFFFFFF

	)

57 #i‚de‡
Pröt


58 
	#Pröt
(
fmt
, 
¨g
 ... ) do{
	`¥ötf
(fmà, ##¨g ); }0);

	)

61 #i‚de‡
DEBUG


62 
	#DEBUG
(
fmt
, 
¨g
 ... ) do{
	`¥ötf
("[%s, %s:Üöê%d]" fmà,
__FILE__
, 
__FUNCTION__
, 
__LINE__
, ##¨g ); }0);

	)

65 #i‚de‡
DEBUG_INFO


67 
	#DEBUG_INFO
(
fmt
, 
¨g
 ... ) do{
	`¥ötf
("\033[32m""[%s, %s:Üöê%d]" fmt"\033[0m" ,
__FILE__
, 
__FUNCTION__
, 
__LINE__
, ##¨g ); }0);

	)

70 #i‚de‡
DEBUG_ERROR


72 
	#DEBUG_ERROR
(
fmt
, 
¨g
 ... ) do{
	`¥ötf
("\033[31m""[%s, %s:Üöê%d]" fmt"\033[0m" , 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, ##¨g ); }0);

	)

77 
	mIPADDR_MULTICAST
 = 0,

78 
	mIPADDR_UNITCAST
,

79 
	mIPADDR_MAX


	@porting/include/threadpool/threadpool.h

1 #i‚de‡
__THREADPOOL_H__


2 
	#__THREADPOOL_H__


	)

4 #ifde‡
__˝lu•lus


8 
	~<time.h
>

9 
	~<°dio.h
>

10 
	~<sig«l.h
>

11 
	~<f˙é.h
>

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

14 
	~<°rög.h
>

15 
	~<î∫o.h
>

16 
	~<sys/sockë.h
>

17 
	~<√töë/ö.h
>

18 
	~<±hªad.h
>

19 
	~<¨∑/öë.h
>

20 
	~<sys/ïﬁl.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<as£π.h
>

24 (*
EPOLL_EV_CB
)(*
	t¨g
);

26 
thªadpoﬁ_≠i_¸óã
(
thªad_num
);

27 
thªadpoﬁ_≠i_de°‹y
();

28 
thªadpoﬁ_≠i_addèsk
(
EPOLL_EV_CB
 
ˇŒback
, *
¨g
);

31 #ifde‡
__˝lu•lus


	@porting/include/tsparse/GosTsr_AnalysisData.h

1 #ifde‡
__˝lu•lus


2 #i‡
__˝lu•lus


7 
	~"GosT§_Comm⁄.h
"

8 
	~"GosT§_Crc.h
"

10 #i‚de‡
__GOSTSR_ANALYSISDATA_H__


11 
	#__GOSTSR_ANALYSISDATA_H__


	)

14 
	#SYNC_BYTE
 0x47

	)

15 
	#TS_LENGTH_188
 188

	)

16 
	#TS_LENGTH_204
 204

	)

17 
	#TS_HEAD_LENGTH
 4

	)

18 
	#TS_MAX_SECTIONLEN
 (4*1024Ë

	)

19 
	#TS_MAX_SECTIONNUM
 (256Ë

	)

20 
	#TS_MAX_SERVICEIDNUM
 (500Ë

	)

23 
	#PAT_PID
 0x0000

	)

24 
	#PMT_PID_MIN
 0x0020

	)

25 
	#PMT_PID_MAX
 0x1FFE

	)

26 
	#CAT_PID
 0x0001

	)

27 
	#NIT_PID
 0x0010

	)

30 
	#BAT_SDT_PID
 0x0011

	)

31 
	#EIT_PID
 0x0012

	)

32 
	#RST_PID
 0x0013

	)

33 
	#TDT_TOT_PID
 0x0014

	)

34 
	#SI_PID_MIN
 0x0010

	)

35 
	#SI_PID_MAX
 0x0014

	)

38 
	#PAT_TABLE_ID
 0x00

	)

39 
	#PMT_TABLE_ID
 0x02

	)

40 
	#CAT_TABLE_ID
 0x01

	)

41 
	#NIT_TABLE_ID_ACTUAL
 0x40

	)

42 
	#NIT_TABLE_ID_OTHER
 0x41

	)

45 
	#BAT_TABLE_ID
 0x4A

	)

46 
	#SDT_TABLE_ID_ACTUAL
 0x42

	)

47 
	#SDT_TABLE_ID_OTEHR
 0x46

	)

48 
	#EIT_TABLE_ID_ACTUAL
 0x4E

	)

49 
	#EIT_TABLE_ID_ACTUAL_SHEDULE
 0x50

	)

50 
	#EIT_TABLE_ID_OTHER
 0x4F

	)

51 
	#EIT_TABLE_ID_OTHER_SHEDULE
 0x60

	)

52 
	#RST_TABLE_ID
 0x71

	)

53 
	#TDT_TABLE_ID
 0x70

	)

54 
	#TOT_TABLE_ID
 0x73

	)

55 
	#SI_TABLE_ID
 0x72

	)

56 
	#BULT_TABLE_ID
 0xFF

	)

59 
	#TABLE_NUMBER
 15

	)

62 
	#INVALID_VERSION_NUM
 0xff

	)

64 
	#GOS_MAX_SERVICE_NUM
 500

	)

65 
	#GOS_MAX_CAT_DESCRIPTOR
 256

	)

66 
	#GOS_MAX_NIT_DESCIP_LOOP
 (256)

	)

67 
	#GOS_MAX_NIT_ELEMENT
 (100Ë

	)

68 
	#GOS_MAX_NIT_ELEMENT_DESCRIPTOR
 (256Ë

	)

69 
	#GOS_MAX_PMT_ELEMENT_DESCRIPTOR
 (256Ë

	)

70 
	#GOS_MAX_PMT_DESCIP_LOOP1
 (256)

	)

71 
	#GOS_MAX_PMT_ELEMENT
 (20Ë

	)

72 
	#GOS_MAX_SDT_ELEMENT_DESCRIPTOR
 (256Ë

	)

73 
	#GOS_MAX_SDT_ELEMENT
 (100Ë

	)

74 
	#GOS_MAX_BAT_ELEMENT_DESCRIPTOR
 (256Ë

	)

75 
	#GOS_MAX_BAT_DESCIP_LOOP1
 (256)

	)

76 
	#GOS_MAX_BAT_ELEMENT
 (100Ë

	)

77 
	#GOS_MAX_EIT_ELEMENT_DESCRIPTOR
 (256Ë

	)

78 
	#GOS_MAX_EIT_ELEMENT
 (256Ë

	)

79 
	#GOS_MAX_TOT_DESCRIPTOR
 (256Ë

	)

80 
	#GOS_MAX_RTT_ELEMENT
 (100Ë

	)

81 
	#GOS_MAX_SIT_ELEMENT_DESCRIPTOR
 (256Ë

	)

82 
	#GOS_MAX_SIT_DESCIP_LOOP1
 (256)

	)

83 
	#GOS_MAX_SIT_ELEMENT
 (100Ë

	)

88 
GOS_PSISI_DESCRIPTOR_VIDEO_STREAM
 = 0x02,

89 
GOS_PSISI_DESCRIPTOR_AUDIO_STREAM
 = 0x03,

90 
GOS_PSISI_DESCRIPTOR_HIERARCHY
 = 0x04,

91 
GOS_PSISI_DESCRIPTOR_REGISTRATION
 = 0x05,

92 
GOS_PSISI_DESCRIPTOR_DATA_STREAM_ALIGNMENT
 = 0x06,

93 
GOS_PSISI_DESCRIPTOR_TARGET_BACKGROUND_GRID
 = 0x07,

94 
GOS_PSISI_DESCRIPTOR_VIDEO_WINDOW
 = 0x08,

95 
GOS_PSISI_DESCRIPTOR_CA
 = 0x09,

96 
GOS_PSISI_DESCRIPTOR_LANGUAGE_NAME
 = 0x0A,

97 
GOS_PSISI_DESCRIPTOR_SYSTEM_CLOCK
 = 0x0B,

98 
GOS_PSISI_DESCRIPTOR_MULTIPLEX_BUFFER
 = 0x0C,

99 
GOS_PSISI_DESCRIPTOR_COPYRIGHT
 = 0x0D,

100 
GOS_PSISI_DESCRIPTOR_MAX_BITRATE
 = 0x0E,

101 
GOS_PSISI_DESCRIPTOR_PRIVATE_DATA_INDICATOR
 = 0x0F,

102 
GOS_PSISI_DESCRIPTOR_SMOOTHING_BUFFER
 = 0x10,

103 
GOS_PSISI_DESCRIPTOR_STD
 = 0x11,

104 
GOS_PSISI_DESCRIPTOR_IBP
 = 0x12,

105 
GOS_PSISI_DESCRIPTOR_CAROUSEL_IDENTIFIER
 = 0x13,

106 
GOS_PSISI_DESCRIPTOR_ASSOCIATION_TAG
 = 0x14,

107 
GOS_PSISI_DESCRIPTOR_DEFERRED_ASSOCIATION_TAG
 = 0x15,

108 
GOS_PSISI_DESCRIPTOR_RESERVED_16
 = 0x16,

109 
GOS_PSISI_DESCRIPTOR_NPT_REFERENCE
 = 0x17,

110 
GOS_PSISI_DESCRIPTOR_NPT_ENDPOINT
 = 0x18,

111 
GOS_PSISI_DESCRIPTOR_STREAM_MODE
 = 0x19,

112 
GOS_PSISI_DESCRIPTOR_STREAM_EVENT
 = 0x1A,

113 
GOS_PSISI_DESCRIPTOR_MPEG4_VIDEO
 = 0x1B,

114 
GOS_PSISI_DESCRIPTOR_MPEG4_AUDIO
 = 0x1C,

115 
GOS_PSISI_DESCRIPTOR_MPEG4_IOD
 = 0x1D,

116 
GOS_PSISI_DESCRIPTOR_MPEG4_SL
 = 0x1E,

117 
GOS_PSISI_DESCRIPTOR_MPEG4_FMC
 = 0x1F,

118 
GOS_PSISI_DESCRIPTOR_MPEG4_MUX_CODE
 = 0x21,

119 
GOS_PSISI_DESCRIPTOR_MPEG4_FMX_BUFFER_SIZE
 = 0x22,

120 
GOS_PSISI_DESCRIPTOR_MPEG4_MULTIPLEX_BUFFER
 = 0x23,

121 
GOS_PSISI_DESCRIPTOR_MPEG4_CONTENT_LABELING
 = 0x24,

122 
GOS_PSISI_DESCRIPTOR_TVA_METADATA_POINTER
 = 0x25,

123 
GOS_PSISI_DESCRIPTOR_TVA_METADATA
 = 0x26,

124 
GOS_PSISI_DESCRIPTOR_TVA_METADATA_STD
 = 0x27,

125 
GOS_PSISI_DESCRIPTOR_AVC_VIDEO
 = 0x28,

126 
GOS_PSISI_DESCRIPTOR_AVC_IPMP
 = 0x29,

127 
GOS_PSISI_DESCRIPTOR_AVC_TIMING_AND_HRD
 = 0x2A,

128 
GOS_PSISI_DESCRIPTOR_NETWORK_NAME
 = 0x40,

129 
GOS_PSISI_DESCRIPTOR_SERVICE_LIST
 = 0x41,

130 
GOS_PSISI_DESCRIPTOR_STUFFING
 = 0x42,

131 
GOS_PSISI_DESCRIPTOR_SATELLITE_DELIVERY_SYSTEM
 = 0x43,

132 
GOS_PSISI_DESCRIPTOR_CABLE_DELIVERY_SYSTEM
 = 0x44,

133 
GOS_PSISI_DESCRIPTOR_VBI_DATA
 = 0x45,

134 
GOS_PSISI_DESCRIPTOR_VBI_TELETEXT
 = 0x46,

135 
GOS_PSISI_DESCRIPTOR_BOUQUET_NAME
 = 0x47,

136 
GOS_PSISI_DESCRIPTOR_SERVICE
 = 0x48,

137 
GOS_PSISI_DESCRIPTOR_COUNTRY_AVAIBILITY
 = 0x49,

138 
GOS_PSISI_DESCRIPTOR_LINKAGE
 = 0x4A,

139 
GOS_PSISI_DESCRIPTOR_NVOD_REFERENCE
 = 0x4B,

140 
GOS_PSISI_DESCRIPTOR_TIME_SHIFTEDSERVICE
 = 0x4C,

141 
GOS_PSISI_DESCRIPTOR_SHORT_EVENT
 = 0x4D,

142 
GOS_PSISI_DESCRIPTOR_EXTENDED_EVENT
 = 0x4E,

143 
GOS_PSISI_DESCRIPTOR_TIME_SHIFTED_EVENT
 = 0x4F,

144 
GOS_PSISI_DESCRIPTOR_COMPONENT
 = 0x50,

145 
GOS_PSISI_DESCRIPTOR_MOSAIC
 = 0x51,

146 
GOS_PSISI_DESCRIPTOR_STREAM_IDENTIFIER
 = 0x52,

147 
GOS_PSISI_DESCRIPTOR_CA_IDENTIFIER
 = 0x53,

148 
GOS_PSISI_DESCRIPTOR_CONTENT
 = 0x54,

149 
GOS_PSISI_DESCRIPTOR_PARENTAL_RATING
 = 0x55,

150 
GOS_PSISI_DESCRIPTOR_TELETEXT
 = 0x56,

151 
GOS_PSISI_DESCRIPTOR_TELEPHONE
 = 0x57,

152 
GOS_PSISI_DESCRIPTOR_LOCAL_TIME_OFFSET
 = 0x58,

153 
GOS_PSISI_DESCRIPTOR_SUBTITLING
 = 0x59,

154 
GOS_PSISI_DESCRIPTOR_TERRESTRIAL_DELIVERY_SYSTEM
 = 0x5A,

155 
GOS_PSISI_DESCRIPTOR_MULTILINGUAL_NETWORK_NAME
 = 0x5B,

156 
GOS_PSISI_DESCRIPTOR_MULTILINGUAL_BOUQUET_NAME
 = 0x5C,

157 
GOS_PSISI_DESCRIPTOR_MULTILINGUAL_SERVICE_NAME
 = 0x5D,

158 
GOS_PSISI_DESCRIPTOR_COMPONENT_SERVICE_NAME
 = 0x5E,

159 
GOS_PSISI_DESCRIPTOR_PRIVATE_DATA_SPECIFIER
 = 0x5F,

160 
GOS_PSISI_DESCRIPTOR_SERVICE_MOVE
 = 0x60,

161 
GOS_PSISI_DESCRIPTOR_SHORT_SMOOTHING_BUFFER
 = 0x61,

162 
GOS_PSISI_DESCRIPTOR_FREQUENCY_LIST
 = 0x62,

163 
GOS_PSISI_DESCRIPTOR_PARTIAL_TRANSPORT_STREAM
 = 0x63,

164 
GOS_PSISI_DESCRIPTOR_DATA_BROADCAST
 = 0x64,

165 
GOS_PSISI_DESCRIPTOR_CA_SYSTEM
 = 0x65,

166 
GOS_PSISI_DESCRIPTOR_DATA_BROADCAST_ID
 = 0x66,

167 
GOS_PSISI_DESCRIPTOR_TRANSPORT_STREAM
 = 0x67,

168 
GOS_PSISI_DESCRIPTOR_DSNG
 = 0x68,

169 
GOS_PSISI_DESCRIPTOR_PDC
 = 0x69,

170 
GOS_PSISI_DESCRIPTOR_AC3
 = 0x6A,

171 
GOS_PSISI_DESCRIPTOR_ANCILLARY_DATA
 = 0x6B,

172 
GOS_PSISI_DESCRIPTOR_CELL_LIST
 = 0x6C,

173 
GOS_PSISI_DESCRIPTOR_CELL_FREQUENCY_LINK
 = 0x6D,

174 
GOS_PSISI_DESCRIPTOR_ANNOUNCEMENT_SUPPORT
 = 0x6E,

175 
GOS_PSISI_DESCRIPTOR_APPLICATION_SIGNALLING
 = 0x6F,

176 
GOS_PSISI_DESCRIPTOR_ADAPTATION_FIELD_DATA
 = 0x70,

177 
GOS_PSISI_DESCRIPTOR_SERVICE_IDENTIFIER
 = 0x71,

178 
GOS_PSISI_DESCRIPTOR_SERVICE_AVAILABILITY
 = 0x72,

179 
GOS_PSISI_DESCRIPTOR_TVA_DEFAULT_AUTHORITY
 = 0x73,

180 
GOS_PSISI_DESCRIPTOR_TVA_RELATED_CONTENT
 = 0x74,

181 
GOS_PSISI_DESCRIPTOR_TVA_ID
 = 0x75,

182 
GOS_PSISI_DESCRIPTOR_TVA_CONTENT_IDENTIFIER
 = 0x76,

183 
GOS_PSISI_DESCRIPTOR_TIMESLICING_FEC_IDENTIFIER
 = 0x77,

184 
GOS_PSISI_DESCRIPTOR_ECM_REPETITION_RATE
 = 0x78,

185 
GOS_PSISI_DESCRIPTOR_S2_SATELLITE_DELIVERY_SYSTEM
= 0x79,

186 
GOS_PSISI_DESCRIPTOR_ENHANCED_AC3
 = 0x7A,

187 
GOS_PSISI_DESCRIPTOR_DTS
 = 0x7B,

188 
GOS_PSISI_DESCRIPTOR_AAC
 = 0x7C,

189 
GOS_PSISI_DESCRIPTOR_0X7D
 = 0x7D,

190 
GOS_PSISI_DESCRIPTOR_0X7E
 = 0x7E,

191 
GOS_PSISI_DESCRIPTOR_0X7F
 = 0x7F,

192 
GOS_PSISI_DESCRIPTOR_0X80
 = 0x80,

193 
GOS_PSISI_DESCRIPTOR_0X81
 = 0x81,

194 
GOS_PSISI_DESCRIPTOR_0X82
 = 0x82,

195 
GOS_PSISI_DESCRIPTOR_LCN_0X83
 = 0x83,

196 
GOS_PSISI_DESCRIPTOR_0X84
 = 0x84,

197 
GOS_PSISI_DESCRIPTOR_0X85
 = 0x85,

198 
GOS_PSISI_DESCRIPTOR_0X86
 = 0x86,

199 
GOS_PSISI_DESCRIPTOR_LCN_0X87
 = 0x87,

200 
GOS_PSISI_DESCRIPTOR_0X88
 = 0x88,

201 
GOS_PSISI_DESCRIPTOR_0X89
 = 0x89,

202 
GOS_PSISI_DESCRIPTOR_GOSCA_AREA_CONTROL
 = 0x8A,

204 
GOS_PSISI_DESCRIPTOR_SERVICE_3D
 = 0x90,

206 
GOS_PSISI_DESCRIPTOR_BUFF


207 } 
	tGOS_PSISI_DESCRIPTORTYPE_E
;

212 
GOS_PSISI_STREAM_RESERVED
 = 0x00,

213 
GOS_PSISI_STREAM_VIDEO_MPEG1
 = 0x01,

214 
GOS_PSISI_STREAM_VIDEO_MPEG2
 = 0x02,

215 
GOS_PSISI_STREAM_AUDIO_MPEG1
 = 0x03,

216 
GOS_PSISI_STREAM_AUDIO_MPEG2
 = 0x04,

217 
GOS_PSISI_STREAM_PRIVATE_SECTIONS
 = 0x05,

218 
GOS_PSISI_STREAM_PRIVATE_PES
 = 0x06,

219 
GOS_PSISI_STREAM_MHEG
 = 0x07,

220 
GOS_PSISI_STREAM_DSM_CC
 = 0x08,

221 
GOS_PSISI_STREAM_TYPE_H2221
 = 0x09,

222 
GOS_PSISI_STREAM_DSM_CC_TYPE_A
 = 0x0A,

223 
GOS_PSISI_STREAM_DSM_CC_TYPE_B
 = 0x0B,

224 
GOS_PSISI_STREAM_DSM_CC_TYPE_C
 = 0x0C,

225 
GOS_PSISI_STREAM_DSM_CC_TYPE_D
 = 0x0D,

226 
GOS_PSISI_STREAM_TYPE_AUX
 = 0x0E,

227 
GOS_PSISI_STREAM_AUDIO_AAC_ADTS
 = 0x0F,

228 
GOS_PSISI_STREAM_VIDEO_MPEG4
 = 0x10,

229 
GOS_PSISI_STREAM_AUDIO_AAC_LATM
 = 0x11,

230 
GOS_PSISI_STREAM_AUDIO_AAC_RAW
 = 0x12,

231 
GOS_PSISI_STREAM_MPEG4_SECTION
 = 0x13,

232 
GOS_PSISI_STREAM_DSM_CC_SDP
 = 0x14,

233 
GOS_PSISI_STREAM_METADATA_PES
 = 0x15,

234 
GOS_PSISI_STREAM_METADATA_SECTION
 = 0x16,

235 
GOS_PSISI_STREAM_METADATA_DC
 = 0x17,

236 
GOS_PSISI_STREAM_METADATA_OC
 = 0x18,

237 
GOS_PSISI_STREAM_METADATA_SDP
 = 0x19,

238 
GOS_PSISI_STREAM_IPMP_STREAM_MPEG2
= 0x1A,

239 
GOS_PSISI_STREAM_VIDEO_H264
 = 0x1B,

241 
GOS_PSISI_STREAM_VIDEO_AVS
 = 0x42,

242 
GOS_PSISI_STREAM_AUDIO_AVS
 = 0x43,

243 
GOS_PSISI_STREAM_VIDEO_WM9
 = 0xEA,

244 
GOS_PSISI_STREAM_AUDIO_WM9
 = 0xE6,

245 
GOS_PSISI_STREAM_IPMP_STREAM
 = 0x7F,

246 
GOS_PSISI_STREAM_VIDEO_USR
 = 0x80,

247 
GOS_PSISI_STREAM_AUDIO_AC3
 = 0x81,

248 
GOS_PSISI_STREAM_SCTE_SUBT
 = 0x82,

249 
GOS_PSISI_STREAM_AUDIO_DTS
 = 0x85,

251 
GOS_PSISI_STREAM_TELETEXT
 = 0xB0,

252 
GOS_PSISI_STREAM_SUBTITLE
 = 0xB1,

253 
GOS_PSISI_STREAM_CC
 = 0xB2,

254 
GOS_PSISI_STREAM_UNKNOWN
 = 0xB3,

256 
GOS_PSISI_STREAM_BUTT
 = 0x100

257 } 
	tGOS_PSISI_STREAMTYPE_E
;

261 
VIDEO_STREAM
 = 0x00,

262 
AUDIO_STREAM
 = 0x01,

263 
SCTE_SUBTITLE_STREAM
 = 0x02,

264 
PRIVATE_PES_STREAM
 = 0x03,

265 
BULT_STREAM


266 }
	tGOS_STREAMTYPE
;

271 
GOS_PSISI_TABLE_UNDEFINED
 = 0,

272 
GOS_PSISI_TABLE_NOT_RUNNING
 = 1,

273 
GOS_PSISI_TABLE_START_IN_FEW_SECONDS
 = 2,

274 
GOS_PSISI_TABLE_PAUSING
 = 3,

275 
GOS_PSISI_TABLE_RUNNING
 = 4,

276 
GOS_PSISI_TABLE_RESERVED_5
 = 5,

277 
GOS_PSISI_TABLE_RESERVED_6
 = 6,

278 
GOS_PSISI_TABLE_RESERVED_7
 = 7

279 } 
	tGOS_PSISI_TABLE_STATUS_E
;

284 
PACKAGE_188
 = 0x00,

285 
PACKAGE_204
 = 0x01,

286 
PACKAGE_BULT


287 }
	tGOS_TSPACKAGE_TYPE
;

293 
TR101290_ERROR_S
 
°Eº‹Info
;

294 
GOSTSR_U32
 
numbî
;

295 
GOSTSR_U16
 
ts_pid
;

296 
GOSTSR_U8
 
îr‹_ödiˇãr
;

297 
GOSTSR_U8
 
lﬂd_ödiˇãr
;

298 
GOSTSR_U8
 
s¸ambÀ_c⁄åﬁ
;

299 
GOSTSR_U8
 
ad≠ãr_c⁄åﬁ
;

300 
GOSTSR_U8
 
cou¡î
;

301 
GOS_TSPACKAGE_TYPE
 
∑ckageTy≥
;

302 }
	tTS_HEAD_INFO
;

307 
GOSTSR_U64
 
pgClockRfBa£
;

308 
GOSTSR_U16
 
pgClockRfExãn
;

309 }
	tTS_PCR_INFO
;

314 
GOSTSR_U8
 
¥iD©aLí
;

315 
GOSTSR_U8
 
¥iD©a
[256];

316 }
	tTS_PRIVATEDATA_INFO
;

321 
GOSTSR_U32
 
ad≠tExãnLí
;

322 
GOSTSR_U8
 
…wFœg
;

323 
GOSTSR_U8
 
põ˚wi£R©eFœg
;

324 
GOSTSR_U8
 
£amÀssS∂i˚Fœg
;

325 
GOSTSR_U8
 
…wVÆidFœg
;

326 
GOSTSR_U16
 
…wOff£t
;

327 
GOSTSR_U32
 
põ˚wi£R©e
;

328 
GOSTSR_U8
 
•li˚Ty≥
;

329 
GOSTSR_U64
 
DTSNextAU
;

330 }
	tTS_ADAPTEXTEN_INFO
;

335 
GOSTSR_U32
 
ad≠tLí
;

336 
GOSTSR_U8
 
disC⁄töuôyIndiˇt‹
;

337 
GOSTSR_U8
 
øndomAc˚ssIndiˇt‹
;

338 
GOSTSR_U8
 
esPri‹ôyIndiˇt‹
;

339 
GOSTSR_U8
 
p¸Fœg
;

340 
GOSTSR_U8
 
›¸Fœg
;

341 
GOSTSR_U8
 
•licögPoötFœg
;

342 
GOSTSR_U8
 
tsPriv©eFœg
;

343 
GOSTSR_U8
 
ad≠tFõldExãnFœg
;

344 
TS_PCR_INFO
 
p¸Info
;

345 
TS_PCR_INFO
 
›¸Info
;

346 
GOSTSR_U8
 
•li˚Cou¡Down
;

347 
TS_PRIVATEDATA_INFO
 
¥iv©eInfo
;

348 
TS_ADAPTEXTEN_INFO
 
exãnsi⁄Info
;

349 }
	tTS_ADAPT_INFO
;

354 
PROGRAM_STREAM_MAP
 = 0xbc,

355 
PRIVATE_STREAM_ONE
 = 0xbd,

356 
PADDING_STREAM
 = 0xbe,

357 
PRIVATE_STREAM_TWO
 = 0xbf,

358 
AUDIO_STREAM_NUM
 = 0xc0,

359 
VIDEO_STREAM_NUM
 = 0xe0,

360 
ECM_STREAM
 = 0xf0,

361 
EMM_STREAM
 = 0xf1,

362 
DSM_CC_STREAM
 = 0xf2,

363 
ISOIEC_13522_STREAM
 = 0xf3,

364 
RESERVED_STREAM
 = 0xf4,

365 
PROGRAM_STREAM_DIR
 = 0xff

366 }
	tTS_STREAM_ID
;

371 
GOSTSR_U8
 
PESPriv©eD©aFœg
;

372 
GOSTSR_U8
 
∑ckHódîFõldFœg
;

373 
GOSTSR_U8
 
¥ogømPackëSequí˚Cou¡îFœg
;

374 
GOSTSR_U8
 
PSTDBuf„rFœg
;

375 
GOSTSR_U8
 
PESExãnsi⁄Fœg2
;

376 
GOSTSR_U8
 
∑ckFõldLí
;

377 
GOSTSR_U8
 
¥ogømPackëSequí˚Cou¡î
;

378 
GOSTSR_U8
 
MPEG1MPEG2Idítifõr
;

379 
GOSTSR_U8
 
‹igöÆStuffLí
;

380 
GOSTSR_U8
 
PSTDBuf„rSˇÀ
;

381 
GOSTSR_U16
 
PSTDBuf„rSize
;

382 
GOSTSR_U8
 
PESExãnsi⁄FõldLí
;

383 }
	tTS_PESEXTENSION_INFO
;

388 
GOSTSR_U32
 
ps˝
;

389 
GOSTSR_U8
 
°ªamId
;

390 
GOSTSR_U16
 
≥sPackëLí
;

391 
GOSTSR_U8
 
≥sS¸ambÀCå
;

392 
GOSTSR_U8
 
≥sPri‹ty
;

393 
GOSTSR_U8
 
d©aAlignmítIndiˇt‹
;

394 
GOSTSR_U8
 
c›yright
;

395 
GOSTSR_U8
 
‹igöÆOrC›y
;

396 
GOSTSR_U8
 
PTSDTSFœg
;

397 
GOSTSR_U8
 
ESCRFœg
;

398 
GOSTSR_U8
 
EsR©eFœg
;

399 
GOSTSR_U8
 
DSMTrickModeFœg
;

400 
GOSTSR_U8
 
addôi⁄ÆC›yInfoFœg
;

401 
GOSTSR_U8
 
PESCRCFœg
;

402 
GOSTSR_U8
 
PESExãnsi⁄Fœg
;

403 
GOSTSR_U8
 
PESHódîD©aLí
;

404 
GOSTSR_U64
 
PTS
;

405 
GOSTSR_U64
 
DTS
;

406 
GOSTSR_U64
 
ESCRBa£
;

407 
GOSTSR_U16
 
ESCRExãn
;

408 
GOSTSR_U32
 
ESR©e
;

409 
GOSTSR_U8
 
åickModeCå
;

410 
GOSTSR_U8
 
fõldId
;

411 
GOSTSR_U8
 
öåaSli˚Re‰esh
;

412 
GOSTSR_U8
 
‰equícyTrunˇti⁄
;

413 
GOSTSR_U8
 
fõldRïC¡æ
;

414 
GOSTSR_U8
 
addôi⁄ÆC›yInfo
;

415 
GOSTSR_U16
 
¥eviousPESPackëCRC
;

416 
TS_PESEXTENSION_INFO
 
≥sExãnsi⁄Info
;

417 }
	tTS_PES_INFO
;

420 
	sSECTION_INFO


422 
TR101290_ERROR_S
 
°Eº‹Info
;

423 
GOSTSR_U16
 
£˘i⁄Lígth
;

424 
GOSTSR_U16
 
PID
;

425 
GOSTSR_U8
 
èbÀID
;

426 
GOSTSR_U8
 *
£˘i⁄D©a
;

428 
SECTION_INFO
 
	tTS_SECTION_INFO
;

431 
	sPACKAGE_INFO


433 
TR101290_ERROR_S
 
°Eº‹Info
;

434 
GOSTSR_U16
 
£˘i⁄Lí
;

435 
GOSTSR_U16
 
∑ckageLí
;

436 
GOSTSR_U16
 
PID
;

437 
GOSTSR_U8
 
∑ckageD©a
[256];

438 
GOSTSR_U8
 
numbî
;

439 
GOSTSR_U8
 
èbÀID
;

440 
PACKAGE_INFO
 *
√xt
;

442 
PACKAGE_INFO
 
	tTS_PACKAGE_INFO
;

447 
GOS_PSISI_DESCRIPTORTYPE_E
 
Tag
;

448 
GOSTSR_U16
 
u16Size
;

449 
GOSTSR_U8
 *
D©a
;

450 } 
	tGOS_PSISI_Des¸ùt‹_S
;

455 
GOSTSR_U16
 
u16ProgømNumbî
;

456 
GOSTSR_U16
 
u16Pid
;

457 } 
	tGOS_PSISI_PAT_EÀmít_S
;

461 
GOSTSR_U32
 
u32CrcVÆue
;

462 
GOSTSR_U16
 
u16NbEÀmíts
;

463 
GOS_PSISI_PAT_EÀmít_S
 
a°EÀmít
[
GOS_MAX_SERVICE_NUM
];

464 
GOSTSR_U16
 
u16Tøn•‹tSåómId
;

465 
GOSTSR_U8
 
u8TabÀId
;

466 
GOSTSR_U8
 
u8Vîsi⁄
;

467 
GOSTSR_U8
 
u8Se˘i⁄Num
;

468 
GOSTSR_U8
 
u8La°Se˘i⁄Num
;

470 } 
	tGOSTSR_PSISI_PAT_S
;

475 
GOSTSR_U32
 
u32CrcVÆue
;

476 
GOSTSR_U16
 
u16NbDes¸ùt‹s
;

477 
GOS_PSISI_Des¸ùt‹_S
 
a°Des¸ùt‹
[
GOS_MAX_CAT_DESCRIPTOR
];

478 
GOSTSR_U8
 
u8TabÀId
;

479 
GOSTSR_U8
 
u8Vîsi⁄
;

480 
GOSTSR_U8
 
u8Se˘i⁄Num
;

481 
GOSTSR_U8
 
u8La°Se˘i⁄Num
;

482 } 
	tGOSTSR_PSISI_CAT_S
;

487 
GOSTSR_U16
 
u16Tøn•‹tSåómId
;

488 
GOSTSR_U16
 
u16OrigöÆNëW‹kId
;

489 
GOSTSR_U16
 
u16NbDes¸ùt‹s
;

490 
GOS_PSISI_Des¸ùt‹_S
 
a°Des¸ùt‹
[
GOS_MAX_NIT_ELEMENT_DESCRIPTOR
];

491 } 
	tGOS_PSISI_NIT_EÀmít_S
;

495 
GOSTSR_U32
 
u32CrcVÆue
;

496 
GOSTSR_U16
 
u16NëW‹kId
;

497 
GOSTSR_U16
 
u16NbDes¸ùt‹s
;

498 
GOS_PSISI_Des¸ùt‹_S
 
a°Des¸ùt‹
[
GOS_MAX_NIT_DESCIP_LOOP
];

499 
GOSTSR_U16
 
u16NbEÀmíts
;

500 
GOS_PSISI_NIT_EÀmít_S
 
a°EÀmít
[
GOS_MAX_NIT_ELEMENT
];

501 
GOSTSR_U8
 
u8TabÀId
;

502 
GOSTSR_U8
 
u8Vîsi⁄
;

503 
GOSTSR_U8
 
u8Se˘i⁄Num
;

504 
GOSTSR_U8
 
u8La°Se˘i⁄Num
;

505 } 
	tGOSTSR_PSISI_NIT_S
;

510 
GOSTSR_U16
 
u16Pid
;

511 
GOSTSR_U16
 
u16NbDes¸ùt‹s
;

512 
GOS_PSISI_STREAMTYPE_E
 
eTy≥
;

513 
GOS_PSISI_Des¸ùt‹_S
 
a°Des¸ùt‹
[
GOS_MAX_PMT_ELEMENT_DESCRIPTOR
];

514 } 
	tGOS_PSISI_PMT_EÀmít_S
;

518 
GOSTSR_U32
 
u32CrcVÆue
;

519 
GOSTSR_U16
 
u16P¸Pid
;

520 
GOSTSR_U16
 
u16ProgømNumbî
;

521 
GOSTSR_U16
 
u16NbDes¸ùt‹s
;

522 
GOS_PSISI_Des¸ùt‹_S
 
a°Des¸ùt‹
[
GOS_MAX_PMT_DESCIP_LOOP1
];

523 
GOSTSR_U16
 
u16NbEÀmíts
;

524 
GOS_PSISI_PMT_EÀmít_S
 
a°EÀmít
[
GOS_MAX_PMT_ELEMENT
];

525 
GOSTSR_U16
 
bS¸ambÀd
;

526 
GOSTSR_U8
 
u8TabÀId
;

527 
GOSTSR_U8
 
u8Vîsi⁄
;

528 
GOSTSR_U8
 
u8Se˘i⁄Num
;

529 
GOSTSR_U8
 
u8La°Se˘i⁄Num
;

530 } 
	tGOSTSR_PSISI_PMT_S
;

535 
GOSTSR_U16
 
u16NbDes¸ùt‹s
;

536 
GOS_PSISI_Des¸ùt‹_S
 
a°Des¸ùt‹
[
GOS_MAX_SDT_ELEMENT_DESCRIPTOR
];

537 
GOSTSR_U16
 
u16Sîvi˚Id
;

538 
GOSTSR_U8
 
bEITScheduÀFœg
;

539 
GOSTSR_U8
 
bEITPª£¡FﬁlowögFœg
;

540 
GOS_PSISI_TABLE_STATUS_E
 
eSètus
;

541 
GOSTSR_U8
 
bS¸ambÀd
;

542 } 
	tGOS_PSISI_SDT_EÀmít_S
;

546 
GOSTSR_U32
 
u32CrcVÆue
;

547 
GOSTSR_U16
 
u16Tøn•‹tSåómId
;

548 
GOSTSR_U16
 
u16OrigöÆNëW‹kdId
;

549 
GOSTSR_U16
 
u16NbEÀmíts
;

550 
GOSTSR_U8
 
u8TabÀId
;

551 
GOSTSR_U8
 
u8Vîsi⁄
;

552 
GOSTSR_U8
 
u8Se˘i⁄Num
;

553 
GOSTSR_U8
 
u8La°Se˘i⁄Num
;

554 
GOS_PSISI_SDT_EÀmít_S
 
a°EÀmít
[
GOS_MAX_SDT_ELEMENT
];

555 } 
	tGOSTSR_PSISI_SDT_S
;

560 
GOSTSR_U16
 
u16Tøn•‹tSåómId
;

561 
GOSTSR_U16
 
u16OrigöÆNëw‹kId
;

562 
GOSTSR_U16
 
u16NbDes¸ùt‹s
;

563 
GOS_PSISI_Des¸ùt‹_S
 
a°Des¸ùt‹
[
GOS_MAX_BAT_ELEMENT_DESCRIPTOR
];

564 } 
	tGOS_PSISI_BAT_EÀmít_S
;

568 
GOSTSR_U32
 
u32CrcVÆue
;

569 
GOSTSR_U16
 
u16Bouquë_id
;

570 
GOSTSR_U16
 
u16NbDes¸ùt‹s
;

571 
GOS_PSISI_Des¸ùt‹_S
 
a°Des¸ùt‹
[
GOS_MAX_BAT_DESCIP_LOOP1
];

572 
GOSTSR_U16
 
u16NbEÀmíts
;

573 
GOS_PSISI_BAT_EÀmít_S
 
a°EÀmít
[
GOS_MAX_BAT_ELEMENT
];

574 
GOSTSR_U8
 
u8TabÀId
;

575 
GOSTSR_U8
 
u8Vîsi⁄
;

576 
GOSTSR_U8
 
u8Se˘i⁄Num
;

577 
GOSTSR_U8
 
u8La°Se˘i⁄Num
;

578 } 
	tGOSTSR_PSISI_BAT_S
;

583 
GOSTSR_U32
 
u32Mjd
;

584 
GOSTSR_U32
 
u32SèπTimeW‹d
[2];

585 
GOSTSR_U32
 
u32Duøti⁄TimeW‹d
;

586 
GOSTSR_U16
 
u16EvítId
;

587 
GOSTSR_U16
 
u16NbDes¸ùt‹s
;

588 
GOS_PSISI_Des¸ùt‹_S
 
a°Des¸ùt‹
[
GOS_MAX_EIT_ELEMENT_DESCRIPTOR
];

589 
GOS_PSISI_TABLE_STATUS_E
 
eSètus
;

590 
GOSTSR_U8
 
bS¸ambÀd
;

591 } 
	tGOS_PSISI_EIT_EÀmít_S
;

595 
GOSTSR_U32
 
u32CrcVÆue
;

596 
GOSTSR_U16
 
u16Sîvi˚Id
;

597 
GOSTSR_U16
 
u16Tøn•‹tSåómId
;

598 
GOSTSR_U16
 
u16OrigöÆNëW‹kdId
;

599 
GOSTSR_U16
 
u16NbEÀmíts
;

600 
GOSTSR_U8
 
u8TabÀId
;

601 
GOSTSR_U8
 
u8Vîsi⁄
;

602 
GOSTSR_U8
 
u8Se˘i⁄Num
;

603 
GOSTSR_U8
 
u8La°Se˘i⁄Num
;

604 
GOSTSR_U8
 
u8SegLa°Se˘i⁄Num
;

605 
GOSTSR_U8
 
u8La°TabeId
;

606 
GOS_PSISI_EIT_EÀmít_S
 
a°EÀmít
[
GOS_MAX_EIT_ELEMENT
];

607 } 
	tGOSTSR_PSISI_EIT_S
;

612 
GOSTSR_U8
 
u8Hour
;

613 
GOSTSR_U8
 
u8Möuã
;

614 
GOSTSR_U8
 
u8Sec⁄d
;

615 } 
	tUTCtime
;

619 
GOSTSR_U32
 
u32UTCtimeDW‹d
;

620 
GOSTSR_U16
 
u16MJDtime
;

621 
UTCtime
 
utcTime
;

622 } 
	tGOSTSR_PSISI_TDT_S
;

627 
GOSTSR_U32
 
u32CrcVÆue
;

628 
GOSTSR_U32
 
u32UTCtimeDW‹d
;

629 
GOSTSR_U16
 
u16MJDtime
;

630 
GOSTSR_U16
 
u16NbDes¸ùt‹s
;

631 
GOS_PSISI_Des¸ùt‹_S
 
°LoˇlTimeOffDesc
[
GOS_MAX_TOT_DESCRIPTOR
];

632 } 
	tGOSTSR_PSISI_TOT_S
;

637 
GOSTSR_U16
 
u16Tøn•‹tSåómId
;

638 
GOSTSR_U16
 
u16OrigöÆNëW‹kdId
;

639 
GOSTSR_U16
 
u16Sîvi˚Id
;

640 
GOSTSR_U16
 
u16EvítId
;

641 
GOSTSR_U8
 
u8RunSètus
;

642 }
	tGOS_PSISI_RST_EÀmít_S
;

646 
GOSTSR_U16
 
u16NbEÀmíts
;

647 
GOS_PSISI_RST_EÀmít_S
 
a°EÀmít
[
GOS_MAX_RTT_ELEMENT
];

648 }
	tGOSTSR_PSISI_RST_S
;

653 
GOSTSR_U16
 
u8TabÀId
;

654 }
	tGOSTSR_PSISI_ST_S
;

659 
GOSTSR_U16
 
u8TabÀId
;

660 
GOSTSR_U16
 
u8Tønsôi⁄Fœg
;

661 }
	tGOSTSR_PSISI_DIT_S
;

666 
GOSTSR_U16
 
u16Sîvi˚Id
;

667 
GOSTSR_U16
 
u8RunSètus
;

668 
GOSTSR_U16
 
u16NbDes¸ùt‹s
;

669 
GOS_PSISI_Des¸ùt‹_S
 
a°Des¸ùt‹
[
GOS_MAX_SIT_ELEMENT_DESCRIPTOR
];

670 } 
	tGOS_PSISI_SIT_EÀmít_S
;

674 
GOSTSR_U16
 
u16NbDes¸ùt‹s
;

675 
GOSTSR_U16
 
u16NbEÀmíts
;

676 
GOSTSR_U8
 
u8TabÀId
;

677 
GOSTSR_U8
 
u8Vîsi⁄Num
;

678 
GOSTSR_U8
 
u8Se˘i⁄Num
;

679 
GOSTSR_U8
 
u8La°Se˘i⁄Num
;

680 
GOS_PSISI_Des¸ùt‹_S
 
a°Des¸ùt‹
[
GOS_MAX_SIT_DESCIP_LOOP1
];

681 
GOS_PSISI_SIT_EÀmít_S
 
a°EÀmít
[
GOS_MAX_SIT_ELEMENT
];

682 }
	tGOSTSR_PSISI_SIT_S
;

687 
GOSTSR_U16
 
u16yór
;

688 
GOSTSR_U8
 
u8m⁄th
;

689 
GOSTSR_U8
 
u8day
;

690 }
	tGOSTSR_DATE_S
;

695 
GOSTSR_U8
 
u8hour
;

696 
GOSTSR_U8
 
u8möuã
;

697 
GOSTSR_U8
 
u8£c⁄d
;

698 }
	tGOSTSR_TIME_S
;

703 
GOSTSR_U32
 
u32OUI
;

704 
GOSTSR_U32
 
u32Fªquícy
;

705 
GOSTSR_U16
 
u16OADPid
;

706 
GOSTSR_U16
 
u16Symbﬁøã
;

707 
GOSTSR_U8
 
u8DscLí
;

708 
GOSTSR_U8
 
u8Sñe˘‹Lígth
;

709 
GOSTSR_U8
 
u8Sñe˘‹
[12];

710 
GOSTSR_U8
 
u8So·Vî
 ;

711 
GOSTSR_U8
 
u8Upd©eMode
 ;

712 
GOSTSR_U8
 
u8So·Mode
 ;

713 
GOSTSR_U8
 
u8B™dWidth
 ;

714 
GOSTSR_U8
 
u8Qam
;

715 
GOSTSR_U8
 
u8Pﬁ¨ôy
;

716 }
	tGOSTSR_PSISI_OTAINFO
;

721 
FRIST_ISO8859_5
 = 0x01,

722 
FRIST_ISO8859_6
 = 0x02,

723 
FRIST_ISO8859_7
 = 0x03,

724 
FRIST_ISO8859_8
 = 0x04,

725 
FRIST_ISO8859_9
 = 0x05,

726 
FRIST_ISO8859_10
 = 0x06,

727 
FRIST_ISO8859_11
 = 0x07,

728 
FRIST_ISO8859_13
 = 0x09,

729 
FRIST_ISO8859_14
 = 0x0A,

730 
FRIST_ISO8859_15
 = 0x0B,

731 
FRIST_ISO8859
 = 0x10,

732 
FRIST_ISO10646
 = 0x11,

733 
FRIST_KSX1001
 = 0x12,

734 
FRIST_GB2312
 = 0x13,

735 
FRIST_ISO10646_TC
 = 0x14,

736 
FRIST_ISO10646_UTF8
 = 0x15,

737 
FRIST_ENCODE_TYPEID
 = 0x1f,

738 
FRIST_BULT


739 }
	tEPGHEAD_FRISTBYTE
;

743 
SECOND_ISO8859
 = 0x00,

744 
SECOND_BULT


745 }
	tEPGHEAD_SECONDBYTE
;

749 
THIRD_ISO8859_1
 = 0x01,

750 
THIRD_ISO8859_2
 = 0x02,

751 
THIRD_ISO8859_3
 = 0x03,

752 
THIRD_ISO8859_4
 = 0x04,

753 
THIRD_ISO8859_5
 = 0x05,

754 
THIRD_ISO8859_6
 = 0x06,

755 
THIRD_ISO8859_7
 = 0x07,

756 
THIRD_ISO8859_8
 = 0x08,

757 
THIRD_ISO8859_9
 = 0x09,

758 
THIRD_ISO8859_10
 = 0x0A,

759 
THIRD_ISO8859_11
 = 0x0B,

760 
THIRD_ISO8859_13
 = 0x0D,

761 
THIRD_ISO8859_14
 = 0x0E,

762 
THIRD_ISO8859_15
 = 0x0F,

763 
THIRD_BULT


764 }
	tEPGHEAD_THIRDBYTE
;

768 
ENCODE_ASCII
 = 0x00,

769 
ENCODE_UNICODE
,

770 
ENCODE_ISO8859_1
,

771 
ENCODE_ISO8859_2
,

772 
ENCODE_ISO8859_3
,

773 
ENCODE_ISO8859_4
,

774 
ENCODE_ISO8859_5
,

775 
ENCODE_ISO8859_6
,

776 
ENCODE_ISO8859_7
,

777 
ENCODE_ISO8859_8
,

778 
ENCODE_ISO8859_9
,

779 
ENCODE_ISO8859_10
,

780 
ENCODE_ISO8859_11
,

781 
ENCODE_ISO8859_13
,

782 
ENCODE_ISO8859_14
,

783 
ENCODE_ISO8859_15
,

784 
ENCODE_ISO8859_16
,

785 
ENCODE_GB2312
,

786 
ENCODE_UTF8
,

787 
ENCODE_BULT


788 }
	tENCODE_TYPE
;

791 
	#ANALYSIS_CALLBACKFUNCTION_NUM
 0x10

	)

792 (*
A«lysisD©a_FUN
)(
	tTS_SECTION_INFO
 *
	ttsSe˘i⁄Info
);

793 
GOSTSR_S32
 
GosT§_A«lysisD©a_PackëTy≥
(
GOSTSR_U32
 *
pu32PackëLí
, *
fûeP©h
);

794 
GOSTSR_S32
 
GosT§_A«lysisD©a_TSHódInfo
(c⁄° *
§cD©a
, 
TS_HEAD_INFO
 *
desD©a
);

795 
GOSTSR_S32
 
GosT§_A«lysisD©a_Ad≠èti⁄Info
(
TS_HEAD_INFO
 *
desD©a
, c⁄° *
d©a
, 
TS_ADAPT_INFO
 *
ad≠tInfo
);

796 
GOSTSR_S32
 
GosT§_A«lysisD©a_PESInfo
(
TS_HEAD_INFO
 *
desD©a
,c⁄° *
d©a
, 
TS_PES_INFO
 *
≥sInfo
);

797 
GOSTSR_S32
 
GosT§_A«lysisD©a_CheckTsHódInfo
(
TS_HEAD_INFO
 
tsHódInfo
);

798 
GOSTSR_S32
 
GosT§_A«lysisD©a_PSI
(c⁄° *
d©a
, 
TS_HEAD_INFO
 
tsHódInfo
);

799 
GOSTSR_S32
 
GosT§_A«lysisD©a_SI
(c⁄° *
d©a
, 
TS_HEAD_INFO
 
tsHódInfo
);

800 
GOSTSR_S32
 
GosT§_A«lysisD©a_GëPMTID
(
GOSTSR_PSISI_PAT_S
 *
∑tInfo
);

801 
GOSTSR_S32
 
GosT§_A«lysisD©a_Re£tPMTID
();

802 
GOSTSR_S32
 
GosT§_A«lysisD©a_TsEnvInô
();

803 
GOSTSR_S32
 
GosT§_A«lysisD©a_TsEnvDeInô
();

804 
GOSTSR_S32
 
GosT§_A«lysisD©a_Regi°îCÆlBack
(
A«lysisD©a_FUN
 
fun˘i⁄
, 
GOSTSR_U8
 *
ödex
);

805 
GOSTSR_S32
 
GosT§_A«lysisD©a_UnRegi°îCÆlBack
(
GOSTSR_U8
 
ödex
);

806 
GOSTSR_S32
 
GosT§_A«lysisD©a_CÆlBack
(
TS_SECTION_INFO
 *
tsSe˘i⁄Info
);

809 
GOSTSR_S32
 
GosT§_A«lysisD©a_PAT
(
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_PAT_S
 * 
∑tInfo
);

810 
GOSTSR_S32
 
GosT§_A«lysisD©a_CAT
(
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_CAT_S
 * 
∑tInfo
);

811 
GOSTSR_S32
 
GosT§_A«lysisD©a_NIT
(
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_NIT_S
 * 
∑tInfo
);

812 
GOSTSR_S32
 
GosT§_A«lysisD©a_PMT
(
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_PMT_S
 * 
∑tInfo
);

813 
GOSTSR_S32
 
GosT§_A«lysisD©a_BAT
(
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_BAT_S
 * 
∑tInfo
);

814 
GOSTSR_S32
 
GosT§_A«lysisD©a_SDT
(
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_SDT_S
 * 
∑tInfo
);

815 
GOSTSR_S32
 
GosT§_A«lysisD©a_EIT
(
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_EIT_S
 * 
∑tInfo
);

816 
GOSTSR_S32
 
GosT§_A«lysisD©a_TDT
(
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_TDT_S
 * 
∑tInfo
);

817 
GOSTSR_S32
 
GosT§_A«lysisD©a_TOT
(
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_TOT_S
 * 
∑tInfo
);

818 
GOSTSR_S32
 
GosT§_A«lysisD©a_RST
(
TS_SECTION_INFO
 *
£˘i⁄Info
, 
GOSTSR_PSISI_RST_S
 * 
r°Info
);

819 
GOSTSR_S32
 
GosT§_A«lysisD©a_ST
 (
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_ST_S
 * 
°Info
);

820 
GOSTSR_S32
 
GosT§_A«lysisD©a_DIT
(
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_DIT_S
 * 
dôInfo
);

821 
GOSTSR_S32
 
GosT§_A«lysisD©a_SIT
(
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_SIT_S
 * 
sôInfo
);

824 
GOSTSR_DATE_S
 
GosT§_TIME_MJDtoYMD
(
GOSTSR_U16
 
mjd
);

825 
GOSTSR_TIME_S
 
GosT§_TIME_UTCtoHMS
(
GOSTSR_U32
 
utc
);

826 
GOS_STREAMTYPE
 
GosT§_A«lysisD©a_SåómTy≥
(
GOS_PSISI_STREAMTYPE_E
 
SåómD©a
);

827 
GOSTSR_S32
 
GosT§_A«lysisD©a_OTAPriv©e
(
GOSTSR_U8
 *
¥iv©eD©a
, 
GOSTSR_PSISI_OTAINFO
 *
ŸaInfo
);

830 
GOSTSR_S32
 
GosT§_UnicodeSåög_to_UTF8Såög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

831 
GOSTSR_S32
 
GosT§_ISO8859_1Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

832 
GOSTSR_S32
 
GosT§_ISO8859_2Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

833 
GOSTSR_S32
 
GosT§_ISO8859_3Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

834 
GOSTSR_S32
 
GosT§_ISO8859_4Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

835 
GOSTSR_S32
 
GosT§_ISO8859_5Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

836 
GOSTSR_S32
 
GosT§_ISO8859_6Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

837 
GOSTSR_S32
 
GosT§_ISO8859_7Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

838 
GOSTSR_S32
 
GosT§_ISO8859_8Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

839 
GOSTSR_S32
 
GosT§_ISO8859_9Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

840 
GOSTSR_S32
 
GosT§_ISO8859_10Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

841 
GOSTSR_S32
 
GosT§_ISO8859_11Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

842 
GOSTSR_S32
 
GosT§_ISO8859_13Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

843 
GOSTSR_S32
 
GosT§_ISO8859_14Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

844 
GOSTSR_S32
 
GosT§_ISO8859_15Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

845 
GOSTSR_S32
 
GosT§_ISO8859_16Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

846 
ENCODE_TYPE
 
GosT§_CheckL™guageHódCode
(
GOSTSR_U8
 
hódCode
, GOSTSR_U8 
£c⁄dCode
, GOSTSR_U8 
thridCode
);

847 
GOSTSR_S32
 
GosT§_Sour˚Såög_to_UTF8Såög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
);

851 #ifde‡
__˝lu•lus


852 #i‡
__˝lu•lus


	@porting/include/tsparse/GosTsr_Common.h

1 #ifde‡
__˝lu•lus


2 #i‡
__˝lu•lus


7 #i‚de‡
__GOSTSR_COMMON_H__


8 
	#__GOSTSR_COMMON_H__


	)

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<uni°d.h
>

16 
	#GOSTSR_U8
 

	)

17 
	#GOSTSR_U16
 

	)

18 
	#GOSTSR_U32
 

	)

19 
	#GOSTSR_U64
 

	)

22 
	#GOSTSR_S8
 sig√d 

	)

23 
	#GOSTSR_S16
 sig√d 

	)

24 
	#GOSTSR_S32
 sig√d 

	)

25 
	#GOSTSR_S64
 sig√d 

	)

27 
	#GOSTSR_D64
 

	)

28 
	#GOSTSR_F32
 

	)

32 
	#GOSTSR_SUCCESS
 0

	)

33 
	#GOSTSR_FAILURE
 -1

	)

36 
	#GOSTSR_NULL
 (0L)

	)

38 
	#GOSTSR_BOOL
 sig√d 

	)

40 
	#GOSTSR_FALSE
 0

	)

41 
	#GOSTSR_TRUE
 1

	)

44 
	#BIT0
 0x00

	)

45 
	#BIT1
 0x01

	)

46 
	#BIT2
 0x02

	)

47 
	#BIT3
 0x04

	)

48 
	#BIT4
 0x08

	)

49 
	#BIT5
 0x10

	)

50 
	#BIT6
 0x20

	)

51 
	#BIT7
 0x40

	)

52 
	#BIT8
 0x80

	)

55 
	#PRINT_DEBUG
(
°r
,
pos
Ë
	`¥ötf
("%-30s\tByãPo†%-20d\tPkà%d\n",°r,pos,pos/188);

	)

59 
GOSTSR_U32
 
	mbyãPos
;

60 
GOSTSR_U32
 
	m°¨tTime
;

61 
GOSTSR_U32
 
	mídTime
;

62 
GOSTSR_BOOL
 
	mbC¨ryFœg
;

63 }
	tTR101290_ERROR_S
;

67 
	mTYPE_ERROR_ONE
 = 0x01,

68 
	mTYPE_ERROR_TWO
 = 0x02,

69 
	mTYPE_ERROR_THREE
 = 0x04,

71 
	mTR101290_ERROR_MAX


72 }
	tTR101290_TYPE_ERROR_E
;

78 
	mTR101290_ONE_ERROR_SYNCLOSS
 = 0x000001,

79 
	mTR101290_ONE_ERROR_SYNCBYTE
 = 0x000002,

80 
	mTR101290_ONE_ERROR_PAT
 = 0x000004,

81 
	mTR101290_ONE_ERROR_PMT
 = 0x000008,

82 
	mTR101290_ONE_ERROR_CONTINUTYCOUNT
 = 0x000010,

83 
	mTR101290_ONE_ERROR_PID
 = 0x000020,

86 
	mTR101290_TWO_ERROR_TRANSPORT
 = 0x000040,

87 
	mTR101290_TWO_ERROR_CRC
 = 0x000080,

88 
	mTR101290_TWO_ERROR_PCRDISCONT
 = 0x000100,

89 
	mTR101290_TWO_ERROR_ACCURACY
 = 0x000200,

90 
	mTR101290_TWO_ERROR_PTS
 = 0x000400,

91 
	mTR101290_TWO_ERROR_CAT
 = 0x000800,

94 
	mTR101290_THREE_ERROR_NITACTUAL
 = 0x001000,

95 
	mTR101290_THREE_ERROR_NITOTHER
 = 0x002000,

96 
	mTR101290_THREE_ERROR_SIREPETITION
 = 0x004000,

97 
	mTR101290_THREE_ERROR_UNREFERENCEPID
 = 0x008000,

98 
	mTR101290_THREE_ERROR_SDTACTUAL
 = 0x010000,

99 
	mTR101290_THREE_ERROR_SDTOTHER
 = 0x020000,

100 
	mTR101290_THREE_ERROR_EITACTUAL
 = 0x040000,

101 
	mTR101290_THREE_ERROR_EITOTHER
 = 0x080000,

102 
	mTR101290_THREE_ERROR_EITPF
 = 0x100000,

103 
	mTR101290_THREE_ERROR_RST
 = 0x200000,

104 
	mTR101290_THREE_ERROR_TDT
 = 0x400000,

106 
	mTR101290_THREE_ERROR_MAX


107 }
	tTR101290_ERROR_LEVEL_E
;

111 #ifde‡
__˝lu•lus


112 #i‡
__˝lu•lus


	@porting/include/tsparse/GosTsr_Crc.h

1 #ifde‡
__˝lu•lus


2 #i‡
__˝lu•lus


7 #i‚de‡
GOSTSR_CRC_H


8 
	#GOSTSR_CRC_H


	)

10 
	~"GosT§_Comm⁄.h
"

12 
	#CRC32_MAX_COEFFICIENTS
 256

	)

13 
	#CRC32_POLYNOMIAL
 0x04C11DB7

	)

16 
GOSTSR_S32
 
GosT§_A«lysisD©a_CRCInô
();

17 
GOSTSR_U32
 
GosT§_A«lysisD©a_CRCCheck
(c⁄° 
GOSTSR_U8
 *
buf
, GOSTSR_U32 
Àn
);

21 #ifde‡
__˝lu•lus


22 #i‡
__˝lu•lus


	@porting/include/tsparse/GosTsr_Descriptor.h

1 #ifde‡
__˝lu•lus


2 #i‡
__˝lu•lus


7 
	~"GosT§_Comm⁄.h
"

8 
	~"GosT§_A«lysisD©a.h
"

10 #i‚de‡
__GOSTSR_DESCRIPTOR_H__


11 
	#__GOSTSR_DESCRIPTOR_H__


	)

13 
	#GOS_CODE_RATIO
 (2)

	)

14 
	#GOS_MAX_BOUQUET_NAME_LEN
 (32 * 
GOS_CODE_RATIO
)

	)

15 
	#GOS_MAX_CA_NUM
 (8)

	)

16 
	#GOS_MAX_CONTENT_NUM
 (10)

	)

17 
	#GOS_MAX_COUNTRY_NUM
 (16)

	)

18 
	#GOS_MAX_EXTENDEDEVENT_ITEMDES_LEN
 (128 * 
GOS_CODE_RATIO
)

	)

19 
	#GOS_MAX_EXTENDEDEVENT_ITEMCHAR_LEN
 (128 * 
GOS_CODE_RATIO
)

	)

20 
	#GOS_MAX_EXTENDEDEVENT_ITEM_NUM
 (20)

	)

21 
	#GOS_MAX_EXTENDEDEVENT_TXT_LEN
 (256 * 
GOS_CODE_RATIO
)

	)

22 
	#GOS_MAX_FREQUENCY_NUM
 (100)

	)

23 
	#GOS_MAX_LOCALTIME_ELENUM
 (32)

	)

24 
	#GOS_MAX_MOSAIC_ElE_CELL_NUM
 (6*6)

	)

25 
	#GOS_MAX_BOUQUET_NAME_NUM
 (64)

	)

26 
	#GOS_MAX_COMPONENT_NUM
 (32)

	)

27 
	#GOS_MAX_NETWORK_NAME_NUM
 (32)

	)

28 
	#GOS_MAX_SERVICE_NAME_NUM
 (32)

	)

29 
	#GOS_MAX_NVODSERVICE_NUM
 (100)

	)

30 
	#GOS_MAX_PARENTALRATING_NUM
 (32)

	)

31 
	#GOS_MAX_EVENTNAME_LEN
 (64 * 
GOS_CODE_RATIO
)

	)

32 
	#GOS_MAX_EVENTSHORTEXTDES_LEN
 (256 * 
GOS_CODE_RATIO
)

	)

33 
	#GOS_MAX_STUFFING_LEN
 (256 * 
GOS_CODE_RATIO
)

	)

34 
	#GOS_MAX_SUBTITLE_ELENUM
 (16)

	)

35 
	#GOS_MAX_TELETEXT_NUM
 (16)

	)

36 
	#GOS_MAX_LANGUAGECODE_NUM
 (64)

	)

37 
	#GOS_MAX_ADDCOPYRIGHTINFO_NUM
 (256)

	)

38 
	#GOS_MAX_AVCVIDEO_NUM
 (256)

	)

39 
	#GOS_MAX_RESERVED_NUM
 (256)

	)

40 
	#GOS_MAX_VBIDATA_DES_NUM
 (256)

	)

41 
	#GOS_MAX_VBIDATA_NUM
 (32)

	)

42 
	#GOS_MAX_DSNG_NUM
 (32)

	)

43 
	#GOS_MAX_TPSTREAM_NUM
 (32)

	)

44 
	#GOS_MAX_VBITELETEXT_NUM
 (32)

	)

45 
	#GOS_MAX_LINKAGEDATA_NUM
 (256)

	)

46 
	#GOS_MAX_LCNSREVICE_NUM
 (256)

	)

47 
	#GOS_MAX_CHANNELLIST_NUM
 (256)

	)

48 
	#GOS_MAX_SUBTITLE_NUM
 (16)

	)

50 
	#GOS_MAX_MOSAIC_LOGIC_CELL_NUM
 
GOS_MAX_MOSAIC_ElE_CELL_NUM


	)

55 
GOSTSR_U8
 
u8NameLí
;

56 
GOSTSR_U8
 
au8Nëw‹kName
[
GOS_MAX_BOUQUET_NAME_LEN
];

57 } 
	tGOS_DESC_NETWORKNAME_S
;

62 
GOSTSR_U16
 
U16Sîvi˚Id
;

63 
GOSTSR_U8
 
U8Sîvi˚Ty≥
;

64 }
	tGOS_DESC_SERVLISTSERV_S
;

68 
GOSTSR_U16
 
u16NbSîvi˚
;

69 
GOS_DESC_SERVLISTSERV_S
 
a°Sîvi˚Li°
[
GOS_MAX_SERVICE_NUM
];

70 } 
	tGOS_DESC_SERVLIST_S
;

75 
GOSTSR_U32
 
u32Fªq
;

76 
GOSTSR_U32
 
u32Symbﬁ_R©e
;

77 
GOSTSR_U8
 
u8Moduœti⁄
;

78 
GOSTSR_U8
 
u8FEC_Ouãr
;

79 
GOSTSR_U8
 
u8FEC_I¬î
;

80 }
	tGOS_DESC_CABDELIVSYS_S
;

85 
GOSTSR_U32
 
u32Fªq
;

86 
GOSTSR_U32
 
u32Symbﬁ_R©e
;

87 
GOSTSR_U16
 
u160rbôÆ_Posôi⁄
;

88 
GOSTSR_U8
 
u8Moduœti⁄
;

89 
GOSTSR_U8
 
u8We°_Ea°_Fœg
;

90 
GOSTSR_U8
 
u8FEC_I¬î
;

91 
GOSTSR_U8
 
u8Pﬁ¨iz©i⁄
;

92 }
	tGOS_DESC_SATDELIVSYS_S
;

97 
GOSTSR_U32
 
u32Cíåe_Fªq
;

98 
GOSTSR_U8
 
u8B™dWidth
;

99 
GOSTSR_U8
 
u8C⁄°ñœti⁄
;

100 
GOSTSR_U8
 
u8Hõørchy_Inf‹
;

101 
GOSTSR_U8
 
u8Code_øã_HP_°ªam
;

102 
GOSTSR_U8
 
u8Code_øã_LP_°ªam
;

103 
GOSTSR_U8
 
u8Gu¨d_I¡îvÆ
;

104 
GOSTSR_U8
 
u8Tøns_Mode
 ;

105 
GOSTSR_U8
 
u8Othî_Fªq_Fœg
;

106 }
	tGOS_DESC_TERDELIVSYS_S
;

111 
GOSTSR_U8
 
u8NameLí
;

112 
GOSTSR_U8
 
au8BouqName
[
GOS_MAX_BOUQUET_NAME_LEN
];

113 } 
	tGOS_DESC_BOUQUETNAME_S
;

118 
GOSTSR_U16
 
au16CA_Sys_ID
[
GOS_MAX_CA_NUM
];

119 
GOSTSR_U8
 
u8CANum
;

120 } 
	tGOS_DESC_CAIDF_S
;

125 
GOSTSR_U8
 
u8SåómC⁄ã¡
;

126 
GOSTSR_U8
 
u8Comp⁄ítTy≥
;

127 
GOSTSR_U8
 
u8Comp⁄ítTag
;

128 
GOSTSR_U8
 
au8ISO639_L™guage_Code
[3];

129 
GOSTSR_U8
 
acTextCh¨
[256];

130 } 
	tGOS_DESC_COMPONENT_S
;

136 } 
GOS_DESC_COMPONENT_SERVICE_NAME_S
;

141 
GOSTSR_U8
 
u8NibbÀLevñ1
;

142 
GOSTSR_U8
 
u8NibbÀLevñ2
;

143 
GOSTSR_U8
 
u8U£rNibbÀ1
;

144 
GOSTSR_U8
 
u8U£rNibbÀ2
;

145 }
	tGOS_DESC_CONTENTDETAIL_S
;

149 
GOSTSR_U16
 
u16NbC⁄ã¡
;

150 
GOS_DESC_CONTENTDETAIL_S
 
a°DëaûLi°
[
GOS_MAX_CONTENT_NUM
];

151 }
	tGOS_DESC_CONTENT_S
;

156 
GOSTSR_U32
 
u32Cou¡ryNum
;

157 
GOSTSR_U32
 
au32Cou¡ryCode
[
GOS_MAX_COUNTRY_NUM
];

158 
GOSTSR_U8
 
u8Cou¡ry_Avaûabûôy_Fœg
;

159 } 
	tGOS_DESC_COUNTRY_AVAILABILITY_S
;

164 
GOSTSR_U16
 
u16D©aBrﬂdˇ°Id
;

165 
GOSTSR_U8
 
u8Comp⁄ítTag
;

166 
GOSTSR_U8
 
u8Sñe˘‹Lígth
;

167 
GOSTSR_U8
 
au8Sñe˘‹Byã
[256];

168 
GOSTSR_U8
 
au8ISO639_L™guage_Code
[3];

169 
GOSTSR_U8
 
u8TextLígth
;

170 
GOSTSR_U8
 
au8TextCh¨
[256];

171 } 
	tGOS_DESC_DATA_BROADCAST_S
;

176 
GOSTSR_U16
 
u16D©aBrﬂdˇ°Id
;

177 
GOSTSR_U8
 
au8IdSñe˘‹Byã
[256];

178 } 
	tGOS_DESC_DATA_BROADCAST_ID_S
;

183 
GOSTSR_U32
 
u8IãmDescLí
;

184 
GOSTSR_U32
 
u8IãmCh¨Lí
;

185 
GOSTSR_U8
 
IãmDesc
[
GOS_MAX_EXTENDEDEVENT_ITEMDES_LEN
];

186 
GOSTSR_U8
 
IãmCh¨
[
GOS_MAX_EXTENDEDEVENT_ITEMCHAR_LEN
];

187 } 
	tGOS_DESC_EXTEVTELE_S
;

191 
GOSTSR_U32
 
u32Lag_Code
;

192 
GOSTSR_U32
 
u32Txt_Lígth
;

193 
GOSTSR_U8
 
u8Desc_Num
;

194 
GOSTSR_U8
 
u8La°_Desc_Num
;

195 
GOSTSR_U8
 
u8IãmNum
;

196 
GOS_DESC_EXTEVTELE_S
 
a°IãmEÀ
[
GOS_MAX_EXTENDEDEVENT_ITEM_NUM
];

197 
GOSTSR_U8
 
acTxt_Ch¨
[
GOS_MAX_EXTENDEDEVENT_TXT_LEN
];

198 } 
	tGOS_DESC_EXTEVT_S
;

203 
GOSTSR_U32
 
u32FªNum
;

204 
GOSTSR_U32
 
au32FªquícyVÆue
[
GOS_MAX_FREQUENCY_NUM
];

205 
GOSTSR_U8
 
u8Codög_Ty≥
;

206 } 
	tGOS_DESC_FREQLST_S
;

211 
GOSTSR_U16
 
u16Orid
;

212 
GOSTSR_U16
 
u16TsId
;

213 
GOSTSR_U16
 
u16Sîvi˚Id
;

214 
GOSTSR_U16
 
u16Nëw‹kID
;

215 
GOSTSR_U16
 
u16InôSîID
;

216 
GOSTSR_U16
 
u16T¨gëEvítID
;

217 
GOSTSR_U16
 
u16PrivD©aLí
;

218 
GOSTSR_U8
 
u8LökTy≥
;

219 
GOSTSR_U8
 
u8H™dOvîTy≥
;

220 
GOSTSR_U8
 
u8OrigöTy≥
;

221 
GOSTSR_U8
 
u8T¨gëLi°ed
;

222 
GOSTSR_U8
 
u8EvítSimulˇ°
;

223 
GOSTSR_U8
 
u8PrivD©a
[
GOS_MAX_LINKAGEDATA_NUM
];

224 }
	tGOS_DESC_LINKAGE_S
;

229 
GOSTSR_U32
 
u32Cou¡ry_Code
;

230 
GOSTSR_U32
 
u32Time_Of_Ch™ge_UTC
;

231 
GOSTSR_U16
 
u16Loˇl_Time_Off£t
;

232 
GOSTSR_U16
 
u16time_Of_Ch™ge_MJD
;

233 
GOSTSR_U16
 
u16Next_Time_Off£t
;

234 
GOSTSR_U8
 
u8Cou¡ry_Regi⁄_Id
;

235 
GOSTSR_U8
 
u8Loˇl_Time_Off£t_Pﬁ¨ôy
;

236 } 
	tGOS_DESC_LOCALTMOFFELE_S
;

240 
GOSTSR_U32
 
u32TimeOff£tEÀNum
;

241 
GOS_DESC_LOCALTMOFFELE_S
 
a°TimeOff£tInfo
[
GOS_MAX_LOCALTIME_ELENUM
];

242 } 
	tGOS_DESC_LOCALTMOFFSET_S
;

247 
GOSTSR_U16
 
u16BouquëId
 ;

248 
GOSTSR_U16
 
u16OrId
;

249 
GOSTSR_U16
 
u16TsId
;

250 
GOSTSR_U16
 
u16Sîvi˚Id
;

251 
GOSTSR_U16
 
u16EvítId
;

252 
GOSTSR_U8
 
u8LogiˇlCñlId
;

253 
GOSTSR_U8
 
u8LogiˇlCñlInfo
;

254 
GOSTSR_U8
 
u8EÀCñlNum
;

255 
GOSTSR_U8
 
a°EÀCñlId
[
GOS_MAX_MOSAIC_ElE_CELL_NUM
];

256 
GOSTSR_U8
 
u8CñlLökageInfo
;

257 } 
	tGOS_DESC_MOSAIC_LOGICCELL_S
;

261 
GOSTSR_U8
 
u8Moßic_íåy_poöt
;

262 
GOSTSR_U8
 
u8NumbîHEÀmíèryCñls
;

263 
GOSTSR_U8
 
u8NumbîVEÀmíèryCñls
;

264 
GOSTSR_U8
 
u8NumbîLogicCñls
;

265 
GOS_DESC_MOSAIC_LOGICCELL_S
 
a°LogicCñlInfo
[
GOS_MAX_MOSAIC_LOGIC_CELL_NUM
];

266 } 
	tGOS_DESC_MOSAIC_S
;

271 
GOSTSR_U8
 
au8ISO639_L™guage_Code
[3];

272 
GOSTSR_U8
 
u8NameLígth
;

273 
GOSTSR_U8
 
au8Ch¨
[256];

274 } 
	tGOS_DESC_NAME_S
;

278 
GOSTSR_U8
 
u8BouquëNameNum
;

279 
GOS_DESC_NAME_S
 
a°BouquëName
[
GOS_MAX_BOUQUET_NAME_NUM
];

280 } 
	tGOS_DESC_MULT_BOUQUET_NAME_S
;

285 
GOSTSR_U8
 
u8Comp⁄ítTag
;

286 
GOSTSR_U8
 
u8Comp⁄ítNum
;

287 
GOS_DESC_NAME_S
 
a°Comp⁄ít
[
GOS_MAX_COMPONENT_NUM
];

288 } 
	tGOS_DESC_MULT_COMPONENT_S
;

293 
GOSTSR_U8
 
u8Nëw‹kNameNum
;

294 
GOS_DESC_NAME_S
 
a°Nëw‹kName
[
GOS_MAX_NETWORK_NAME_NUM
];

295 } 
	tGOS_DESC_MULT_NETWORK_NAME_S
;

300 
GOSTSR_U8
 
u8Sîvi˚NameNum
;

301 
GOSTSR_U8
 
u8Sîvi˚ProvidîNameNum
;

302 
GOS_DESC_NAME_S
 
a°Sîvi˚Name
[
GOS_MAX_SERVICE_NAME_NUM
];

303 
GOS_DESC_NAME_S
 
a°Sîvi˚ProvidîName
[
GOS_MAX_SERVICE_NAME_NUM
];

304 } 
	tGOS_DESC_MULT_SERVICE_NAME_S
;

309 
GOSTSR_U16
 
u16TøsId
;

310 
GOSTSR_U16
 
u16OrId
;

311 
GOSTSR_U16
 
u16Sîvi˚Id
;

312 }
	tGOS_DESC_NVODSERV_S
;

316 
GOSTSR_U8
 
u8NbSîvi˚
;

317 
GOS_DESC_NVODSERV_S
 
a°Sîvi˚Li°
[
GOS_MAX_NVODSERVICE_NUM
];

318 } 
	tGOS_DESC_NVODREF_S
;

323 
GOSTSR_U32
 
u32Lag_Code
;

324 
GOSTSR_U8
 
u8R©ög
;

325 } 
	tGOS_DESC_RATING_S
;

329 
GOSTSR_U32
 
u32R©ögNum
;

330 
GOS_DESC_RATING_S
 
a°R©ög
[
GOS_MAX_PARENTALRATING_NUM
];

331 } 
	tGOS_DESC_PARENTRATING_S
;

336 
GOSTSR_U32
 
u32Priv©eD©a
;

337 } 
	tGOS_DESC_PRIVATE_DATA_SPECIFIER_S
;

342 
GOSTSR_U16
 
u16DVBRe£rvedLí
;

343 
GOSTSR_U8
 
u8SbSize
;

344 
GOSTSR_U8
 
u8SbLókR©e
;

345 
GOSTSR_U8
 
u8DVBRe£rved
[256];

346 } 
	tGOS_DESC_SHORT_SMOOTHING_BUFFER_S
;

351 
GOSTSR_U32
 
u32SbLókR©e
;

352 
GOSTSR_U32
 
u32SbSize
;

353 }
	tGOS_DESC_SMOOTHING_BUFFER_S
;

358 
GOSTSR_U8
 
u8Sîvi˚Ty≥
;

359 
GOSTSR_U8
 
u8Sîvi˚ProvidîNameLí
;

360 
GOSTSR_U8
 
u8Sîvi˚ProvideName
[256];

361 
GOSTSR_U8
 
u8Sîvi˚NameLí
;

362 
GOSTSR_U8
 
u8Sîvi˚Name
[256];

363 }
	tGOS_DESC_SERVICE_S
;

368 
GOSTSR_U16
 
u16NewONID
;

369 
GOSTSR_U16
 
u16NewTSID
;

370 
GOSTSR_U16
 
u16NewSîvi˚ID
;

371 } 
	tGOS_DESC_SERVICE_MOVE_S
;

376 
GOSTSR_U32
 
u32L™gCode
;

377 
GOSTSR_U16
 
u16EvtNameLí
;

378 
GOSTSR_U16
 
u16Sh‹tEvtDesLí
;

379 
GOSTSR_U8
 
acEvtName
[
GOS_MAX_EVENTNAME_LEN
];

380 
GOSTSR_U8
 
acSh‹tEvtDes
[
GOS_MAX_EVENTSHORTEXTDES_LEN
];

381 } 
	tGOS_DESC_SHORTEVT_S
;

386 
GOSTSR_U8
 
u8Comp⁄ít_èg
;

387 } 
	tGOS_DESC_STREAM_IDENTIFIER_S
;

392 
GOSTSR_U16
 
u16°uffögLí
;

393 
GOSTSR_U8
 
u8°uffögByã
[
GOS_MAX_STUFFING_LEN
];

394 } 
	tGOS_DESC_STUFFING_S
;

399 
GOSTSR_U32
 
u32Cou¡ry_Code
;

400 
GOSTSR_U16
 
u16Composôi⁄_Page_Id
;

401 
GOSTSR_U16
 
u16Ancûœry_Page_Id
;

402 
GOSTSR_U8
 
u8Sub°ôlög_Ty≥
;

403 } 
	tGOS_DESC_SUBTELE_S
;

407 
GOSTSR_U32
 
u32SubtôÀEÀNum
;

408 
GOS_DESC_SUBTELE_S
 
a°SubtôÀInfo
[
GOS_MAX_SUBTITLE_ELENUM
];

409 } 
	tGOS_DESC_SUBT_S
;

414 
GOSTSR_U8
 
u8F‹egöAvaûabûôy
;

415 
GOSTSR_U8
 
u8C⁄√˘Ty≥
;

416 
GOSTSR_U8
 
u8Cou¡ryPªfixLí
;

417 
GOSTSR_U8
 
u8Cou¡ryPªfix
[4];

418 
GOSTSR_U8
 
u8I¡î«ti⁄ÆAªaCodeLí
;

419 
GOSTSR_U8
 
u8I¡î«ti⁄aAªaCode
[8];

420 
GOSTSR_U8
 
u8O≥øt‹CodeLí
;

421 
GOSTSR_U8
 
u8O≥øt‹Code
[4];

422 
GOSTSR_U8
 
u8N©i⁄AªaCodeLí
;

423 
GOSTSR_U8
 
u8N©i⁄AªaCode
[8];

424 
GOSTSR_U8
 
u8C‹eNumbîCodeLí
;

425 
GOSTSR_U8
 
u8C‹eNumbîCode
[16];

426 } 
	tGOS_DESC_TELEPHONE_S
;

431 
GOSTSR_U32
 
u32Lag_Code
;

432 
GOSTSR_U8
 
u8Tñëext_Ty≥
;

433 
GOSTSR_U8
 
u8Tñëext_Magazöe_Numbî
;

434 
GOSTSR_U8
 
u8Tñëext_Page_Numbî
;

435 } 
	tGOS_DESC_TELETEXTELE_S
;

439 
GOSTSR_U32
 
u32TñëextNum
;

440 
GOS_DESC_TELETEXTELE_S
 
a°TñëextInfo
[
GOS_MAX_TELETEXT_NUM
];

441 } 
	tGOS_DESC_TELETEXT_S
;

446 
GOSTSR_U16
 
u16Ref_Sîvi˚_Id
;

447 
GOSTSR_U16
 
u16Ref_Evt_Id
;

448 } 
	tGOS_DESC_TMSHIFTEVT_S
;

453 
GOSTSR_U16
 
u16RefSîvi˚Id
;

454 } 
	tGOS_DESC_TIMESHIFTSERV_S
;

459 
GOSTSR_U8
 
u8Mu…ùÀFømeR©eFœg
;

460 
GOSTSR_U8
 
u8FømeR©eCode
;

461 
GOSTSR_U8
 
u8MPEG2Fœg
;

462 
GOSTSR_U8
 
u8C⁄°øöP¨amëîFœg
;

463 
GOSTSR_U8
 
u8StûlPi˘uªFœg
;

464 
GOSTSR_U8
 
u8ProfûeAndLevñIndiˇti⁄
;

465 
GOSTSR_U8
 
u8ChromaF‹m©
;

466 
GOSTSR_U8
 
u8FømeR©eExãnsi⁄Fœg
;

467 }
	tGOS_DESC_VIDEOSTREAM_S
;

472 
GOSTSR_U8
 
u8FªeF‹m©Fœg
;

473 
GOSTSR_U8
 
u8ID
;

474 
GOSTSR_U8
 
u8Layî
;

475 }
	tGOS_DESC_AUDIOSTRAM_S
;

480 
GOSTSR_U8
 
u8HõørchyTy≥
;

481 
GOSTSR_U8
 
u8HõørchyLayîIndex
;

482 
GOSTSR_U8
 
u8HõørchyEmbeddedLayî
;

483 
GOSTSR_U8
 
u8HõørchyPri‹ôy
;

484 }
	tGOS_DESC_HIERARCHY_S
;

489 
GOSTSR_U32
 
u32F‹m©Idítifõr
;

490 
GOSTSR_U16
 
u16AddIdítifiˇti⁄Lí
;

491 
GOSTSR_U8
 
u8AddIdítifiˇti⁄Info
[256];

492 }
	tGOS_DESC_REGISTRATION_S
;

497 
GOSTSR_U8
 
u8AlignmítTy≥
;

498 }
	tGOS_DESC_DATASTRAMALIGNMENT_S
;

503 
GOSTSR_U16
 
u16H‹iz⁄èlSize
;

504 
GOSTSR_U16
 
u16VîtiˇlSize
;

505 
GOSTSR_U8
 
u8Pña•e˘R©io
;

506 }
	tGOS_DESC_TARBACGRID_S
;

511 
GOSTSR_U16
 
u16H‹iz⁄èlZOff£t
;

512 
GOSTSR_U16
 
u16VîtiˇlOff£t
;

513 
GOSTSR_U8
 
u8WödowPri‹ôy
;

514 }
	tGOS_DESC_VIDEOWINDOW_S
;

519 
GOSTSR_U16
 
u16CaSy°emId
;

520 
GOSTSR_U16
 
u16CaPId
;

521 
GOSTSR_U8
 
u8Piv©eD©aLí
;

522 
GOSTSR_U8
 *
pu8D©a
;

523 } 
	tGOS_DESC_CA_S
;

529 } 
GOS_DESC_CA_SYSTEM_S
;

534 
GOSTSR_U32
 
u32L™guageCode
[
GOS_MAX_LANGUAGECODE_NUM
];

535 
GOSTSR_U16
 
u16L™guageCodeLí
;

536 
GOSTSR_U8
 
u8AudioTy≥
;

537 }
	tGOS_DESC_ISOLANGUAGECODE_S
;

542 
GOSTSR_U8
 
u8Exã∫ClockRefIndiˇt‹
;

543 
GOSTSR_U8
 
u8ClockAccuøcyI¡egî
;

544 
GOSTSR_U8
 
u8ClockAccuøcyExp⁄ít
;

545 }
	tGOS_DESC_SYSTEMCLOCK_S
;

550 
GOSTSR_U16
 
u16Mu…ùÀxDñayV¨üti⁄
;

551 
GOSTSR_U8
 
u8MdvVÆidFœg
;

552 
GOSTSR_U8
 
u8Mu…ùÀxSå©egy
;

553 }
	tGOS_DESC_MULBUFFERUTILIZATION_S
;

558 
GOSTSR_U32
 
u32C›yrightIdítifõr
;

559 
GOSTSR_U16
 
u32AddC›yrightInfoLí
;

560 
GOSTSR_U8
 
u8AddC›yrightInfo
[
GOS_MAX_ADDCOPYRIGHTINFO_NUM
];

561 }
	tGOS_DESC_COPYRIGHT_S
;

566 
GOSTSR_U32
 
u32MaxBôøã
;

567 }
	tGOS_DESC_MAXBITRATE_S
;

572 
GOSTSR_U32
 
u32Priv©eD©aIndiˇt‹
;

573 }
	tGOS_DESC_PRIVATEDATAINDICATOR_S
;

578 
GOSTSR_U16
 
u16AVCVideoLí
;

579 
GOSTSR_U8
 
u8AVCVideoD©a
[
GOS_MAX_AVCVIDEO_NUM
];

580 }
	tGOS_DESC_AVCVIDEO_S
;

585 
GOSTSR_U16
 
u16Sîvi˚Id
;

586 
GOSTSR_U16
 
u16LCN
;

587 
GOSTSR_U8
 
u8VisFœg
;

588 }
	tGOS_DESC_LCNINFO_S
;

592 
GOSTSR_U16
 
u16LCNSîvi˚Num
;

593 
GOS_DESC_LCNINFO_S
 
LCNSîvi˚Info
[
GOS_MAX_LCNSREVICE_NUM
];

594 }
	tGOS_DESC_LCN83_S
;

599 
GOSTSR_U32
 
u32Cou¡ry_Code
;

600 
GOSTSR_U16
 
u16Ch™√lLi°NameLí
;

601 
GOSTSR_U16
 
u16LCNSîvi˚Num
;

602 
GOSTSR_U8
 
u8Ch™√lLi°Id
;

603 
GOSTSR_U8
 
u16Ch™√lLi°Name
[256];

604 
GOS_DESC_LCNINFO_S
 
LCNSîvi˚Info
[
GOS_MAX_LCNSREVICE_NUM
];

605 }
	tGOS_DESC_CHANNELLISTINFO_S
;

609 
GOSTSR_U16
 
u16Ch™√lLi°Num
;

610 
GOS_DESC_CHANNELLISTINFO_S
 
ch™√lLi°Info
[
GOS_MAX_CHANNELLIST_NUM
];

611 }
	tGOS_DESC_LCN87_S
;

616 
GOSTSR_U32
 
u32ProgømmeIdítifiˇti⁄
;

617 }
	tGOS_DESC_PDC_S
;

623 }
GOS_DESC_TRANSPORT_STREAM_S
;

628 
GOSTSR_U8
 
u8RókVÆidFœg
;

629 }
	tGOS_DESC_STD_S
;

634 
GOSTSR_U16
 
u16MaxG›Lígth
;

635 
GOSTSR_U8
 
u8Clo£dG›Fœg
;

636 
GOSTSR_U8
 
u8IdítiˇlG›Fœg
;

637 }
	tGOS_DESC_IBP_S
;

642 
GOSTSR_U8
 
u8ByãD©a
;

643 }
	tGOS_DESC_DGBYTE_S
;

647 
GOSTSR_U16
 
u16ByãLí
;

648 
GOS_DESC_DGBYTE_S
 
a°Byã
[
GOS_MAX_DSNG_NUM
];

649 }
	tGOS_DESC_DSNG_S
;

654 
GOSTSR_U8
 
u8ByãD©a
;

655 }
	tGOS_DESC_TSBYTE_S
;

659 
GOSTSR_U16
 
u16ByãLí
;

660 
GOS_DESC_TSBYTE_S
 
a°Byã
[
GOS_MAX_TPSTREAM_NUM
];

661 }
	tGOS_DESC_TPSTREAM_S
;

666 
GOSTSR_U8
 
u8FõldP¨ôy
;

667 
GOSTSR_U8
 
u8LöeOff£t
;

668 }
	tGOS_DESC_SERVDES_S
;

672 
GOSTSR_U8
 
u8D©aSîvi˚Id
;

673 
GOSTSR_U8
 
u8D©aSîvDesLí
;

674 
GOS_DESC_SERVDES_S
 
a°SîvDes
[
GOS_MAX_VBIDATA_DES_NUM
];

675 }
	tGOS_DESC_DATASERV_S
;

679 
GOSTSR_U16
 
u16VbiD©aLí
;

680 
GOS_DESC_DATASERV_S
 
a°D©aSîv
[
GOS_MAX_VBIDATA_NUM
];

681 }
	tGOS_DESC_VBIDATA_S
;

686 
GOSTSR_U32
 
u32L™guageCode
;

687 
GOSTSR_U8
 
u8TñëextTy≥
;

688 
GOSTSR_U8
 
u8TñëextMagNum
;

689 
GOSTSR_U8
 
u8TñëextPageNum
;

690 }
	tGOS_DESC_TELETEXTDES_S
;

694 
GOSTSR_U16
 
u16VbiTñeTextLí
;

695 
GOS_DESC_TELETEXTDES_S
 
a°TñeText
[
GOS_MAX_VBITELETEXT_NUM
];

696 }
	tGOS_DESC_VBITELETEXT_S
;

701 
GOSTSR_U32
 
u32PókR©e
;

702 
GOSTSR_U32
 
u32MöiSmoŸhR©e
;

703 
GOSTSR_U16
 
u16MaxiOvîSmoŸhBuâe
;

704 }
	tGOS_DESC_PARTIAL_TRANSTREAM_S
;

709 
GOSTSR_U32
 
u32Addôi⁄ÆInfo
;

710 }
	tGOS_DESC_ADDINFO_S
;

714 
GOSTSR_U8
 
u8AC3Ty≥Fœg
;

715 
GOSTSR_U8
 
u8BsidFœg
;

716 
GOSTSR_U8
 
u8MaöidFœg
;

717 
GOSTSR_U8
 
u8AsvcFœg
;

718 
GOSTSR_U8
 
u8AC3Ty≥
;

719 
GOSTSR_U8
 
u8Bsid
;

720 
GOSTSR_U8
 
u8Maöid
;

721 
GOSTSR_U8
 
u8Asvc
;

722 
GOS_DESC_ADDINFO_S
 
a°AddInfo
[32];

723 }
	tGOS_DESC_AC3_S
;

728 
GOSTSR_U8
 
u8AncûœryD©aIdítifõr
;

730 }
	tGOS_DESC_ANCILLARRYDATA_S
;

735 
GOSTSR_U16
 
u16SubCñlL©ôude
 ;

736 
GOSTSR_U16
 
u16SubCñlL⁄gtôude
;

737 
GOSTSR_U16
 
u16SubCñlExL©ôude
;

738 
GOSTSR_U16
 
u16SubCñlExL⁄gtôude
;

739 
GOSTSR_U8
 
u8CñlIdExãnsi⁄
 ;

740 }
	tGOS_DESC_SUBCELLINFO_S
;

744 
GOSTSR_U16
 
u16CñlId
;

745 
GOSTSR_U16
 
u16CñlL©ôude
 ;

746 
GOSTSR_U16
 
u16CñlL⁄gtôude
;

747 
GOSTSR_U16
 
u16CñlExL©ôude
;

748 
GOSTSR_U16
 
u16CñlExL⁄gtôude
;

749 
GOSTSR_U8
 
u8SubCñlInfoLí
;

750 
GOS_DESC_SUBCELLINFO_S
 
a°SubCñlInfo
[256];

751 }
	tGOS_DESC_CELLINFO_S
;

755 
GOSTSR_U16
 
u16CñlLi°Lí
;

756 
GOS_DESC_CELLINFO_S
 
a°CñlInfo
[256];

757 }
	tGOS_DESC_CELLLIST_S
;

762 
GOSTSR_U32
 
u32TønsFªquícy
;

763 
GOSTSR_U8
 
u8CñlIdExãn
 ;

764 }
	tGOS_DESC_SUBCELLFREINFO_S
;

768 
GOSTSR_U32
 
u32Fªquícy
 ;

769 
GOSTSR_U16
 
u16CñlId
;

770 
GOSTSR_U8
 
u8SubCñlFªInfoLí
;

771 
GOS_DESC_SUBCELLFREINFO_S
 
a°SubCñlFªInfo
[256];

772 }
	tGOS_DESC_CELLFREINFO_S
;

776 
GOSTSR_U16
 
u16CñlFªLí
;

777 
GOS_DESC_CELLFREINFO_S
 
a°CñlFªInfo
[256];

778 }
	tGOS_DESC_CELLFRELINK_S
;

783 
GOSTSR_U8
 
u8A¬oun˚Ty≥
;

784 
GOSTSR_U8
 
u8Re„ªn˚Ty≥
;

785 
GOSTSR_U8
 
u8OrigöÆNëw‹kId
;

786 
GOSTSR_U8
 
u8Tøn•‹tSåómId
 ;

787 
GOSTSR_U8
 
u8Sîvi˚Id
;

788 
GOSTSR_U8
 
u8Comp⁄ítTag
 ;

789 }
	tGOS_DESC_ANNOUNCEINFO_S
;

793 
GOSTSR_U16
 
u16A¬oun˚Lí
;

794 
GOSTSR_U16
 
u16AnSuµ‹tIndiˇt‹
;

795 
GOS_DESC_ANNOUNCEINFO_S
 
a°AddInfo
[32];

796 }
	tGOS_DESC_ANNOUNCE_S
;

801 
DESC_3DSERVICE_STREAMCONTENT_AVS
 = 0x01,

802 
DESC_3DSERVICE_STREAMCONTENT_H264
 = 0x05

803 }
	tGOS_DESC_3DSERVICE_STREAMCONTENT_E
;

807 
DESC_3DSERVICE_CONTENTTYPE_AVS_25_LR
 = 0xD0,

808 
DESC_3DSERVICE_CONTENTTYPE_AVS_25_BT
 = 0xD1,

809 
DESC_3DSERVICE_CONTENTTYPE_AVS_30_LR
 = 0xD2,

810 
DESC_3DSERVICE_CONTENTTYPE_AVS_30_BT
 = 0xD3,

812 
DESC_3DSERVICE_CONTENTTYPE_H264_25_LR
 = 0x80,

813 
DESC_3DSERVICE_CONTENTTYPE_H264_25_BT
 = 0x81,

814 
DESC_3DSERVICE_CONTENTTYPE_H264_30_LR
 = 0x82,

815 
DESC_3DSERVICE_CONTENTTYPE_H264_30_BT
 = 0x83

816 }
	tGOS_DESC_3DSERVICE_CONTENTTYPE_E
;

820 
GOS_DESC_3DSERVICE_STREAMCONTENT_E
 
íTvSåómC⁄ã¡_3D
;

821 
GOS_DESC_3DSERVICE_CONTENTTYPE_E
 
íTvComp⁄ítTy≥_3D
;

822 } 
	tGOS_DESC_3DSERVICE_PRIVATE_S
;

825 
GOSTSR_S32
 
GosT§_Des¸ùt‹_AC3
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_AC3_S
 *
acDes
);

826 
GOSTSR_S32
 
GosT§_Des¸ùt‹_AudioSåóm
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_AUDIOSTRAM_S
 *
asDes
);

827 
GOSTSR_S32
 
GosT§_Des¸ùt‹_AVCVideo
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_AVCVIDEO_S
 *
avDes
);

828 
GOSTSR_S32
 
GosT§_Des¸ùt‹_AncûœryD©a
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_ANCILLARRYDATA_S
 *
™Des
);

829 
GOSTSR_S32
 
GosT§_Des¸ùt‹_A¬oun˚Suµ‹t
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_ANNOUNCE_S
 *
™Des
);

830 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Bouquë«me
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_BOUQUETNAME_S
 *
bndes
);

831 
GOSTSR_S32
 
GosT§_Des¸ùt‹_CabÀSy°em
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_CABDELIVSYS_S
 *
csDes
);

832 
GOSTSR_S32
 
GosT§_Des¸ùt‹_CaIdítify
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_CAIDF_S
 *
ciDes
);

833 
GOSTSR_S32
 
GosT§_Des¸ùt‹_CA
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_CA_S
 *
ˇDes
);

834 
GOSTSR_S32
 
GosT§_Des¸ùt‹_CA_Sy°em
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_CA_SYSTEM_S
 *
ˇDes
);

835 
GOSTSR_S32
 
GosT§_Des¸ùt‹_CñlFªLök
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_CELLFRELINK_S
 *
cÊDes
);

836 
GOSTSR_S32
 
GosT§_Des¸ùt‹_CñlLi°
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_CELLLIST_S
 *
˛Des
);

837 
GOSTSR_S32
 
GosT§_Des¸ùt‹_C›yRight
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_COPYRIGHT_S
 *
cDes
);

838 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Comp⁄ít
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_COMPONENT_S
 *
cDes
);

839 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Comp⁄ít_Sîvi˚_Name
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_COMPONENT_SERVICE_NAME_S
 *
cDes
);

840 
GOSTSR_S32
 
GosT§_Des¸ùt‹_C⁄ã¡
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_CONTENT_S
 *
cDes
);

841 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Cou¡ryAvaûabûôy
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_COUNTRY_AVAILABILITY_S
 *
ˇDes
);

842 
GOSTSR_S32
 
GosT§_Des¸ùt‹_D©aSåómAlignmít
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_DATASTRAMALIGNMENT_S
 *
dßDes
);

843 
GOSTSR_S32
 
GosT§_Des¸ùt‹_D©aBrﬂdˇ°
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_DATA_BROADCAST_S
 *
dbDes
);

844 
GOSTSR_S32
 
GosT§_Des¸ùt‹_D©aBrﬂdˇ°ID
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_DATA_BROADCAST_ID_S
 *
dIDDes
);

845 
GOSTSR_S32
 
GosT§_Des¸ùt‹_DSNG
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_DSNG_S
 *
dgDes
);

846 
GOSTSR_S32
 
GosT§_Des¸ùt‹_ExãndEvít
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_EXTEVT_S
 *
ìDes
);

847 
GOSTSR_S32
 
GosT§_Des¸ùt‹_FªquícyLi°
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_FREQLST_S
 *
ÊDes
);

848 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Hõørchy
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_HIERARCHY_S
 *
hDes
);

849 
GOSTSR_S32
 
GosT§_Des¸ùt‹_IBP
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_IBP_S
 *
ibpDes
);

850 
GOSTSR_S32
 
GosT§_Des¸ùt‹_ISO639L™guageCode
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_ISOLANGUAGECODE_S
 *
lcDes
);

851 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Lökage
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_LINKAGE_S
 *
lDes
);

852 
GOSTSR_S32
 
GosT§_Des¸ùt‹_LoˇlTimeOff£t
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_LOCALTMOFFSET_S
 *
…oDes
);

853 
GOSTSR_S32
 
GosT§_Des¸ùt‹_LCN_83
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_LCN83_S
 *
l˙83Des
);

854 
GOSTSR_S32
 
GosT§_Des¸ùt‹_LCN_87
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_LCN87_S
 *
l˙87Des
);

855 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Moßic
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_MOSAIC_S
 *
mDes
);

856 
GOSTSR_S32
 
GosT§_Des¸ùt‹_MaximumBôøã
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_MAXBITRATE_S
 *
mbDes
);

857 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Mu…ûöguÆBouquëName
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_MULT_BOUQUET_NAME_S
 *
mbnDes
);

858 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Mu…ûöguÆComp⁄ít
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_MULT_COMPONENT_S
 *
mcDes
);

859 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Mu…ûöguÆNëw‹kName
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_MULT_NETWORK_NAME_S
 *
m¬Des
);

860 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Mu…ûöguÆSîvi˚Name
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_MULT_SERVICE_NAME_S
 *
m¢Des
);

861 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Mu…ùÀxBuf„rUtûiz©i⁄
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_MULBUFFERUTILIZATION_S
 *
mbuDes
);

862 
GOSTSR_S32
 
GosT§_Des¸ùt‹_NVODRe„ªn˚
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_NVODREF_S
 *
ƒDes
);

863 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Nëw‹kName
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_NETWORKNAME_S
 *
√äDes
);

864 
GOSTSR_S32
 
GosT§_Des¸ùt‹_P¨ítR©ög
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_PARENTRATING_S
 *
¥Des
);

865 
GOSTSR_S32
 
GosT§_Des¸ùt‹_P¨tülTønSåóm
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_PARTIAL_TRANSTREAM_S
 *
±sDes
);

866 
GOSTSR_S32
 
GosT§_Des¸ùt‹_PDC
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_PDC_S
 *
pdcDes
);

867 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Priv©eD©aS≥cifõr
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_PRIVATE_DATA_SPECIFIER_S
 *
pdsDes
);

868 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Priv©eD©aIndiˇt‹
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_PRIVATEDATAINDICATOR_S
 *
pdiDes
);

869 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Regi°øti⁄
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_REGISTRATION_S
 *
rDes
);

870 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Sh‹tSmoŸhögBuf„r
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SHORT_SMOOTHING_BUFFER_S
 *
ssbDes
);

871 
GOSTSR_S32
 
GosT§_Des¸ùt‹_SmoŸhögBuf„r
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SMOOTHING_BUFFER_S
 *
sbDes
);

872 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Sîvi˚
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SERVICE_S
 *
sDes
);

873 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Sîvi˚Li°
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SERVLIST_S
 *
£rLDes
);

874 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Sîvi˚Move
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SERVICE_MOVE_S
 *
smDes
);

875 
GOSTSR_S32
 
GosT§_Des¸ùt‹_S©ñlôeSy°em
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SATDELIVSYS_S
 *
ssdes
);

876 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Sh‹tEvít
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SHORTEVT_S
 *
£Des
);

877 
GOSTSR_S32
 
GosT§_Des¸ùt‹_SåómIdítifõr
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_STREAM_IDENTIFIER_S
 *
siDes
);

878 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Stuffög
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_STUFFING_S
 *
sDes
);

879 
GOSTSR_S32
 
GosT§_Des¸ùt‹_STD
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_STD_S
 *
°dDes
);

880 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Subtôlög
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SUBT_S
 *
sDes
);

881 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Sy°emClock
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SYSTEMCLOCK_S
 *
scDes
);

882 
GOSTSR_S32
 
GosT§_Des¸ùt‹_T¨gëBackgroundGrid
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_TARBACGRID_S
 *
tbgDes
);

883 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Tîª°rülSy°em
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_TERDELIVSYS_S
 *
tsdes
);

884 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Tñïh⁄e
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_TELEPHONE_S
 *
tDes
);

885 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Tñëex
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_TELETEXT_S
 *
tDes
);

886 
GOSTSR_S32
 
GosT§_Des¸ùt‹_TimeShi·edEvít
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_TMSHIFTEVT_S
 *
t£Des
);

887 
GOSTSR_S32
 
GosT§_Des¸ùt‹_TimeShi·edSîvi˚
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_TIMESHIFTSERV_S
 *
tssDes
);

888 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Tøn•‹tSåóm
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_TPSTREAM_S
 *
çsDes
);

889 
GOSTSR_S32
 
GosT§_Des¸ùt‹_VBI_D©a
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_VBIDATA_S
 *
vbiDes
);

890 
GOSTSR_S32
 
GosT§_Des¸ùt‹_VBI_Tñëext
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_VBITELETEXT_S
 *
vâDes
);

891 
GOSTSR_S32
 
GosT§_Des¸ùt‹_VideoSåóm
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_VIDEOSTREAM_S
 *
vsDes
);

892 
GOSTSR_S32
 
GosT§_Des¸ùt‹_VideoWödow
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_VIDEOWINDOW_S
 *
vwDes
);

896 #ifde‡
__˝lu•lus


897 #i‡
__˝lu•lus


	@porting/include/tsparse/TsErrorCheck_Common.h

1 #ifde‡
__˝lu•lus


2 #i‡
__˝lu•lus


7 #i‚de‡
__TSERRORCHECK_COMMON_H__


8 
	#__TSERRORCHECK_COMMON_H__


	)

10 
	~"GosT§_Comm⁄.h
"

14 #ifde‡
__˝lu•lus


15 #i‡
__˝lu•lus


	@porting/include/tsparse/TsErrorCheck_OneLevel.h

1 #ifde‡
__˝lu•lus


2 #i‡
__˝lu•lus


7 #i‚de‡
_TSERRORCHECK_ONELEVEL_H


8 
	#_TSERRORCHECK_ONELEVEL_H


	)

10 
	~"TsEº‹Check_Comm⁄.h
"

11 
	~"GosT§_A«lysisD©a.h
"

12 
	~"t•¨£_£¨ch.h
"

14 
	#PACKAGE_LEN
 188

	)

15 
	#MAX_PMT_NUMS
 256

	)

16 
	#MAX_AVPID_NUMS
 256

	)

17 
	#CONTINUITYCOUNTER_MAX
 15

	)

18 
	#PID_NUMBER_MAX
 0x1fff

	)

19 
	#ONELEVEL_BYTEPOS_MAX
 0xffffffff

	)

22 
	#MAX_PES_NUMS
 (
MAX_PMT_NUMS
*20)

	)

25 
GOSTSR_U32
 
timeout_îr‹
;

26 
GOSTSR_U32
 
èbÀid_îr‹
;

27 
GOSTSR_U32
 
s¸ambÀ_îr‹
;

28 
GOSTSR_U32
 
tŸÆ_îr‹
;

29 }
	tONELEVEL_PATERROR
;

33 
GOSTSR_U32
 
	mtimeout_îr‹
;

34 
GOSTSR_U32
 
	ms¸ambÀ_îr‹
;

35 
GOSTSR_U32
 
	mtŸÆ_îr‹
;

36 }
	tONELEVEL_PMTERROR
;

49 
GOSTSR_U32
 
	mtsSyncLossEº‹
;

50 
GOSTSR_U32
 
	mtsSyncByãEº‹
;

51 
GOSTSR_U32
 
	mtsC⁄töuôyCou¡îEº‹
;

53 
ONELEVEL_PATERROR
 
	mtsP©Eº‹
;

54 
ONELEVEL_PMTERROR
 
	mtsPmtEº‹
;

55 
GOSTSR_U32
 
	mtsPIDMissEº‹
;

56 }
	tTSERROR_ONELEVEL_RECORD
;

60 
GOSTSR_BOOL
 
	mbU£d
;

61 
GOSTSR_U16
 
	mpid
;

62 
GOSTSR_U8
 
	mc⁄töutycou¡
;

63 
GOSTSR_BOOL
 
	m¥edisC⁄töuôyIndiˇt‹
;

64 }
	tCONTINUTY_COUNT_INFO
;

70 
GOSTSR_U32
 
	mbyãPos
;

71 
GOSTSR_U16
 
	mpid
;

72 
GOSTSR_BOOL
 
	mªcvFœg
;

73 }
	tPID_TIMEOUT_INFO
;

77 
GOSTSR_U16
 
	mNbPmtInfo
;

78 
PID_TIMEOUT_INFO
 
	mpmtInfo
[
MAX_PMT_NUMS
];

79 }
	tPMTPID_TIMEOUT_INFO
;

83 
GOSTSR_U16
 
	mNbPesInfo
;

84 
PID_TIMEOUT_INFO
 
	m≥sInfo
[
MAX_PES_NUMS
];

85 }
	tPESPID_TIMEOUT_INFO
;

87 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_Inô
();

88 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_DeInô
();

89 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_GëEº‹Info
(
TSERROR_ONELEVEL_RECORD
 *
⁄eLevñEº‹Info
);

90 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_P©Eº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U32
 
pid
,GOSTSR_U32 
èbÀId
,
GOSTSR_U8
 
s¸ambÀ_c⁄åﬁ
);

91 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_PmtEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U16
 
pid
,
GOSTSR_U8
 
s¸ambÀ_c⁄åﬁ
);

92 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_pidMissEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U16
 
pid
);

93 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_C⁄töuôyCou¡îEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U32
 
pid
,
GOSTSR_U8
 
C⁄töuôy
,GOSTSR_U8 
ad≠ãr_c⁄åﬁ
,GOSTSR_U8 
disC⁄töuôyIndiˇt‹
);

95 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_SyncLossEº‹
(
GOSTSR_U32
 
tmpSyncOff£t
);

96 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_SyncByãEº‹
(
GOSTSR_U32
 
tmpSyncOff£t
);

98 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_£tPid
(
SEARCH_INFO_S
 *
°ProgInfo
);

102 #ifde‡
__˝lu•lus


103 #i‡
__˝lu•lus


	@porting/include/tsparse/TsErrorCheck_ThreeLevel.h

1 #ifde‡
__˝lu•lus


2 #i‡
__˝lu•lus


7 #i‚de‡
__TSERRORCHECK_THREELEVEL_H__


8 
	#__TSERRORCHECK_THREELEVEL_H__


	)

10 
	~"TsEº‹Check_Comm⁄.h
"

11 
	~"GosT§_A«lysisD©a.h
"

12 
	~"t•¨£_£¨ch.h
"

14 
	#MAX_PMT_NUMS
 256

	)

15 
	#MAX_CAT_NUMS
 10

	)

20 
GOSTSR_U16
 
tŸÆEº‹
;

21 
GOSTSR_U16
 
èbÀIDEº‹
;

22 
GOSTSR_U16
 
a˘uÆOvîTimeEº‹
;

23 
GOSTSR_U16
 
a˘uÆLimôTimeEº‹
;

24 
GOSTSR_U16
 
ŸhîOvîTimeEº‹
;

25 
GOSTSR_U16
 
ŸhîLimôTimeEº‹
;

26 }
	tNôEº‹_Info
;

31 
GOSTSR_U32
 
	m°¨tTime
;

32 
GOSTSR_U8
 
	m£˘i⁄Fœg
[256];

33 
GOSTSR_U8
 
	mœ°Se˘i⁄Num
;

34 
GOSTSR_U8
 
	mnumbî
;

35 }
	tSiRïëR©eSe˘i⁄s_Info
;

39 
GOSTSR_U16
 
	mtŸÆEº‹
;

40 
GOSTSR_U16
 
	msiSe˘i⁄LimôTimeEº‹
;

41 
GOSTSR_U16
 
	mnôOvîTimeEº‹
;

42 
GOSTSR_U16
 
	mb©OvîTimeEº‹
;

43 
GOSTSR_U16
 
	msdtA˘uÆOvîTimeEº‹
;

44 
GOSTSR_U16
 
	msdtOthîOvîTimeEº‹
;

45 
GOSTSR_U16
 
	meôA˘uÆOvîTimeEº‹
;

46 
GOSTSR_U16
 
	meôOthîOvîTimeEº‹
;

47 
GOSTSR_U16
 
	meôA˘uÆScheduÀOvîTimeEº‹
;

48 
GOSTSR_U16
 
	meôOthîScheduÀOvîTimeEº‹
;

49 
GOSTSR_U16
 
	mtdtOvîTimeEº‹
;

50 
GOSTSR_U16
 
	mtŸOvîTimeEº‹
;

51 }
	tSiRïëôi⁄R©eEº‹_Info
;

56 
GOSTSR_U16
 
	mtŸÆEº‹
;

57 
GOSTSR_U16
 
	mTBBuf„rEº‹
;

58 
GOSTSR_U16
 
	mTBsysBuf„rEº‹
;

59 
GOSTSR_U16
 
	mMBBuf„rEº‹
;

60 
GOSTSR_U16
 
	mEBBuf„rEº‹
;

61 
GOSTSR_U16
 
	mBBuf„rEº‹
;

62 
GOSTSR_U16
 
	mBsysBuf„rEº‹
;

63 }
	tBuf„rEº‹_Info
;

66 
	#MAX_UNREFERPID_NUM
 1024

	)

70 
GOSTSR_U32
 
	m°¨tTime
;

71 
GOSTSR_U16
 
	mpid
;

72 
GOSTSR_U8
 
	mÊag
;

73 }
	tUƒe„ªn˚dPid_Info
;

77 
GOSTSR_U16
 
	mtŸÆEº‹
;

78 }
	tUƒe„ªn˚dPidEº‹_Info
;

83 
GOSTSR_U16
 
	mtŸÆEº‹
;

84 
GOSTSR_U16
 
	mèbÀIDEº‹
;

85 
GOSTSR_U16
 
	ma˘uÆOvîTimeEº‹
;

86 
GOSTSR_U16
 
	ma˘uÆLimôTimeEº‹
;

87 
GOSTSR_U16
 
	mŸhîOvîTimeEº‹
;

88 }
	tSdtEº‹_Info
;

93 
GOSTSR_U16
 
	mtŸÆEº‹
;

94 
GOSTSR_U16
 
	mèbÀIDEº‹
;

95 
GOSTSR_U16
 
	ma˘uÆOvîTimeEº‹
;

96 
GOSTSR_U16
 
	ma˘uÆLimtTimeEº‹
;

97 
GOSTSR_U16
 
	ma˘uÆSec0OvîTimeEº‹
;

98 
GOSTSR_U16
 
	ma˘uÆSec1OvîTimeEº‹
;

99 
GOSTSR_U16
 
	ma˘uÆPFPaúEº‹
;

100 
GOSTSR_U16
 
	mŸhîSec0OvîTimeEº‹
;

101 
GOSTSR_U16
 
	mŸhîSec1OvîTimeEº‹
;

102 
GOSTSR_U16
 
	mŸhîPFPaúEº‹
;

103 }
	tEôEº‹_öfo
;

108 
GOSTSR_U16
 
	mtŸÆEº‹
;

109 
GOSTSR_U16
 
	mèbÀIDEº‹
;

110 
GOSTSR_U16
 
	mlimtTimeEº‹
;

111 }
	tR°Eº‹_Info
;

116 
GOSTSR_U16
 
	mtŸÆEº‹
;

117 
GOSTSR_U16
 
	movîTimeEº‹
;

118 
GOSTSR_U16
 
	mèbÀIDEº‹
;

119 
GOSTSR_U16
 
	mlimôTimeEº‹
;

120 }
	tTdtEº‹_Info
;

125 
GOSTSR_U16
 
	mtŸÆEº‹
;

126 
GOSTSR_U16
 
	mTBBuf„rEm±yEº‹
;

127 
GOSTSR_U16
 
	mTBsysBuf„rEm±yEº‹
;

128 
GOSTSR_U16
 
	mMBBuf„rEm±yEº‹
;

129 }
	tEm±yBuf„rEº‹_Info
;

134 
GOSTSR_U16
 
	mtŸÆEº‹
;

135 
GOSTSR_U16
 
	m°ûlPicOvîTimeEº‹
;

136 
GOSTSR_U16
 
	mgíîÆD©aOvîTimeEº‹
;

137 }
	tD©aDñayEº‹_Info
;

142 
NôEº‹_Info
 
	mnôEº‹Info
;

143 
SiRïëôi⁄R©eEº‹_Info
 
	msiRïëôi⁄R©eEº‹Info
;

144 
Buf„rEº‹_Info
 
	mbuf„rEº‹Info
;

145 
Uƒe„ªn˚dPidEº‹_Info
 
	muƒe„ªn˚dPidEº‹Info
;

146 
SdtEº‹_Info
 
	msdtEº‹Info
;

147 
EôEº‹_öfo
 
	meôEº‹Info
;

148 
R°Eº‹_Info
 
	mr°Eº‹Info
;

149 
TdtEº‹_Info
 
	mtdtEº‹Info
;

150 
Em±yBuf„rEº‹_Info
 
	mem±yBuf„rEº‹Info
;

151 
D©aDñayEº‹_Info
 
	md©aDñayEº‹Info
;

152 }
	tTsThªeLevñEº‹Check_Info
;

156 
GOSTSR_U16
 
	mpmtPidInfo
[
MAX_PMT_NUMS
];

157 }
	tThªeLevñ_PmtDis_Info
;

161 
GOSTSR_U16
 
	mC©PidInfo
[
MAX_CAT_NUMS
];

162 }
	tThªeLevñ_C©Dis_Info
;

164 
GOSTSR_S32
 
TsEº‹Check_ThªeLevñ_Inô
();

165 
GOSTSR_S32
 
TsEº‹Check_ThªeLevñ_Se˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
);

166 
GOSTSR_S32
 
TsEº‹Check_ThªeLevñ_Buf„rEº‹
(
GOSTSR_U8
 *
d©a
, 
GOSTSR_U16
 
d©aLí
, 
GOSTSR_U32
 
time
);

167 
GOSTSR_S32
 
TsEº‹Check_ThªeLevñ_GëEº‹Info
(
TsThªeLevñEº‹Check_Info
 *
öfo
);

168 
GOSTSR_S32
 
TsEº‹Check_ThªeLevñ_Uƒe„ªn˚dPidEº‹
(
TS_HEAD_INFO
 
tsHódInfo
);

169 
GOSTSR_S32
 
TsEº‹Check_ThªeLevñ_DeInô
();

170 
GOSTSR_S32
 
TsEº‹Check_ThªeLevñ_£tPid
(
SEARCH_INFO_S
 *
p°ProgInfo
);

173 #ifde‡
__˝lu•lus


174 #i‡
__˝lu•lus


	@porting/include/tsparse/TsErrorCheck_TwoLevel.h

1 #ifde‡
__˝lu•lus


2 #i‡
__˝lu•lus


7 #i‚de‡
__TSERRORCHECK_TWOLEVEL_H__


8 
	#__TSERRORCHECK_TWOLEVEL_H__


	)

10 
	~"TsEº‹Check_Comm⁄.h
"

11 
	~"t•¨£_£¨ch.h
"

13 
	#PCRPID_NUM_MAX
 (256)

	)

14 
	#PESPID_NUM_MAX
 (256 * 8)

	)

16 
	#PCR_VALUE_MAX
 0x3ffffffffffULL

	)

17 
	#TWOLEVEL_PCRBASETIME_MAX
 0x1ffffffffULL

	)

18 
	#TWOLEVEL_BYTEPOS_MAX
 0xffffffff

	)

20 
	#TWOLEVEL_TIME_INVALID
 0

	)

21 
	#TWOLEVEL_TIME_MAX
 0xffffffff

	)

23 
	#TWOLEVEL_INVALID_U64
 0xffffffffffffffffULL

	)

24 
	#TWOLEVEL_INVALID_U32
 0xffffffff

	)

25 
	#TWOLEVEL_INVALID_U16
 0xffff

	)

26 
	#TWOLEVEL_INVALID_U8
 0xff

	)

31 
GOSTSR_U32
 
tŸÆCrcEº‹Cou¡
;

32 
GOSTSR_U32
 
∑tCrcEº‹Cou¡
;

33 
GOSTSR_U32
 
ˇtCrcEº‹Cou¡
;

34 
GOSTSR_U32
 
pmCr˘Eº‹Cou¡
;

35 
GOSTSR_U32
 
nôCrcEº‹Cou¡
;

36 
GOSTSR_U32
 
b©CrcEº‹Cou¡
;

37 
GOSTSR_U32
 
sdtCrcEº‹Cou¡
;

38 
GOSTSR_U32
 
eôCrcEº‹Cou¡
;

39 }
	tTwoLevñ_CrcEº‹_Info
;

43 
	mTWOLEVEL_ERRORTYPE_PCR
 = 0x01,

44 
	mTWOLEVEL_ERRORTYPE_PES
,

46 
	mTWOLEVEL_ERRORTYPE_MAX


47 }
	tTWOLEVEL_ERROR_TYPE_E
;

51 
GOSTSR_U32
 
	mtŸÆC©Eº‹Cou¡
;

52 
GOSTSR_U32
 
	mèbÀIDEº‹Cou¡
;

53 
GOSTSR_U32
 
	msˇmbÀEº‹Cou¡
;

54 }
	tTwoLevñ_C©Eº‹_Info
;

59 
GOSTSR_U32
 
	mu32ByãPos
;

60 
GOSTSR_U32
 
	mu32Tøn•‹tR©e
;

61 
GOSTSR_U64
 
	mu64P¸Ba£
;

62 
GOSTSR_U16
 
	mu16P¸Ext
;

63 
GOSTSR_U16
 
	mu16P¸Pid
;

64 
GOSTSR_BOOL
 
	mbFú°U£d
;

65 }
	tTwoLevñ_TsR©eDis_Info
;

70 
GOSTSR_U32
 
	mu32ByãPos
;

71 
GOSTSR_U32
 
	mu32P¸VÆueNs
;

72 
GOSTSR_U64
 
	mu64P¸Ba£
;

73 
GOSTSR_U16
 
	mu16P¸Ext
;

74 
GOSTSR_U16
 
	mu16P¸Pid
;

75 
GOSTSR_BOOL
 
	mbFú°U£d
;

76 }
	tTwoLevñ_P¸Dis_Info
;

81 
GOSTSR_U32
 
	mu32ByãPos
;

82 
GOSTSR_U16
 
	mu16PesPid
;

83 
GOSTSR_U16
 
	mu16P¸Pid
;

84 
GOSTSR_BOOL
 
	mbFú°U£d
;

85 }
	tTwoLevñ_PesDis_Info
;

90 
GOSTSR_U32
 
	mu32TsEº‹Cou¡
;

91 
TwoLevñ_CrcEº‹_Info
 
	m°CrcEº‹Info
;

92 
GOSTSR_U32
 
	mu32P¸DisEº‹Cou¡
;

93 
GOSTSR_U32
 
	mu32P¸JôEº‹Cou¡
;

94 
GOSTSR_U32
 
	mu32PtsEº‹Cou¡
;

95 
TwoLevñ_C©Eº‹_Info
 
	m°C©Eº‹Info
;

97 }
	tTSERROR_TWOLEVEL_S
;

99 
GOSTSR_S32
 
TsEº‹Check_TwoLevñ_Inô
();

100 
GOSTSR_S32
 
TsEº‹Check_TwoLevñ_DeInô
();

101 
GOSTSR_S32
 
TsEº‹Check_TwoLevñ_gëTwoLevñEº‹
(
TSERROR_TWOLEVEL_S
 *
pTwoLevñ
);

103 
GOSTSR_S32
 
TsEº‹Check_TwoLevñ_checkTøn•‹tEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U8
 
u8Eº‹_ödiˇãr
);

104 
GOSTSR_S32
 
TsEº‹Check_TwoLevñ_checkCrcEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U8
 
u8TabÀID
,
GOSTSR_U32
 
u32TabÀCrc
,GOSTSR_U32 
u32CÆCrc
);

105 
GOSTSR_S32
 
TsEº‹Check_TwoLevñ_checkP¸Disc⁄tEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U32
 
ödex
,
GOSTSR_U64
 
u64P¸_Ba£
, 
GOSTSR_U16
 
u64P¸_Ex
,
GOSTSR_BOOL
 *
bEº‹Fœgt
);

106 
GOSTSR_S32
 
TsEº‹Check_TwoLevñ_checkP¸JôãrEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U32
 
ödex
,
GOSTSR_U64
 
u64P¸_Ba£
, 
GOSTSR_U16
 
u64P¸_Ex
);

107 
GOSTSR_S32
 
TsEº‹Check_TwoLevñ_checkP¸Eº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U16
 
u16P¸Pid
,
GOSTSR_U64
 
u64P¸_Ba£
, GOSTSR_U16 
u64P¸_Ext
, 
GOSTSR_BOOL
 
Êag
);

108 
GOSTSR_S32
 
TsEº‹Check_TwoLevñ_checkPtsEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U16
 
u16PesPid
);

109 
GOSTSR_S32
 
TsEº‹Check_TwoLevñ_checkC©Eº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U16
 
u16Pid
, 
GOSTSR_U8
 
u8TabÀID
, GOSTSR_U8 
u8S¸ambÀ
);

111 
GOSTSR_U32
 
TsEº‹Check_TwoLevñ_gëAvTøn•‹tR©e
();

112 
GOSTSR_BOOL
 
TsEº‹Check_TwoLevñ_gëE«bÀCheckFœg
();

114 
GOSTSR_U32
 
TsEº‹Check_TwoLevñ_gëTimeUs_byByãPos
(GOSTSR_U32 
u32ByãPos
);

115 
GOSTSR_S32
 
TsEº‹Check_TwoLevñ_£tPid
(
SEARCH_INFO_S
 *
°ProgInfo
);

118 #ifde‡
__˝lu•lus


119 #i‡
__˝lu•lus


	@porting/include/tsparse/tsparse_api.h

1 #i‚de‡
__TSPARSE_API_H__


2 
	#__TSPARSE_API_H__


	)

4 
	~"TsEº‹Check_Comm⁄.h
"

5 
	~"u£r_deföe.h
"

6 
	~"web.h
"

8 
	#MAX_TSPARSE_FILE_LEN
 4*1024

	)

9 
	#MAX_THREAD_NUM
 5

	)

10 
	#TS_OVER_IP_SIZE
 7*188

	)

14 
GOS_CHAR
 
	mpfûíame
[64];

15 
GOS_CHAR
 
	m∑ddr
[32];

16 
GOS_U32
 
	mp‹t
;

18 
GOS_U8
 
	m¥Ÿocﬁ
;

19 
GOS_U8
 
	m°©e
;

20 }
	tTSPARSE_UNIT_Info_t
;

24 
GOS_U8
 
	mchùID
;

25 
GOS_U8
 
	mchù_°©e
;

26 
GOS_U32
 
	m∑ckë_num
;

27 
GOS_CHAR
 
	mpfûíame
[
MAX_TSPARSE_FILE_LEN
];

28 
TSPARSE_UNIT_Info_t
 
	munô_öfo
[5];

29 }
	tTSPARSE_API_INFO_t
;

31 
GOSTSR_S32
 
TsP¨£_Api_Gë_TsInfo
(
TSPARSE_API_INFO_t
 *
t•¨£_öfo
);

32 
GOSTSR_S32
 
TsP¨£_Api_RódSèticTs
(*
pfûï©h
, *
bôøã
);

33 
GOSTSR_S32
 
TsP¨£_Api_Thªadpoﬁ_AddTask
(*
pfûï©h
, 
bô_øã
, 
¥Ÿocﬁ
, 
p‹t
, *
∑ddr
);

34 
GOSTSR_S32
 
TsP¨£_Api_TsP¨£Pro˚ss
(
TSPARSE_API_INFO_t
 *
t•¨£_öfo
);

35 
GOSTSR_S32
 
TsP¨£_Api_Gë_Bôøã
(
GOS_SVC_TsP¨£_BôR©e_t
 *
°bôøã
);

36 
GOSTSR_S32
 
TsP¨£_Api_Re°¨t
();

37 
GOSTSR_S32
 
TsP¨£_Api_St›Síd
();

39 
GOSTSR_S32
 
TsP¨£_Api_Inô
();

40 
GOSTSR_S32
 
TsP¨£_Api_DeInô
();

41 
GOSTSR_S32
 
TsP¨£_Api_ResInô
();

	@porting/include/tsparse/tsparse_file.h

1 #i‚de‡
__TSPARSE_FILE_H__


2 
	#__TSPARSE_FILE_H__


	)

4 
	~"TsEº‹Check_Comm⁄.h
"

5 
	~"GosT§_A«lysisD©a.h
"

7 
GOSTSR_S32
 
TsP¨£_Fûe_Ród_TsInfoFûe
(*
pP¨am
);

8 
GOSTSR_S32
 
TsP¨£_Fûe_Wrôe_TsInfoFûe
(*
pP¨am
);

	@porting/include/tsparse/tsparse_search.h

1 #i‚de‡
__TSPARSE_SEARCH_H__


2 
	#__TSPARSE_SEARCH_H__


	)

4 
	~"TsEº‹Check_Comm⁄.h
"

5 
	~"GosT§_A«lysisD©a.h
"

7 
	#SEARCH_PROG_NUM_MAX
 255

	)

8 
	#SEARCH_CA_NUM_MAX
 10

	)

9 
	#SEARCH_PROG_PES_MAX
 20

	)

13 
GOSTSR_BOOL
 
	mbU£d
;

15 
GOSTSR_U16
 
	mPmtPid
;

16 
GOSTSR_U16
 
	mP¸Pid
;

17 
GOSTSR_U8
 
	mu8NbPes
;

18 
GOSTSR_U16
 
	mPesPid
[
SEARCH_PROG_PES_MAX
];

19 } 
	tSEARCH_PROG_INFO_S
;

23 
GOSTSR_U16
 
	mCaPid
;

24 } 
	tSEARCH_CA_INFO_S
;

28 
GOSTSR_U16
 
	mu16NbProg
;

29 
SEARCH_PROG_INFO_S
 
	m°ProgInfo
[
SEARCH_PROG_NUM_MAX
];

31 
GOSTSR_U8
 
	mu16NbCa
;

32 
SEARCH_CA_INFO_S
 
	m°CaInfo
[
SEARCH_CA_NUM_MAX
];

33 } 
	tSEARCH_INFO_S
;

35 
GOSTSR_S32
 
TsP¨£_Sórch_TsEº‹Check_£tPid
(
SEARCH_INFO_S
 *
p°ProgInfo
);

36 
GOSTSR_S32
 
TsP¨£_Sórch_gëProgInfo
(
SEARCH_INFO_S
 *
p°ProgInfo
);

37 
GOSTSR_S32
 
TsP¨£_Sórch_St‹eProg_byP©
(
GOSTSR_PSISI_PAT_S
 *
∑tInfo
);

38 
GOSTSR_S32
 
TsP¨£_Sórch_St‹eProg_byPmt
(
GOSTSR_U16
 
Pmt_pid
, 
GOSTSR_PSISI_PMT_S
 *
pmtInfo
);

39 
GOSTSR_S32
 
TsP¨£_Sórch_St‹eProg_byC©
(
GOSTSR_PSISI_CAT_S
 *
ˇtInfo
);

40 
GOSTSR_S32
 
TsP¨£_Sórch_P¨£Se˘i⁄
(
GOSTSR_U8
 
èbÀID
,
TS_SECTION_INFO
 *
curSe˘i⁄Info
);

41 
GOSTSR_S32
 
TsP¨£_Sórch_LökPackage
(
GOSTSR_U8
 
èbÀID
, 
TS_PACKAGE_INFO
 *
PackageHód_Temp
, GOSTSR_U8 
œ°D©aLí
, GOSTSR_U8 *
œ°D©a
);

42 
GOSTSR_S32
 
TsP¨£_Sórch_BuûdSe˘i⁄
(
GOSTSR_U8
 
èbÀID
,c⁄° *
d©a
, 
TS_HEAD_INFO
 
tsHódInfo
);

43 
GOSTSR_S32
 
TsP¨£_Sórch_TSHódInfo
(c⁄° *
§cD©a
, 
TS_HEAD_INFO
 *
desD©a
);

44 
GOSTSR_S32
 
TsP¨£_Sórch_A«lysisPackë
(
GOSTSR_U8
 *
pPackëD©a
, 
GOSTSR_U32
 
u32D©aLí
);

45 
GOSTSR_S32
 
TsP¨£_Sórch_RódSèticTs
(*
fûeP©h
);

46 
GOSTSR_S32
 
TsP¨£_Sórch_Inô
(*
fûeP©h
);

47 
GOSTSR_S32
 
TsP¨£_Sórch_DeInô
();

	@porting/include/tsparse/tsparse_update.h

1 #i‚de‡
__TSPARSE_UPDATE_H__


2 
	#__TSPARSE_UPDATE_H__


	)

4 
	~"TsEº‹Check_Comm⁄.h
"

5 
	~"t•¨£_£¨ch.h
"

9 
GOSTSR_U8
 
	mu8P©Vîsi⁄
;

10 
GOSTSR_BOOL
 
	mbUpd©eFœg
;

12 
SEARCH_INFO_S
 
	m°ProgInfo
;

13 } 
	tUPDATE_INFO_S
;

15 
GOSTSR_S32
 
TsP¨£_Upd©e_ProgSórch_Inô
();

16 
GOSTSR_S32
 
TsP¨£_Upd©e_ProgSórch_DeInô
();

	@porting/include/usb/usb_self.h

1 #i‚de‡
_ã°_USB_H_


2 
	#_ã°_USB_H_


	)

5 
umou¡_USB
();

6 
check_USB
();

	@porting/include/usb/usbdesk.h

1 #i‚de‡
_USB_MOUNT_H_


2 
	#_USB_MOUNT_H_


	)

4 #ifde‡
__˝lu•lus


7 
	~<±hªad.h
>

8 
	~<sched.h
>

9 
	~<˘y≥.h
>

10 
	~<m©h.h
>

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°ddef.h
>

14 
	~<°rög.h
>

15 
	~<°d¨g.h
>

16 
	~<f˙é.h
>

17 
	~<î∫o.h
>

18 
	~<sig«l.h
>

19 
	~<uni°d.h
>

20 
	~<as£π.h
>

21 
	~<dúít.h
>

22 
	~<£m≠h‹e.h
>

23 
	~<sys/vfs.h
>

24 
	~<sys/waô.h
>

25 
	~<sys/mm™.h
>

26 
	~<sys/°©.h
>

27 
	~<sys/time.h
>

28 
	~<sys/mou¡.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/io˘l.h
>

31 
	~<sys/ty≥s.h
>

32 
	~<sys/ªboŸ.h
>

33 
	~<sys/°©fs.h
>

34 
	~<sys/sockë.h
>

35 
	~<sys/sysöfo.h
>

37 
	~<sys/un.h
>

38 
	~<sys/ùc.h
>

39 
	~<sys/shm.h
>

40 
	~<sys/£m.h
>

42 
	~<√t/if.h
>

43 
	~<√t/rouã.h
>

44 
	~<¨∑/öë.h
>

45 
	~<√töë/ö.h
>

47 
	~<löux/fb.h
>

48 
	~<löux/mii.h
>

49 
	~<löux/sockios.h
>

50 
	~<löux/ëhtoﬁ.h
>

51 
	~<löux/π√éök.h
>

53 
	#USB_MAX_DIR
 16

	)

54 
	#MAX_NAME_LEN
 128

	)

56 
	#Gsize
 (1024.0*1024.0*1024.0)

	)

57 
	#Msize
 (1024.0*1024.0)

	)

59 
	#USB_MOUNT_DIR
 "/home/d©a/usb"

	)

60 
	#MOUNT_CMD_PARAM
 "ioch¨£t=˝936"

	)

61 
	#REPAIR_NTFS_USB
 "chk¡f†-Á"

	)

62 
	#USB_CHK_NTFS_OK
 0x1

	)

66 
USB_NONE
,

67 
USB_INSERT
,

68 
USB_REMOVE
,

69 
USB_ERROR


74 
SATA_DEV
,

75 
USB_DEV


76 } 
	tDEVICE_TYPE
;

80 
USB_STATUS_UNKNOWN
 = 0,

81 
USB_STATUS_DISCONNECT
 = 1,

82 
USB_STATUS_CONNECTED
 = 2,

83 
USB_STATUS_MOUNTED
 = 3,

84 
USB_STATUS_MOUNT_FAILED
 = 4,

85 
USB_STATUS_NOMAX
 = 5,

86 
USB_DLGMSG_HIDE
 = 6

87 } 
	tUsbSètus_t
;

91 
DOS
 = 5,

92 
NTFS
,

93 
EXT2
,

94 
UNKNOW
,

95 } 
	tUSB_P¨tôi⁄_Ty≥
;

99 
DEV_NO_READY
,

100 
DEV_READY
,

101 } 
	tDEV_STATUS
;

105 
sync
;

106 
mou¡_«me
[
MAX_NAME_LEN
];

107 
‹igöÆ_«me
[16];

108 
DEV_STATUS
 
°©us
;

109 
DEVICE_TYPE
 
dev_ty≥
;

110 
USB_P¨tôi⁄_Ty≥
 
∑πôi⁄_ty≥
;

111 
size
;

112 
‰ì_size
;

113 } 
	tDEV_ATTRIBUTE
;

115 
USB_Inô
((*
pfNŸifõr
)(
UsbSètus_t
 
°©us
));

116 
USB_Umou¡
();

117 
USB_GëSètus
();

118 
USB_GëAâribuã
(
dev_ödex
, 
DEV_ATTRIBUTE
 *
dev_©å
, 
gë_size_öfo
);

119 
USB_GëAâribuã_In_U£
(
dev_ö_u£_ödex
, 
DEV_ATTRIBUTE
 *
dev_©å
, *
dev_ödex
, 
gë_size_öfo
);

120 
USB_GëPª„ªn˚DevAâribuã
(*
dev_ödex
, 
DEV_ATTRIBUTE
 *
dev_©å
, 
gë_size_öfo
);

121 
USB_Judge_DevTy≥
();

122 
USB_SëAâribuã
(
dev_ödex
, 
DEV_ATTRIBUTE
 *
dev_©å
);

123 
USB_SëSyncFœg
(
dev_ödex
);

124 
USB_GëCurDisk
();

125 
USB_SëCurDisk
(
Curdisk
);

126 
USB_GëDiskP¨tNum
();

127 
USB_GëExôedDisk
();

128 
USB_SëNextVÆidDisk
(
cuºít_disk
);

129 
USB_SëPªvVÆidDisk
(
cuºít_disk
);

131 #ifde‡
__˝lu•lus


	@porting/include/web/svc_control.h

1 #i‚de‡
_SVC_CONTROL_H_


2 
	#_SVC_CONTROL_H_


	)

4 
	~"u£r_deföe.h
"

6 
GOS_S32
 
GOS_SVC_CONTROL_Inô
();

7 
GOS_S32
 
GOS_SVC_CONTROL_DeInô
();

	@porting/include/web/web.h

1 #i‚de‡
__WEB_H__


2 
	#__WEB_H__


	)

4 
	~"u£r_deföe.h
"

6 
	#MAX_CHIP_NUM
 16

7 
	#MAX_TASK_PERCHIP
 5

8 
	#MAX_FILENAME_LEN
 4*1024

9 

	)

12 
	mGOS_SVC_MODEL_TSPARSE
= 0,

13 
	mGOS_SVC_MODEL_OTHER
,

15 
	mGOS_SVC_MODEL_TOTAL


16 }
	tGOS_SVC_Modñ_Ty≥
;

20 
	mGOS_SVC_CMD_TSPARSE_GET_INFO
 = 0,

21 
	mGOS_SVC_CMD_TSPARSE_SET_INFO
,

22 
	mGOS_SVC_CMD_TSPARSE_GET_BITRATE
,

23 
	mGOS_SVC_CMD_TSPARSE_STOP
,

24 
	mGOS_SVC_CMD_TSPARSE_PAUSE
,

25 
	mGOS_SVC_CMD_TSPARSE_GET_STATUS
,

26 
	mGOS_SVC_CMD_TSPARSE_TOTAL


27 }
	tGOS_SVC_CMD_TsP¨£
;

31 
	mGOS_SVC_CMD_OTHER_SOFTWARE_UPGRADE
,

32 
	mGOS_SVC_CMD_OTHER_SYSTEM_SETTING
,

33 
	mGOS_SVC_CMD_OTHER_LANGUAGE_CHOOSE
,

35 
	mGOS_SVC_CMD_OTHER_TOTAL
,

36 }
	tGOS_SVC_CMD_Othî
;

40 
	mE_LANGTYPE_EN
 = 0,

41 
	mE_LANGTYPE_RU
 = 1,

42 
	mE_LANGTYPE_CH
 = 2,

44 
	mE_LANGTYPE_BUTT


47 (*
	tGOS_SVC_CÆlback
Ë(
	tsvc_modñ
, 
	tsvc_cmd
, 
	tªt
, * 
	td©a
, 
	td©a_Àn
, 
	tGOS_BOOL
 
	tÊag
);

48 (*
	tGOS_WEBUI_CÆlback
Ë(
	tGOS_SVC_Modñ_Ty≥
 
	tmodñ
, * 
	td©a
);

58 
GOS_CHAR
 
pfûíame
[64];

59 
GOS_CHAR
 
∑ddr
[32];

60 
GOS_U32
 
p‹t
;

62 
GOS_U8
 
¥Ÿocﬁ
;

63 
GOS_U8
 
°©e
;

64 }
	tGOS_SVC_TsP¨£_Info_t
;

68 
GOS_U8
 
chùID
;

69 
GOS_U8
 
chù_°©e
;

70 
GOS_U32
 
∑ckë_num
;

71 
GOS_CHAR
 
pfûíame
[
MAX_FILENAME_LEN
];

72 
GOS_SVC_TsP¨£_Info_t
 
t•¨£_öfo
[
MAX_TASK_PERCHIP
];

73 }
	tGOS_SVC_TsP¨£_t
;

77 
GOS_U8
 
chùID
;

78 
GOS_U32
 
bôøã
[
MAX_TASK_PERCHIP
];

79 
GOS_U32
 
tŸÆ_bôøã
;

80 }
	tGOS_SVC_TsP¨£_BôR©e_t
;

84 
GOS_SVC_CMD_TsP¨£
 
t•¨£_cmd
;

85 
GOS_SVC_CÆlback
 
ˇŒback
;

86 * 
t•¨£_d©a
;

87 }
	tGOS_SVC_Modñ_TsP¨£
;

97 
GOS_SVC_CMD_Othî
 
Ÿhî_cmd
;

98 
GOS_SVC_CÆlback
 
ˇŒback
;

99 * 
Ÿhî_d©a
;

100 }
	tGOS_SVC_Modñ_Othî
;

107 
	sweb_sockë_d©a_hód


109 
GOS_U16
 
moduÀ_id
;

110 
GOS_U16
 
comm™d_id
;

111 
GOS_U32
 
d©a_Àn
;

112 
GOS_U32
 
d©a_¸c
;

113 }
	tWeb_Sockë_Msg_D©a_Hód
;

115 
GOS_S32
 
	`GOS_WEB_Sœve_Inô
(
GOS_WEBUI_CÆlback
 
ˇŒback
);

116 
GOS_S32
 
	`GOS_WEB_Inô
(
GOS_WEBUI_CÆlback
 
ˇŒback
);

117 
GOS_S32
 
	`GOS_WEB_DeInô
();

	@porting/src/crc/crc.c

1 
	~"¸c.h
"

3 
	#CRC16_MAX_COEFFICIENTS
 256

	)

4 
	#CRC32_MAX_COEFFICIENTS
 256

	)

5 
	#CRC16_POLYNOMIAL
 0x1021

	)

6 
	#CRC32_POLYNOMIAL
 0x04C11DB7

	)

7 
	#CRC32_SIZE
 4

	)

8 
	#CRC16_SIZE
 2

	)

10 
	#DO1
(
buf
Ë
¸c
 = 
¸c_èbÀ
[(()¸¯^ (*buf++)Ë& 0xff] ^ (¸¯>> 8);

	)

11 
	#DO2
(
buf
Ë
	`DO1
(buf); DO1(buf);

	)

12 
	#DO4
(
buf
Ë
	`DO2
(buf); DO2(buf);

	)

13 
	#DO8
(
buf
Ë
	`DO4
(buf); DO4(buf);

	)

17 
GOS_U16
 
	gCRC_¸c16_èbÀ
[
CRC16_MAX_COEFFICIENTS
];

18 
GOS_U32
 
	gCRC_¸c32_èbÀ
[
CRC32_MAX_COEFFICIENTS
];

20 
	g¸c_èbÀ
[256] = {

75 
GOS_S32
 
	$GOS_CRC_Inô
()

77 
GOS_U32
 
lo›C¡C€f
;

78 
GOS_U32
 
lo›C¡Bô
;

79 
GOS_U16
 
c€f16
;

80 
GOS_U32
 
c€f32
;

82 
lo›C¡C€f
 = 0;Üo›C¡C€‡< 
CRC16_MAX_COEFFICIENTS
;ÜoopCntCoef++)

84 
c€f16
 = (
GOS_U16
)
lo›C¡C€f
 << 8;

85 
lo›C¡Bô
 = 0;ÜoopCntBit < 8;ÜoopCntBit++)

87 i‡(
c€f16
 & 0x8000)

88 
c€f16
 = ((c€f16 << 1Ë^ 
CRC16_POLYNOMIAL
);

90 
c€f16
 <<= 1;

92 
CRC_¸c16_èbÀ
[
lo›C¡C€f
] = 
c€f16
;

95 
lo›C¡C€f
 = 0;Üo›C¡C€‡< 
CRC32_MAX_COEFFICIENTS
;ÜoopCntCoef++)

97 
c€f32
 = 
lo›C¡C€f
 << 24;

98 
lo›C¡Bô
=0;ÜoopCntBit<8;ÜoopCntBit++)

100 i‡(
c€f32
 & 0x80000000)

101 
c€f32
 = ((c€f32 << 1Ë^ 
CRC32_POLYNOMIAL
);

103 
c€f32
 <<= 1;

105 
CRC_¸c32_èbÀ
[
lo›C¡C€f
] = 
c€f32
;

108  
GOS_SUCCESS
;

109 
	}
}

132 
	$GOS_CRC_16bCÆcuœã
(
GOS_U8
 *
buf„r
, 
GOS_U32
 
size
, 
GOS_U16
 *
CRC16
)

134 
GOS_U16
 
¸c16
 = 0x0000;

135 
GOS_U32
 
˙tByã
;

137 
˙tByã
 = 0; c¡Byã < 
size
; cntByte++)

138 
¸c16
 = (¸c16 << 8 ) ^ 
CRC_¸c16_èbÀ
[((¸c16 >> 8Ë^ *
buf„r
++) & 0xFF];

139 *
CRC16
 = 
¸c16
;

141 
	}
}

165 
	$GOS_CRC_32bCÆcuœã
(
GOS_U8
 *
buf„r
, 
GOS_U32
 
size
, GOS_U32 *
CRC32
)

167 
GOS_U32
 
¸c32
 = 0xFFFFFFFF;

168 
GOS_U32
 
˙tByã
;

170 
˙tByã
 = 0; c¡Byã < 
size
; cntByte++)

172 
¸c32
 = (¸c32 << 8 ) ^ 
CRC_¸c32_èbÀ
[((¸c32 >> 24Ë^ *
buf„r
++) & 0xFF];

174 *
CRC32
 = 
¸c32
;

176 
	}
}

179 
GOS_U32
 
	$GOS_CRC_Crc32
 (
GOS_U32
 
¸c
, c⁄° 
GOS_U8
* 
buf
, GOS_U32 
Àn
)

181 
¸c
 = crc ^ 0xffffffffL;

182 
Àn
 >= 8)

184 
	`DO8
(
buf
);

185 
Àn
 -= 8;

187 i‡(
Àn
) do {

188 
	`DO1
(
buf
);

189 } --
Àn
);

191  
¸c
 ^ 0xffffffffL;

192 
	}
}

	@porting/src/linuxos/linuxos.c

17 
	~<time.h
>

18 
	~"löuxos.h
"

19 
	~"löuxli°.h
"

20 
	~"mesßge.h
"

24 
	sMsgLi°


26 
li°_hód
 
	m°Li°
;

27 
	mQueName
[32];

28 
OS_MesßgeQueue_t
 *
	mMsgH™dÀ
;

29 } 
	t°MsgLi°
, *
	tp°MsgLi°
;

31 
li°_hód
 
	ggLi°Hód
 = 
LIST_HEAD_INIT
(
gLi°Hód
);

37 
OS_Sem≠h‹e_t
 *
	$OS_Cª©eSem≠h‹e
(c⁄° 
InôülVÆue
)

39 
OS_Sem≠h‹e_t
 *
Sem≠h‹e_p
 = 
NULL
;

41 
Sem≠h‹e_p
 = (
OS_Sem≠h‹e_t
 *)
	`OS_AŒocMem‹y
((OS_Semaphore_t));

43 i‡(
Sem≠h‹e_p
 !
NULL
)

45 i‡(
	`£m_öô
(
Sem≠h‹e_p
, 0, 
InôülVÆue
))

47 
	`OS_FªeMem‹y
(
Sem≠h‹e_p
);

48  
NULL
;

52  
Sem≠h‹e_p
;

53 
	}
}

55 
GOS_BOOL
 
	$OS_DñëeSem≠h‹e
(
OS_Sem≠h‹e_t
 *
Sem≠h‹e_p
)

57 i‡(
Sem≠h‹e_p
 !
NULL
)

59 
	`£m_de°roy
(
Sem≠h‹e_p
);

60 
	`OS_FªeMem‹y
(
Sem≠h‹e_p
);

64  
GOS_FALSE
;

67  
GOS_TRUE
;

68 
	}
}

70 
GOS_BOOL
 
	$OS_Sig«lSem≠h‹e
(
OS_Sem≠h‹e_t
 *
Sem≠h‹e_p
)

72 i‡(
Sem≠h‹e_p
 !
NULL
)

74 
	`£m_po°
(
Sem≠h‹e_p
);

75  
GOS_TRUE
;

78  
GOS_FALSE
;

79 
	}
}

81 
GOS_BOOL
 
	$OS_WaôSem≠h‹e
(
OS_Sem≠h‹e_t
 *
Sem≠h‹e_p
)

83 i‡(
Sem≠h‹e_p
 !
NULL
)

85  (
	`£m_waô
(
Sem≠h‹e_p
Ë=0Ë? 
GOS_TRUE
 : 
GOS_FALSE
;

88  
GOS_FALSE
;

89 
	}
}

91 
GOS_BOOL
 
	$OS_WaôSem≠h‹eTimeOut
(
OS_Sem≠h‹e_t
 *
Sem≠h‹e_p
, 
GOS_U32
 
TimeOutMs
)

93 
time•ec
 
time_vÆue
;

95 i‡(
Sem≠h‹e_p
 !
NULL
)

97 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
time_vÆue
);

98 
time_vÆue
.
tv_£c
 +
TimeOutMs
 / 1000;

100 i‡((
time_vÆue
.
tv_n£c
 / 1000000 + 
TimeOutMs
 % 1000) >= 1000)

102 
time_vÆue
.
tv_£c
 += 1;

103 
time_vÆue
.
tv_n£c
 -(1000 - (
TimeOutMs
 % 1000)) * 1000000;

107 
time_vÆue
.
tv_n£c
 +(
TimeOutMs
 % 1000) * 1000000;

110 i‡(
	`£m_timedwaô
(
Sem≠h‹e_p
, &
time_vÆue
) == 0)

112  
GOS_TRUE
;

116  
GOS_FALSE
;

117 
	}
}

119 
GOS_BOOL
 
	$OS_GëSem≠h‹eVÆue
(
OS_Sem≠h‹e_t
 *
Sem≠h‹e_p
, *
svÆ
)

121 i‡(
Sem≠h‹e_p
 !
NULL
)

123 
	`£m_gëvÆue
(
Sem≠h‹e_p
, 
svÆ
);

124  
GOS_TRUE
;

127  
GOS_FALSE
;

128 
	}
}

133 
OS_MesßgeQueue_t
 *
	$OS_Cª©eMesßgeQueue
(c⁄° *
Q«me
, 
EÀmítSize
, 
NoEÀmíts
)

135 
li°_hód
 *
p°Pos
 = 
NULL
;

136 
°MsgLi°
 *
p°MsgLi°
 = 
NULL
;

137 
°MSG_QUEUE_S
 *
p°MsgQueue
 = 
NULL
;

139 
	`li°_f‹_óch
(
p°Pos
, &
gLi°Hód
)

141 
p°MsgLi°
 = 
	`li°_íåy
(
p°Pos
, 
°MsgLi°
, 
°Li°
);

143 i‡(
p°MsgLi°
 && !
	`memcmp
’°MsgLi°->
QueName
, 
Q«me
, 
	`°æí
(Qname)))

145  
p°MsgLi°
->
MsgH™dÀ
;

149 i‡(
GOS_FAILURE
 !
	`MsgQueue_Cª©e
(&
p°MsgQueue
, 
EÀmítSize
, 
NoEÀmíts
))

151 
p°MsgLi°
 = (
°MsgLi°
 *)
	`OS_AŒocMem‹y
((stMsgList));

153 i‡(
p°MsgLi°
 =
NULL
)

155  
NULL
;

158 
	`°∫˝y
(
p°MsgLi°
->
QueName
, 
Q«me
, 
	`°æí
(Qname));

159 
p°MsgLi°
->
MsgH™dÀ
 = (
OS_MesßgeQueue_t
 *)
p°MsgQueue
;

161 
	`li°_add_èû
(&(
p°MsgLi°
->
°Li°
), &
gLi°Hód
);

164  (
OS_MesßgeQueue_t
 *)(
p°MsgQueue
);

165 
	}
}

167 
GOS_S32
 
	$OS_DñëeMesßgeQueue
(
OS_MesßgeQueue_t
 *
MsgQueue_p
)

169 
li°_hód
 *
p°Pos
 = 
NULL
;

170 
°MsgLi°
 *
p°MsgLi°
 = 
NULL
;

172 
	`li°_f‹_óch
(
p°Pos
, &
gLi°Hód
)

174 
p°MsgLi°
 = 
	`li°_íåy
(
p°Pos
, 
°MsgLi°
, 
°Li°
);

176 i‡(
p°MsgLi°
 &&Ö°MsgLi°->
MsgH™dÀ
 =
MsgQueue_p
)

178 
p°MsgLi°
->
MsgH™dÀ
 = 
NULL
;

179 
	`mem£t
(
p°MsgLi°
->
QueName
, 0, (pstMsgList->QueName));

180 
	`li°_dñ
(&(
p°MsgLi°
->
°Li°
));

182 
	`OS_FªeMem‹y
(
p°MsgLi°
);

183 
	`MsgQueue_De°‹y
((
p°MSG_QUEUE_S
)
MsgQueue_p
);

188  
GOS_SUCCESS
;

189 
	}
}

191 
GOS_S32
 
	$OS_Rñó£MesßgeBuf„r
(
OS_MesßgeQueue_t
 *
MsgQueue_p
, 
GOS_VOID
 *
Msg_p
)

193  
GOS_SUCCESS
;

194 
	}
}

196 
GOS_VOID
 *
	$OS_Re˚iveMesßge
(
OS_MesßgeQueue_t
 *
MsgQueue_p
)

198 
li°_hód
 *
p°Pos
 = 
NULL
;

199 
°MsgLi°
 *
p°MsgLi°
 = 
NULL
;

200 
°MESSAGE_S
 
°Msg
;

202 
	`li°_f‹_óch
(
p°Pos
, &
gLi°Hód
)

204 
p°MsgLi°
 = 
	`li°_íåy
(
p°Pos
, 
°MsgLi°
, 
°Li°
);

206 i‡(
p°MsgLi°
 &&Ö°MsgLi°->
MsgH™dÀ
 =
MsgQueue_p
)

208 i‡(
GOS_FAILURE
 =
	`MsgQueue_De
((
p°MSG_QUEUE_S
)
MsgQueue_p
, &
°Msg
))

210  
NULL
;

215  ((
GOS_VOID
 *)
°Msg
.
pu8MsgD©a
);

216 
	}
}

218 
GOS_S32
 
	$OS_FlushMesßge
(
OS_MesßgeQueue_t
 *
MsgQueue_p
)

220 
li°_hód
 *
p°Pos
 = 
NULL
;

221 
°MsgLi°
 *
p°MsgLi°
 = 
NULL
;

223 
	`li°_f‹_óch
(
p°Pos
, &
gLi°Hód
)

225 
p°MsgLi°
 = 
	`li°_íåy
(
p°Pos
, 
°MsgLi°
, 
°Li°
);

227 i‡(
p°MsgLi°
 &&Ö°MsgLi°->
MsgH™dÀ
 =
MsgQueue_p
)

229 i‡(
GOS_FAILURE
 =
	`MsgQueue_Flush
((
p°MSG_QUEUE_S
)
MsgQueue_p
))

231  
GOS_FAILURE
;

236  
GOS_SUCCESS
;

237 
	}
}

239 
GOS_VOID
 *
	$OS_Re˚iveMesßgeTimeOut
(
OS_MesßgeQueue_t
 *
MsgQueue_p
, 
TimeOutMs
)

241 
li°_hód
 *
p°Pos
 = 
NULL
;

242 
°MsgLi°
 *
p°MsgLi°
 = 
NULL
;

243 
°MESSAGE_S
 
°Msg
;

245 
	`li°_f‹_óch
(
p°Pos
, &
gLi°Hód
)

247 
p°MsgLi°
 = 
	`li°_íåy
(
p°Pos
, 
°MsgLi°
, 
°Li°
);

249 i‡(
p°MsgLi°
 &&Ö°MsgLi°->
MsgH™dÀ
 =
MsgQueue_p
)

251 i‡(
GOS_FAILURE
 =
	`MsgQueue_DeTimeOut
((
p°MSG_QUEUE_S
)
MsgQueue_p
, &
°Msg
, 
TimeOutMs
))

253  
NULL
;

258  ((
GOS_VOID
 *)
°Msg
.
pu8MsgD©a
);

259 
	}
}

261 
GOS_S32
 
	$OS_SídMesßge
(
OS_MesßgeQueue_t
 *
MsgQueue_p
, 
GOS_VOID
 *
Msg_p
, 
Msg_Size
, 
Pri‹ôy
)

263 
li°_hód
 *
p°Pos
 = 
NULL
;

264 
°MsgLi°
 *
p°MsgLi°
 = 
NULL
;

265 
°MESSAGE_S
 
°Msg
;

267 
°Msg
.
pu8MsgD©a
 = (*)
	`OS_AŒocMem‹y
(
Msg_Size
);

269 i‡(!
°Msg
.
pu8MsgD©a
)

271 
	`LOG_OUTPUTF
(
E_LOG_LEVELINFO
,"OS_AllocMemory Failed!\n");

275 
°Msg
.
u16MsgLígth
 = 
Msg_Size
;

276 
	`mem˝y
((*)
°Msg
.
pu8MsgD©a
, (c⁄° *)
Msg_p
, 
Msg_Size
);

278 
	`li°_f‹_óch
(
p°Pos
, &
gLi°Hód
)

280 
p°MsgLi°
 = 
	`li°_íåy
(
p°Pos
, 
°MsgLi°
, 
°Li°
);

282 i‡(
p°MsgLi°
 &&Ö°MsgLi°->
MsgH™dÀ
 =
MsgQueue_p
)

284 i‡(
GOS_FAILURE
 =
	`MsgQueue_En
((
p°MSG_QUEUE_S
)
MsgQueue_p
, &
°Msg
))

286 
	`OS_FªeMem‹y
(
°Msg
.
pu8MsgD©a
);

287  
GOS_FAILURE
;

292 
	`OS_FªeMem‹y
(
°Msg
.
pu8MsgD©a
);

294  
GOS_SUCCESS
;

295 
	}
}

297 
OS_Muãx_t
 *
	$OS_Cª©eMuãxFifo
(
GOS_VOID
)

299 
OS_Muãx_t
 *
Muãx_p
;

301 
Muãx_p
 = (
OS_Muãx_t
 *)
	`OS_AŒocMem‹y
((OS_Mutex_t));

303 i‡(
Muãx_p
 !
NULL
)

305 
	`±hªad_muãx_öô
(
Muãx_p
, 
NULL
);

308  
Muãx_p
;

309 
	}
}

311 
GOS_BOOL
 
	$OS_DñëeMuãx
(
OS_Muãx_t
 *
Muãx_p
)

313 i‡(
Muãx_p
 !
NULL
)

315 
	`±hªad_muãx_de°roy
(
Muãx_p
);

316 
	`OS_FªeMem‹y
(
Muãx_p
);

317  
GOS_TRUE
;

320  
GOS_FALSE
;

321 
	}
}

323 
GOS_BOOL
 
	$OS_LockMuãx
(
OS_Muãx_t
 *
Muãx_p
)

325 i‡(
Muãx_p
 !
NULL
)

327 
	`±hªad_muãx_lock
(
Muãx_p
);

328  
GOS_TRUE
;

331  
GOS_FALSE
;

332 
	}
}

334 
GOS_BOOL
 
	$OS_U∆ockMuãx
(
OS_Muãx_t
 *
Muãx_p
)

336 i‡(
Muãx_p
 !
NULL
)

338 
	`±hªad_muãx_u∆ock
(
Muãx_p
);

339  
GOS_TRUE
;

342  
GOS_FALSE
;

343 
	}
}

348 
GOS_BOOL
 
	$OS_Cª©eTask
(
GOS_VOID
 *
Fun˘i⁄
, GOS_VOID *
P¨am
, 
OS_Task_H™dÀ_t
 *
Task
)

350 
ªsu…
;

352 
ªsu…
 = 
	`±hªad_¸óã
(
Task
, 
NULL
, (
GOS_VOID
 *)
Fun˘i⁄
, 
P¨am
);

354 i‡(
ªsu…
 != 0)

356  
GOS_FALSE
;

359  
GOS_TRUE
;

360 
	}
}

362 
GOS_BOOL
 
	$OS_DñëeTask
 (
OS_Task_H™dÀ_t
 
Task
)

364 
ªsu…
 = 0;

366 i‡(
Task
)

368 i‡(!
	`±hªad_joö
(
Task
, 
NULL
))

370 
ªsu…
 = 
	`±hªad_ˇn˚l
(
Task
);

374  
ªsu…
;

375 
	}
}

381 
GOS_VOID
 
	$OS_DñayTaskMs
(
mûli£c⁄
)

383 
	`u¶ìp
(1000 * 
mûli£c⁄
);

384 
	}
}

387 
GOS_U32
 
	$OS_TimeNow
(
GOS_VOID
)

389 
GOS_U32
 
ªtvÆ
;

390 
timevÆ
 
time_vÆue
;

392 
	`gëtimeofday
(&
time_vÆue
, 
NULL
);

394 
ªtvÆ
 = 
time_vÆue
.
tv_£c
 * 1000 +Åime_vÆue.
tv_u£c
 / 1000;

396  (
ªtvÆ
);

397 
	}
}

400 
GOS_VOID
 
	$OS_Prötf_Buf„r
(*
buf„r
, 
Àngth
)

402 
	`¥ötf
("******************************\n");

403 
ii
 = 0, 
jj
 = 0;

405 
ii
 = 0; iò< 
Àngth
 / 16 + 1; ii++)

407 
jj
 = 0; jj < 16; jj++)

409 i‡((
ii
 * 16 + 
jj
Ë>
Àngth
)

414 
	`¥ötf
("0x%02x ", 
buf„r
[
ii
 * 16 + 
jj
]);

417 
	`¥ötf
("\n");

420 
	`¥ötf
("******************************\n");

421 
	}
}

	@porting/src/linuxos/log.c

1 
	~"löuxos.h
"

2 
	~"log.h
"

4 
	#PRINTF_COL_GREEN
 "\033[1;32m"

	)

5 
	#PRINTF_COL_BLUE
 "\033[1;34m"

	)

6 
	#PRINTF_COL_RED
 "\033[1;31m"

	)

7 
	#PRINTF_COL_NONE
 "\033[0m"

	)

9 
	#LOG_PRINTF
 
¥ötf


	)

12 
	#LOG_CFG_FILE
 "/tmp/log.öi"

	)

15 
	#LOG_SIZE_MAX
 256

	)

18 
	#MODULE_NAME_LEN
 16

	)

21 
	#MODULE_ALL_NAME
 "ALL"

	)

25 
	mcModName
[
MODULE_NAME_LEN
];

26 
LOG_LEVEL_E
 
	meLogLevñ
;

27 } 
	tLOG_CFG_S
;

29 
FILE
 *
	ggLogFûïå
 = 
NULL
;

30 
GOS_BOOL
 
	ggLogModInô
 = 
GOS_FALSE
;

31 
LOG_CFG_S
 
	g°LogCfgInfo
[
eOS_MODULE_BUTT
];

33 
GOS_S32
 
	$log_add_moduÀ
(
mod_id
, *
mod_«me
, 
LOG_LEVEL_E
 
log_Àvñ
)

35 i‡(
eOS_MODULE_BUTT
 <
mod_id
)

37 
	`LOG_PRINTF
("[%s][%d]ThêModuÀ ID i†övaûd...\n", 
__FUNCTION__
, 
__LINE__
);

38  
GOS_FAILURE
;

41 i‡((!
mod_«me
Ë|| (
log_Àvñ
 >
E_LOG_LEVELBUTT
))

43 
	`LOG_PRINTF
("[%s][%d]PÀa£ check i≈uà∑øm...\n", 
__FUNCTION__
, 
__LINE__
);

44  
GOS_FAILURE
;

47 
	`°∫˝y
(
°LogCfgInfo
[
mod_id
].
cModName
, 
mod_«me
, 
	`°æí
(mod_name));

48 
°LogCfgInfo
[
mod_id
].
eLogLevñ
 = 
log_Àvñ
;

50  
GOS_SUCCESS
;

51 
	}
}

53 
GOS_S32
 
	$log_¸ót_cfg_fûe
(*
cfg_∑th
)

55 
ödex
 = 0;

56 
buf„r
[
MODULE_NAME_LEN
 * 2];

57 
FILE
 *
Â_log
 = 
NULL
;

59 i‡(
NULL
 =(
Â_log
 = 
	`f›í
(
cfg_∑th
, "wb")))

61 
	`LOG_PRINTF
("[%s][%d]O≥¿log cfg fûêÁûuª\n", 
__FUNCTION__
, 
__LINE__
);

62  
GOS_FAILURE
;

65 
ödex
 = 0; index < 
eOS_MODULE_BUTT
; index++)

67 i‡(
°LogCfgInfo
[
ödex
].
cModName
)

69 
	`mem£t
(
buf„r
, 0, (buffer));

70 
	`¢¥ötf
(
buf„r
, 32, "%s=%d\n", 
°LogCfgInfo
[
ödex
].
cModName
, stLogCfgInfo[ödex].
eLogLevñ
);

71 
	`Âuts
(
buf„r
, 
Â_log
);

75 
	`Âuts
("\n*********Levñ*********\n", 
Â_log
);

76 
	`Âuts
("Eº‹:1 W¨ög:2 Info:3", 
Â_log
);

77 
	`Âuts
("\n***********************\n", 
Â_log
);

79 
	`f˛o£
(
Â_log
);

81  
GOS_SUCCESS
;

82 
	}
}

84 
GOS_S32
 
	$log_∑r£_cfg_fûe
(*
cfg_∑th
)

86 
ödex
 = 0;

87 
buf„r
[
MODULE_NAME_LEN
 * 2];

88 
FILE
 *
Â_log
 = 
NULL
;

90 i‡(
NULL
 =(
Â_log
 = 
	`f›í
(
cfg_∑th
, "rb")))

92 
	`LOG_PRINTF
("[%s][%d]O≥¿log cfg fûêÁûuª\n", 
__FUNCTION__
, 
__LINE__
);

93  
GOS_FAILURE
;

96 !
	`„of
(
Â_log
))

98 *
±r
 = 
	`fgës
(
buf„r
, (buf„r), 
Â_log
);

100 i‡(
±r
)

102 
ödex
 = 0; index < 
eOS_MODULE_BUTT
; index++)

104 i‡(!
	`memcmp
(
°LogCfgInfo
[
ödex
].
cModName
, 
buf„r
, 
	`°æí
(stLogCfgInfo[index].cModName)))

106 
°LogCfgInfo
[
ödex
].
eLogLevñ
 = 
E_LOG_LEVELINFO
;

108 *
±r
 = 
	`°rchr
(
buf„r
, '=');

110 i‡(
±r
)

112 
±r
++;

114 i‡(
	`©oi
(
±r
Ë< 
E_LOG_LEVELBUTT
)

116 
°LogCfgInfo
[
ödex
].
eLogLevñ
 = 
	`©oi
(
±r
);

126 
	`f˛o£
(
Â_log
);

128  
GOS_SUCCESS
;

129 
	}
}

131 
GOS_BOOL
 
	$log_Àvñ_check
(
GOS_S32
 
s32LevÀ
, 
GOS_U32
 
u32ModId
)

133 i‡(
GOS_FALSE
 =
gLogModInô
)

135  
GOS_TRUE
;

138 i‡(
°LogCfgInfo
[
eOS_MODULE_NULL
].
eLogLevñ
 >
E_LOG_LEVELINFO
)

140  
GOS_TRUE
;

143 i‡((
u32ModId
 >
eOS_MODULE_BUTT
) ||

144 (
s32LevÀ
 > (
GOS_S32
)
°LogCfgInfo
[
u32ModId
].
eLogLevñ
))

146  
GOS_FALSE
;

149  
GOS_TRUE
;

150 
	}
}

152 
	$log_Àvñ_cﬁour
(
GOS_S32
 
s32LevÀ
)

154 
s32LevÀ
)

156 
E_LOG_LEVELERROR
:

157 
	`LOG_PRINTF
(
PRINTF_COL_RED
);

160 
E_LOG_LEVELWARING
:

161 
	`LOG_PRINTF
(
PRINTF_COL_GREEN
);

165 
	`LOG_PRINTF
(
PRINTF_COL_NONE
);

168 
	}
}

170 
	$log_ouçut2usb
(*
∑øm
)

172 
cou¡
 = 0;

174 
gLogFûïå
)

176 i‡(
cou¡
++ > 5)

178 
	`fÊush
(
gLogFûïå
);

179 
cou¡
 = 0;

182 
	`u¶ìp
(200 * 1000);

186 
	}
}

196 
GOS_S32
 
	$LOG_Inô
()

198 
GOS_S32
 
s32Rë
 = 
GOS_SUCCESS
;

200 i‡(
gLogModInô
)

202 
	`LOG_PRINTF
("The Module ofÜog have initializated...\n");

203  
s32Rë
;

207 
	`log_add_moduÀ
(
eOS_MODULE_NULL
, 
MODULE_ALL_NAME
, 
E_LOG_LEVELINFO
);

210 i‡(
GOS_SUCCESS
 =
	`ac˚ss
(
LOG_CFG_FILE
, 
F_OK
))

212 
s32Rë
 = 
	`log_∑r£_cfg_fûe
(
LOG_CFG_FILE
);

216 
s32Rë
 = 
	`log_¸ót_cfg_fûe
(
LOG_CFG_FILE
);

219 i‡(
GOS_SUCCESS
 =
s32Rë
)

221 
gLogModInô
 = 
GOS_TRUE
;

222 
	`LOG_PRINTF
("The Module ofÜog initializate success...\n");

225  
s32Rë
;

226 
	}
}

236 
GOS_S32
 
	$LOG_DeInô
()

238 
ödex
 = 0;

240 
ödex
 = 0; index < 
eOS_MODULE_BUTT
; index++)

242 i‡(
°LogCfgInfo
[
ödex
].
cModName
)

244 
°LogCfgInfo
[
ödex
].
eLogLevñ
 = 
E_LOG_LEVELINFO
;

248 
gLogModInô
 = 
GOS_FALSE
;

250  
GOS_SUCCESS
;

251 
	}
}

267 
GOS_S32
 
	$LOG_Ouçutf
(
GOS_U32
 
u32ModID
, 
LOG_LEVEL_E
 
íEºLevñ
, 
GOS_S32
 
íoEºno
,

268 c⁄° *
pszProgømFûeName
, c⁄° *
pszProgømFun˘i⁄Name
, 
GOS_S32
 
s32ProgømLöeNo
,

269 c⁄° *
pszF‹m©
, ...)

271 
va_li°
 
¨gs
;

272 
GOS_S32
 
MsgLí
 = 0;

273 
GOS_BOOL
 
bLevñ
 = 
GOS_FALSE
;

274 
log_°r
[
LOG_SIZE_MAX
] = {0};

276 i‡(
GOS_FALSE
 !
gLogModInô
)

278 
bLevñ
 = 
	`log_Àvñ_check
(
íEºLevñ
, 
u32ModID
);

281 i‡((
GOS_FALSE
 =
gLogModInô
Ë|| 
bLevñ
)

283 
	`va_°¨t
(
¨gs
, 
pszF‹m©
);

284 
MsgLí
 = 
	`v¢¥ötf
(
log_°r
, 
LOG_SIZE_MAX
, 
pszF‹m©
, 
¨gs
);

285 
	`va_íd
(
¨gs
);

287 i‡(
MsgLí
 >
LOG_SIZE_MAX
)

289 
log_°r
[
LOG_SIZE_MAX
 - 1] = '\0';

290 
log_°r
[
LOG_SIZE_MAX
 - 2] = '\n';

291 
log_°r
[
LOG_SIZE_MAX
 - 3] = '.';

292 
log_°r
[
LOG_SIZE_MAX
 - 4] = '.';

293 
log_°r
[
LOG_SIZE_MAX
 - 5] = '.';

296 
	`log_Àvñ_cﬁour
(
íEºLevñ
);

297 
	`LOG_PRINTF
("%†%s[%d]:%s", 
pszProgømFûeName
, 
pszProgømFun˘i⁄Name
, 
s32ProgømLöeNo
, 
log_°r
);

298 
	`LOG_PRINTF
(
PRINTF_COL_NONE
);

300 i‡(
GOS_FALSE
 =
gLogModInô
)

302  
GOS_FAILURE
;

305 i‡(
bLevñ
)

307  
GOS_SUCCESS
;

311  
GOS_FAILURE
;

312 
	}
}

325 
GOS_S32
 
	$LOG_SëAŒowOuçut
(
GOS_U32
 
u32ModID
, 
LOG_LEVEL_E
 
íEºLevñ
)

327 i‡((
u32ModID
 >
eOS_MODULE_BUTT
Ë|| (
íEºLevñ
 >
E_LOG_LEVELBUTT
))

329 
	`LOG_PRINTF
("[%s][%d]PÀa£ check i≈uà∑øm...\n", 
__FUNCTION__
, 
__LINE__
);

330  
GOS_FAILURE
;

333 
°LogCfgInfo
[
u32ModID
].
eLogLevñ
 = 
íEºLevñ
;

335  
GOS_SUCCESS
;

336 
	}
}

346 
GOS_S32
 
	$LOG_SèπOuçutToUSB
(*
UsbP©h
)

348 
GOS_S32
 
s32Rë
 = 
GOS_SUCCESS
;

349 
±hªad_t
 
logthªad
;

351 i‡(
UsbP©h
)

353 i‡((
gLogFûïå
 = 
	`‰e›í
(
UsbP©h
, "w+", 
°dout
)Ë=
NULL
)

355 
	`LOG_PRINTF
("----------------ioÉrr----------------\n");

356  
GOS_FAILURE
;

359 
s32Rë
 = 
	`±hªad_¸óã
(&
logthªad
, 
NULL
, (*)
log_ouçut2usb
, 
UsbP©h
);

361 
	`LOG_PRINTF
("startÑecordÜogÅoÜog.txt...\n");

364  
s32Rë
;

365 
	}
}

375 
GOS_S32
 
	$LOG_St›OuçutToUSB
()

377 
gLogFûïå
 = 
NULL
;

379 i‡(
NULL
 =(
	`‰e›í
("/dev/c⁄sﬁe", "w", 
°dout
)))

381  
GOS_FAILURE
;

384 
	`LOG_PRINTF
("stopÑecordÜogÅoÜog.txt...\n");

386  
GOS_SUCCESS
;

387 
	}
}

	@porting/src/linuxos/message.c

1 
	~"löuxos.h
"

2 
	~"mesßge.h
"

4 
	#MIN_GAP
 (64Ë

	)

6 
GOS_S32
 
	$IsEm±yQueue
(
°MSG_QUEUE_S
 *
p°MsgQueue
)

8 i‡(
p°MsgQueue
->
p°MsgRór
 =p°MsgQueue->
p°MsgFr⁄t
)

10  
GOS_SUCCESS
;

13  
GOS_FAILURE
;

14 
	}
}

16 
GOS_S32
 
	$IsFuŒQueue
(
°MSG_QUEUE_S
 *
p°MsgQueue
)

18 
GOS_U32
 
u32Sãp
 = (
°MESSAGE_S
Ë+ 
p°MsgQueue
->
p°MsgRór
->
u16MsgLígth
;

20 
GOS_U32
 
u32RemaöS∑˚
 = 0;

22 i‡(
p°MsgQueue
->
p°MsgRór
 >p°MsgQueue->
p°MsgFr⁄t
)

24 
u32RemaöS∑˚
 = ((
GOS_U32
)
p°MsgQueue
->
pu8Ba£Addr
 +Ö°MsgQueue->
u32MaxLí
Ë- (GOS_U32Ì°MsgQueue->
p°MsgRór
;

26 i‡((
GOS_U32
)
p°MsgQueue
->
p°MsgFr⁄t
 > (GOS_U32Ì°MsgQueue->
pu8Ba£Addr
)

28 
u32RemaöS∑˚
 +((
GOS_U32
)
p°MsgQueue
->
p°MsgFr⁄t
 - 
MIN_GAP
 - (GOS_U32Ì°MsgQueue->
pu8Ba£Addr
);

32 
u32RemaöS∑˚
 -
MIN_GAP
;

37 
u32RemaöS∑˚
 = (
GOS_U32
)
p°MsgQueue
->
p°MsgFr⁄t
 - 
MIN_GAP
 - (GOS_U32Ì°MsgQueue->
p°MsgRór
;

40 i‡(
u32Sãp
 > 
u32RemaöS∑˚
)

43  
GOS_SUCCESS
;

46  
GOS_FAILURE
;

47 
	}
}

49 
GOS_S32
 
	$MsgQueueEn
(
°MSG_QUEUE_S
 *
p°MsgQueue
, 
°MESSAGE_S
 *
p°Msg
)

51 
GOS_U32
 
u32IãmSize
 = 0;

52 
GOS_U32
 
u32D©aTy≥Size
 = (
°MESSAGE_S
);

53 
°MESSAGE_S
 *
p°NextMsgAddr
 = 
GOS_NULL
;

54 
°MSG_QUEUE_S
 *
pMsgQueue
 = 
p°MsgQueue
;

56 i‡((
p°Msg
 =
GOS_NULL
Ë|| (
pMsgQueue
->
pu8Ba£Addr
 == GOS_NULL))

58  
GOS_FAILURE
;

61 
pMsgQueue
->
p°MsgRór
->
u16MsgLígth
 = 
p°Msg
->u16MsgLength;

63 i‡(
	`IsFuŒQueue
(
pMsgQueue
Ë=
GOS_SUCCESS
)

65  
GOS_FAILURE
;

68 
u32IãmSize
 = 
u32D©aTy≥Size
 + 
p°Msg
->
u16MsgLígth
;

70 i‡(((
GOS_U32
)
pMsgQueue
->
p°MsgRór
 + 
u32IãmSize
Ë> ((GOS_U32ÌMsgQueue->
pu8Ba£Addr
 +ÖMsgQueue->
u32MaxLí
))

72 
pMsgQueue
->
p°MsgRór
->
pu8MsgD©a
 = (
GOS_U8
 *ÌMsgQueue->
pu8Ba£Addr
 + 
u32D©aTy≥Size
;

76 
pMsgQueue
->
p°MsgRór
->
pu8MsgD©a
 = (
GOS_U8
 *)((
GOS_U32
ÌMsgQueue->p°MsgRó∏+ 
u32D©aTy≥Size
);

78 
pMsgQueue
->
p°MsgRór
->
u16MsgLígth
 = 
p°Msg
->u16MsgLength;

79 
	`mem˝y
(
pMsgQueue
->
p°MsgRór
->
pu8MsgD©a
, 
p°Msg
->pu8MsgD©a,Ö°Msg->
u16MsgLígth
);

80 
p°NextMsgAddr
 = (
°MESSAGE_S
 *)((
GOS_U32
)
pMsgQueue
->
p°MsgRór
 + 
u32IãmSize
);

81 i‡(((
GOS_U32
)
p°NextMsgAddr
Ë> ((GOS_U32)
pMsgQueue
->
pu8Ba£Addr
 +ÖMsgQueue->
u32MaxLí
))

83 
p°NextMsgAddr
 = (
°MESSAGE_S
 *)((
GOS_U8
*)
pMsgQueue
->
pu8Ba£Addr
 + 
u32IãmSize
);

85 i‡–(
GOS_U32
)
p°NextMsgAddr
 =((GOS_U32)
pMsgQueue
->
pu8Ba£Addr
 +ÖMsgQueue->
u32MaxLí
))

87 
p°NextMsgAddr
 = (
°MESSAGE_S
 *)
pMsgQueue
->
pu8Ba£Addr
;

91 
p°NextMsgAddr
->
pu8MsgD©a
 = 
GOS_NULL
;

92 
p°NextMsgAddr
->
p°Next
 = 
GOS_NULL
;

93 
pMsgQueue
->
p°MsgRór
->
p°Next
 = 
p°NextMsgAddr
;

94 
pMsgQueue
->
p°MsgRór
 = 
p°NextMsgAddr
;

95 
pMsgQueue
->
p°MsgRór
->
u16MsgLígth
 = 0;

97 i‡(
	`IsFuŒQueue
(
pMsgQueue
Ë=
GOS_SUCCESS
)

99  
GOS_FAILURE
;

102  
GOS_SUCCESS
;

103 
	}
}

105 
GOS_S32
 
	$MsgQueueDe
(
°MSG_QUEUE_S
 *
p°MsgQueue
, 
°MESSAGE_S
 *
p°Msg
)

107 
°MSG_QUEUE_S
 *
pMsgQueue
 = 
p°MsgQueue
;

109 i‡(
p°Msg
 =
GOS_NULL
)

111  
GOS_FAILURE
;

114 i‡(
	`IsEm±yQueue
(
pMsgQueue
Ë=
GOS_SUCCESS
)

116  
GOS_FAILURE
;

119 
p°Msg
->
u16MsgLígth
 = 
pMsgQueue
->
p°MsgFr⁄t
->u16MsgLength;

120 
p°Msg
->
pu8MsgD©a
 = 
pMsgQueue
->
p°MsgFr⁄t
->pu8MsgData;

121 
p°Msg
->
p°Next
 = 
GOS_NULL
;

123 
pMsgQueue
->
p°MsgFr⁄t
 =ÖMsgQueue->p°MsgFr⁄t->
p°Next
;

125  
GOS_SUCCESS
;

126 
	}
}

128 
GOS_S32
 
	$MsgQueue_Cª©e
(
°MSG_QUEUE_S
 **
p°MsgQueue
, 
EÀmítSize
, 
NoEÀmíts
)

130 
GOS_U8
 *
pszBufAddr
 = 
GOS_NULL
;

131 
GOS_U32
 
u32BufLí
 = 0;

133 
u32BufLí
 = (
EÀmítSize
 + (
°MESSAGE_S
)Ë* 
NoEÀmíts
;

134 
pszBufAddr
 = (
GOS_U8
 *Ë
	`OS_AŒocMem‹y
(
u32BufLí
);

136 i‡(
pszBufAddr
 =
GOS_NULL
)

138  
GOS_FAILURE
;

141 *
p°MsgQueue
 = (
p°MSG_QUEUE_S
)
	`OS_AŒocMem‹y
((
°MSG_QUEUE_S
));

143 i‡(*
p°MsgQueue
 =
GOS_NULL
)

145  
GOS_FAILURE
;

148 (*
p°MsgQueue
)->
£m_QueueAc˚ss
 = 
	`OS_Cª©eSem≠h‹e
(1);

150 (*
p°MsgQueue
)->
pu8Ba£Addr
 = 
pszBufAddr
;

151 (*
p°MsgQueue
)->
u32MaxLí
 = 
u32BufLí
;

153 (*
p°MsgQueue
)->
p°MsgFr⁄t
 = (
°MESSAGE_S
 *)
pszBufAddr
;

154 (*
p°MsgQueue
)->
p°MsgFr⁄t
->
pu8MsgD©a
 = 
GOS_NULL
;

155 (*
p°MsgQueue
)->
p°MsgFr⁄t
->
p°Next
 = 
GOS_NULL
;

157 (*
p°MsgQueue
)->
p°MsgRór
 = (
°MESSAGE_S
 *)
pszBufAddr
;

158 (*
p°MsgQueue
)->
p°MsgRór
->
pu8MsgD©a
 = 
GOS_NULL
;

159 (*
p°MsgQueue
)->
p°MsgRór
->
p°Next
 = 
GOS_NULL
;

161  
GOS_SUCCESS
;

162 
	}
}

165 
GOS_S32
 
	$MsgQueue_Flush
(
°MSG_QUEUE_S
 *
p°MsgQueue
)

168 i‡(
p°MsgQueue
 =
GOS_NULL
)

170  
GOS_FAILURE
;

173 
p°MsgQueue
->
p°MsgFr⁄t
 = (
°MESSAGE_S
 *Ëp°MsgQueue->
pu8Ba£Addr
;

174 
p°MsgQueue
->
p°MsgFr⁄t
->
pu8MsgD©a
 = 
GOS_NULL
;

175 
p°MsgQueue
->
p°MsgFr⁄t
->
p°Next
 = 
GOS_NULL
;

177 
p°MsgQueue
->
p°MsgRór
 = (
°MESSAGE_S
 *Ëp°MsgQueue->
pu8Ba£Addr
;

178 
p°MsgQueue
->
p°MsgRór
->
pu8MsgD©a
 = 
GOS_NULL
;

179 
p°MsgQueue
->
p°MsgRór
->
p°Next
 = 
GOS_NULL
;

181  
GOS_SUCCESS
;

182 
	}
}

185 
GOS_S32
 
	$MsgQueue_De°‹y
(
°MSG_QUEUE_S
 *
pMsgQueue
)

187 i‡(
pMsgQueue
 =
GOS_NULL
)

189  
GOS_FAILURE
;

192 
	`OS_DñëeSem≠h‹e
(
pMsgQueue
->
£m_QueueAc˚ss
);

194 i‡(
pMsgQueue
->
pu8Ba£Addr
 !
GOS_NULL
)

196 
	`OS_FªeMem‹y
(
pMsgQueue
->
pu8Ba£Addr
);

199 
pMsgQueue
->
pu8Ba£Addr
 = 
GOS_NULL
;

200 
pMsgQueue
->
u32MaxLí
 = 0;

201 
pMsgQueue
->
p°MsgFr⁄t
 = 
GOS_NULL
;

202 
pMsgQueue
->
p°MsgRór
 = 
GOS_NULL
;

204 
	`OS_FªeMem‹y
(
pMsgQueue
);

206  
GOS_SUCCESS
;

207 
	}
}

209 
GOS_S32
 
	$MsgQueue_En
(
°MSG_QUEUE_S
 *
p°MsgQueue
, 
°MESSAGE_S
 *
pMsg
)

211 
°MSG_QUEUE_S
 *
pMsgQueue
 = 
p°MsgQueue
;

213 i‡(
pMsg
 =
GOS_NULL
 || 
p°MsgQueue
 == GOS_NULL)

215  
GOS_FAILURE
;

218 
	`OS_WaôSem≠h‹e
(
pMsgQueue
->
£m_QueueAc˚ss
);

220 i‡(
GOS_SUCCESS
 !
	`MsgQueueEn
(
pMsgQueue
, 
pMsg
))

222 
	`OS_Sig«lSem≠h‹e
(
pMsgQueue
->
£m_QueueAc˚ss
);

223  
GOS_FAILURE
;

226 
	`OS_Sig«lSem≠h‹e
(
pMsgQueue
->
£m_QueueAc˚ss
);

228  
GOS_SUCCESS
;

229 
	}
}

231 
GOS_S32
 
	$MsgQueue_De
(
°MSG_QUEUE_S
 *
p°MsgQueue
, 
°MESSAGE_S
 *
pMsg
)

233 
°MSG_QUEUE_S
 *
pMsgQueue
 = 
p°MsgQueue
;

235 i‡(
pMsg
 =
GOS_NULL
 || 
p°MsgQueue
 == GOS_NULL)

237  
GOS_FAILURE
;

240 
	`OS_WaôSem≠h‹e
(
pMsgQueue
->
£m_QueueAc˚ss
);

242 i‡(
GOS_SUCCESS
 !
	`MsgQueueDe
(
pMsgQueue
, 
pMsg
))

244 
	`OS_Sig«lSem≠h‹e
(
pMsgQueue
->
£m_QueueAc˚ss
);

246  
GOS_FAILURE
;

249 
	`OS_Sig«lSem≠h‹e
(
pMsgQueue
->
£m_QueueAc˚ss
);

251  
GOS_SUCCESS
;

252 
	}
}

254 
GOS_S32
 
	$MsgQueue_DeTimeOut
(
°MSG_QUEUE_S
 *
p°MsgQueue
, 
°MESSAGE_S
 *
pMsg
, 
GOS_U32
 
TimeOutMs
)

256 
°MSG_QUEUE_S
 *
pMsgQueue
 = 
p°MsgQueue
;

258 i‡(
pMsg
 =
GOS_NULL
 || 
p°MsgQueue
 == GOS_NULL)

260  
GOS_FAILURE
;

263 
	`OS_WaôSem≠h‹eTimeOut
(
pMsgQueue
->
£m_QueueAc˚ss
,
TimeOutMs
);

265 i‡(
GOS_SUCCESS
 !
	`MsgQueueDe
(
pMsgQueue
, 
pMsg
))

267 
	`OS_Sig«lSem≠h‹e
(
pMsgQueue
->
£m_QueueAc˚ss
);

269  
GOS_FAILURE
;

272 
	`OS_Sig«lSem≠h‹e
(
pMsgQueue
->
£m_QueueAc˚ss
);

274  
GOS_SUCCESS
;

275 
	}
}

	@porting/src/threadpool/threadpool.c

1 #ifde‡
__˝lu•lus


5 
	~"thªadpoﬁ.h
"

7 
	sjob


9 
EPOLL_EV_CB
 
ˇŒback
;

10 *
¨g
;

11 
job
 *
√xt
;

14 
	sthªadpoﬁ


16 
thªad_num
;

17 
queue_max_num
;

18 
job
 *
hód
;

19 
job
 *
èû
;

20 
±hªad_t
 *
±hªads
;

21 
±hªad_muãx_t
 
muãx
;

22 
±hªad_c⁄d_t
 
queue_em±y
;

23 
±hªad_c⁄d_t
 
queue_nŸ_em±y
;

24 
±hªad_c⁄d_t
 
queue_nŸ_fuŒ
;

25 
queue_cur_num
;

26 
queue_˛o£
;

27 
poﬁ_˛o£
;

28 }
	tTHREAD_POOL_S
;

30 
g_bthªadpoﬁ_öô
 = 0;

31 
THREAD_POOL_S
 *
g°_±hªadpoﬁ
 = 
NULL
;

33 
THREAD_POOL_S
* 
thªadpoﬁ_öô
(
thªad_num
, 
queue_max_num
);

34 
thªadpoﬁ_add_job
(
thªadpoﬁ
 *
poﬁ
, 
EPOLL_EV_CB
 
ˇŒback
, *
¨g
);

35 
thªadpoﬁ_de°roy
(
thªadpoﬁ
 *
poﬁ
);

36 * 
thªadpoﬁ_fun˘i⁄
(* 
¨g
);

38 
thªadpoﬁ
* 
thªadpoﬁ_öô
(
thªad_num
, 
queue_max_num
)

40 
thªadpoﬁ
 *
poﬁ
 = 
NULL
;

43 
poﬁ
 = (
thªadpoﬁ
 *)
mÆloc
((threadpool));

44 i‡(
NULL
 =
poﬁ
)

46 
¥ötf
("failedÅo mallocÅhreadpool!\n");

49 
mem£t
(
poﬁ
, 0, (
thªadpoﬁ
));

50 
poﬁ
->
thªad_num
 =Åhread_num;

51 
poﬁ
->
queue_max_num
 = queue_max_num;

52 
poﬁ
->
queue_cur_num
 = 0;

53 
poﬁ
->
hód
 = 
NULL
;

54 
poﬁ
->
èû
 = 
NULL
;

55 i‡(
±hªad_muãx_öô
(&(
poﬁ
->
muãx
), 
NULL
))

57 
¥ötf
("failedÅo init mutex!\n");

60 i‡(
±hªad_c⁄d_öô
(&(
poﬁ
->
queue_em±y
), 
NULL
))

62 
¥ötf
("failedÅo init queue_empty!\n");

65 i‡(
±hªad_c⁄d_öô
(&(
poﬁ
->
queue_nŸ_em±y
), 
NULL
))

67 
¥ötf
("failedÅo init queue_not_empty!\n");

70 i‡(
±hªad_c⁄d_öô
(&(
poﬁ
->
queue_nŸ_fuŒ
), 
NULL
))

72 
¥ötf
("failedÅo init queue_not_full!\n");

75 
poﬁ
->
±hªads
 = (
±hªad_t
 *)
mÆloc
(’thªad_tË* 
thªad_num
);

76 i‡(
NULL
 =
poﬁ
->
±hªads
)

78 
¥ötf
("failedÅo mallocÖthreads!\n");

81 
mem£t
(
poﬁ
->
±hªads
, 0, (
±hªad_t
Ë* 
thªad_num
);

83 
poﬁ
->
queue_˛o£
 = 0;

84 
poﬁ
->
poﬁ_˛o£
 = 0;

85 
i
;

86 
i
 = 0; i < 
poﬁ
->
thªad_num
; ++i)

88 
±hªad_¸óã
(&(
poﬁ
->
±hªads
[
i
]), 
NULL
, 
thªadpoﬁ_fun˘i⁄
, (*)pool);

91  
poﬁ
;

94  
NULL
;

97 
thªadpoﬁ_add_job
(
thªadpoﬁ
* 
poﬁ
, 
EPOLL_EV_CB
 
ˇŒback
, *
¨g
)

99 
as£π
(
poﬁ
 !
NULL
);

100 
as£π
(
ˇŒback
 !
NULL
);

101 
as£π
(
¨g
 !
NULL
);

103 
±hªad_muãx_lock
(&(
poﬁ
->
muãx
));

104 (
poﬁ
->
queue_cur_num
 >poﬁ->
queue_max_num
Ë&& !’oﬁ->
queue_˛o£
 ||Öoﬁ->
poﬁ_˛o£
))

106 
±hªad_c⁄d_waô
(&(
poﬁ
->
queue_nŸ_fuŒ
), &’oﬁ->
muãx
));

108 i‡(
poﬁ
->
queue_˛o£
 ||Öoﬁ->
poﬁ_˛o£
)

110 
±hªad_muãx_u∆ock
(&(
poﬁ
->
muãx
));

113 
job
 *
pjob
 =(job*Ë
mÆloc
((job));

114 i‡(
NULL
 =
pjob
)

116 
±hªad_muãx_u∆ock
(&(
poﬁ
->
muãx
));

119 
mem£t
(
pjob
, 0, (
job
));

120 
pjob
->
ˇŒback
 = callback;

121 
pjob
->
¨g
 =árg;

122 
pjob
->
√xt
 = 
NULL
;

123 i‡(
poﬁ
->
hód
 =
NULL
)

125 
poﬁ
->
hód
 =Öoﬁ->
èû
 = 
pjob
;

126 
±hªad_c⁄d_brﬂdˇ°
(&(
poﬁ
->
queue_nŸ_em±y
));

130 
poﬁ
->
èû
->
√xt
 = 
pjob
;

131 
poﬁ
->
èû
 = 
pjob
;

133 
poﬁ
->
queue_cur_num
++;

134 
±hªad_muãx_u∆ock
(&(
poﬁ
->
muãx
));

139 * 
thªadpoﬁ_fun˘i⁄
(* 
¨g
)

141 
thªadpoﬁ
 *
poﬁ
 = (thªadpoﬁ*)
¨g
;

142 
job
 *
pjob
 = 
NULL
;

146 
±hªad_muãx_lock
(&(
poﬁ
->
muãx
));

147 (
poﬁ
->
queue_cur_num
 =0Ë&& !poﬁ->
poﬁ_˛o£
)

149 
±hªad_c⁄d_waô
(&(
poﬁ
->
queue_nŸ_em±y
), &’oﬁ->
muãx
));

151 i‡(
poﬁ
->
poﬁ_˛o£
)

153 
±hªad_muãx_u∆ock
(&(
poﬁ
->
muãx
));

154 
±hªad_exô
(
NULL
);

156 
poﬁ
->
queue_cur_num
--;

157 
pjob
 = 
poﬁ
->
hód
;

158 i‡(
poﬁ
->
queue_cur_num
 == 0)

160 
poﬁ
->
hód
 =Öoﬁ->
èû
 = 
NULL
;

164 
poﬁ
->
hód
 = 
pjob
->
√xt
;

166 i‡(
poﬁ
->
queue_cur_num
 == 0)

168 
±hªad_c⁄d_sig«l
(&(
poﬁ
->
queue_em±y
));

170 i‡(
poﬁ
->
queue_cur_num
 <Öoﬁ->
queue_max_num
)

172 
±hªad_c⁄d_brﬂdˇ°
(&(
poﬁ
->
queue_nŸ_fuŒ
));

174 
±hªad_muãx_u∆ock
(&(
poﬁ
->
muãx
));

176 
pjob
->
ˇŒback
’job->
¨g
);

177 
‰ì
(
pjob
);

178 
pjob
 = 
NULL
;

182 
thªadpoﬁ_de°roy
(
thªadpoﬁ
 *
poﬁ
)

184 
as£π
(
poﬁ
 !
NULL
);

186 
±hªad_muãx_lock
(&(
poﬁ
->
muãx
));

187 i‡(
poﬁ
->
queue_˛o£
 ||Öoﬁ->
poﬁ_˛o£
)

189 
±hªad_muãx_u∆ock
(&(
poﬁ
->
muãx
));

193 
poﬁ
->
queue_˛o£
 = 1;

194 
poﬁ
->
queue_cur_num
 != 0)

196 
±hªad_c⁄d_waô
(&(
poﬁ
->
queue_em±y
), &’oﬁ->
muãx
));

199 
poﬁ
->
poﬁ_˛o£
 = 1;

200 
±hªad_muãx_u∆ock
(&(
poﬁ
->
muãx
));

201 
±hªad_c⁄d_brﬂdˇ°
(&(
poﬁ
->
queue_nŸ_em±y
));

202 
±hªad_c⁄d_brﬂdˇ°
(&(
poﬁ
->
queue_nŸ_fuŒ
));

203 
i
;

204 
i
 = 0; i < 
poﬁ
->
thªad_num
; ++i)

206 
±hªad_joö
(
poﬁ
->
±hªads
[
i
], 
NULL
);

209 
±hªad_muãx_de°roy
(&(
poﬁ
->
muãx
));

210 
±hªad_c⁄d_de°roy
(&(
poﬁ
->
queue_em±y
));

211 
±hªad_c⁄d_de°roy
(&(
poﬁ
->
queue_nŸ_em±y
));

212 
±hªad_c⁄d_de°roy
(&(
poﬁ
->
queue_nŸ_fuŒ
));

213 
‰ì
(
poﬁ
->
±hªads
);

214 
poﬁ
->
±hªads
 = 
NULL
;

215 
job
 *
p
;

216 
poﬁ
->
hód
 !
NULL
)

218 
p
 = 
poﬁ
->
hód
;

219 
poﬁ
->
hód
 = 
p
->
√xt
;

220 
‰ì
(
p
);

221 
p
 = 
NULL
;

223 
‰ì
(
poﬁ
);

224 
poﬁ
 = 
NULL
;

229 
thªadpoﬁ_≠i_¸óã
(
thªad_num
)

231 if(1 =
g_bthªadpoﬁ_öô
)

236 
g°_±hªadpoﬁ
 = 
thªadpoﬁ_öô
(
thªad_num
, 10);

237 if(
NULL
 =
g°_±hªadpoﬁ
)

242 
g_bthªadpoﬁ_öô
 = 1;

247 
thªadpoﬁ_≠i_addèsk
(
EPOLL_EV_CB
 
ˇŒback
, *
¨g
)

249  
thªadpoﬁ_add_job
(
g°_±hªadpoﬁ
, 
ˇŒback
, 
¨g
);

252 
thªadpoﬁ_≠i_de°‹y
()

254 if(0 =
g_bthªadpoﬁ_öô
)

259 
thªadpoﬁ_de°roy
(
g°_±hªadpoﬁ
);

261 
g_bthªadpoﬁ_öô
 = 0;

265 #ifde‡
__˝lu•lus


	@porting/src/tsparse/GosTsr_AnalysisData.c

1 #ifde‡
__˝lu•lus


2 #i‡
__˝lu•lus


7 
	~"GosT§_A«lysisD©a.h
"

9 
	~"TsEº‹Check_O√Levñ.h
"

10 
	~"TsEº‹Check_TwoLevñ.h
"

11 
	~"TsEº‹Check_ThªeLevñ.h
"

13 
	#DEFAULT_CODE
 0x02

	)

15 c⁄° 
GOSTSR_U16
 
iso8859_2
[] = {

30 c⁄° 
GOSTSR_U16
 
iso8859_3
[] = {

45 c⁄° 
GOSTSR_U16
 
iso8859_4
[] = {

60 c⁄° 
GOSTSR_U16
 
iso8859_7
[] = {

75 c⁄° 
GOSTSR_U16
 
iso8859_8
[] = {

90 c⁄° 
GOSTSR_U16
 
iso8859_10
[] = {

105 c⁄° 
GOSTSR_U16
 
iso8859_13
[] = {

120 c⁄° 
GOSTSR_U16
 
iso8859_14
[] = {

135 c⁄° 
GOSTSR_U16
 
iso8859_16
[] = {

151 
TS_PACKAGE_INFO
 *
PackageHód
[
TABLE_NUMBER
] = {
GOSTSR_NULL
};

152 
GOSTSR_U16
 
pmtsPID
[
GOS_MAX_SERVICE_NUM
];

153 
GOSTSR_U16
 
pmtsPIDNumbî
 = 0;

154 
A«lysisD©a_FUN
 
ˇŒBackFunc
[
ANALYSIS_CALLBACKFUNCTION_NUM
];

155 
GOSTSR_PSISI_PAT_S
 
g°P©Info
;

157 
GOSTSR_S32
 
GosT§_A«lysisD©a_PackëTy≥
(
GOSTSR_U32
 *
pu32PackëLí
, *
fûeP©h
)

159 
FILE
 *
sFp
 = 
GOSTSR_NULL
;

160 
GOSTSR_U64
 
fûeLí
 = 0;

161 
GOSTSR_U8
 
chr
 = '\0';

162 
GOSTSR_BOOL
 
checkFœg
 = 
GOSTSR_FALSE
;

163 
GOSTSR_U64
 
off£t
 = 0;

164 
GOSTSR_U64
 
ãmpOff£t
 = 0;

165 
GOSTSR_U32
 
ªtLí
 = 0;

166 
GOSTSR_U32
 
∑ckageLí
 = 0;

167 
GOSTSR_U8
 *
tsD©a
 = 
GOSTSR_NULL
;

169 i‡(
NULL
 =
fûeP©h
)

171 
¥ötf
("filePath is NULL");

172  
GOSTSR_FAILURE
;

175 
sFp
 = 
f›í
(
fûeP©h
, "rb");

176 i‡(
NULL
 =
sFp
)

178 
¥ötf
("f›í faûed,∑th:%s\n", 
fûeP©h
);

179  
GOSTSR_FAILURE
;

182 
f£ek
(
sFp
, 0, 
SEEK_END
);

183 
fûeLí
 = 
·ñl
(
sFp
);

184 
f£ek
(
sFp
, 0, 
SEEK_SET
);

187 
chr
 = 
fgëc
(
sFp
);

188 
off£t
++;

190 i‡((
chr
 =
EOF
Ë&& (
off£t
 >
fûeLí
))

195 i‡(
chr
 =
SYNC_BYTE
)

197 i‡(
ãmpOff£t
 == 0)

199 
ãmpOff£t
 = 
off£t
;

203 i‡(((
off£t
 - 
ãmpOff£t
Ë=
TS_LENGTH_188
Ë|| ((off£à-ÅempOff£tË=
TS_LENGTH_204
))

205 
off£t
 = 
ãmpOff£t
;

206 
checkFœg
 = 
GOSTSR_TRUE
;

210 
ãmpOff£t
 = 
off£t
;

215 }!
checkFœg
);

217 i‡(
chr
 =
EOF
)

219 
f˛o£
(
sFp
);

220 
sFp
 = 
GOSTSR_NULL
;

221 
¥ötf
("file is EOF\n");

222  
GOSTSR_FAILURE
;

225 
off£t
 = offset - 1;

226 
f£ek
(
sFp
, 
off£t
, 
SEEK_SET
);

229 
tsD©a
 = (
GOSTSR_U8
 *)
mÆloc
(
TS_LENGTH_204
 + 1);

230 i‡(
GOSTSR_NULL
 =
tsD©a
)

232 
f˛o£
(
sFp
);

233 
sFp
 = 
GOSTSR_NULL
;

234 
¥ötf
("malloc failed\n");

235  
GOSTSR_FAILURE
;

237 
mem£t
(
tsD©a
, 0x00, 
TS_LENGTH_204
 + 1);

238 
ªtLí
 = 
‰ód
(
tsD©a
, 1, 
TS_LENGTH_204
 + 1, 
sFp
);

239 i‡(
ªtLí
 !
TS_LENGTH_204
 + 1)

241 
f˛o£
(
sFp
);

242 
sFp
 = 
GOSTSR_NULL
;

243 i‡(
GOSTSR_NULL
 !
tsD©a
)

245 
‰ì
(
tsD©a
);

246 
tsD©a
 = 
GOSTSR_NULL
;

248 
¥ötf
("‰ód faûed,%d\n", 
__LINE__
);

249  
GOSTSR_FAILURE
;

252 if((
tsD©a
[0] =
SYNC_BYTE
) && (tsData[188] == SYNC_BYTE))

255 
∑ckageLí
 = 
TS_LENGTH_188
;

257 if((
tsD©a
[0] =
SYNC_BYTE
) && (tsData[188] != SYNC_BYTE) && \

258 (
tsD©a
[204] =
SYNC_BYTE
))

261 
∑ckageLí
 = 
TS_LENGTH_204
;

265 
f˛o£
(
sFp
);

266 
sFp
 = 
GOSTSR_NULL
;

267 i‡(
GOSTSR_NULL
 !
tsD©a
)

269 
‰ì
(
tsD©a
);

270 
tsD©a
 = 
GOSTSR_NULL
;

272 
¥ötf
("NO SYNC_BYTE\n,%d", 
__LINE__
);

273  
GOSTSR_FAILURE
;

276 i‡(
GOSTSR_NULL
 !
tsD©a
)

278 
‰ì
(
tsD©a
);

279 
tsD©a
 = 
GOSTSR_NULL
;

282 *
pu32PackëLí
 = 
∑ckageLí
;

284  
GOSTSR_SUCCESS
;

286 
GOSTSR_S32
 
GosT§_A«lysisD©a_Re£tPMTID
()

288 
mem£t
(
pmtsPID
, 0xffff, (pmtsPID));

289 
pmtsPIDNumbî
 = 0;

291  
GOSTSR_SUCCESS
;

294 
GOSTSR_S32
 
GosT§_A«lysisD©a_Re£tP©Info
()

296 
mem£t
(&
g°P©Info
, 0, (
GOSTSR_PSISI_PAT_S
));

297 
g°P©Info
.
u8Vîsi⁄
 = 0xff;

299  
GOSTSR_SUCCESS
;

302 
GOSTSR_S32
 
GosT§_A«lysisD©a_gëP©Info
(
GOSTSR_PSISI_PAT_S
 *
∑tInfo
)

304 if(
g°P©Info
.
u8Vîsi⁄
 !
∑tInfo
->u8Version)

305 
mem˝y
(&
g°P©Info
,
∑tInfo
,(
GOSTSR_PSISI_PAT_S
));

307  
GOSTSR_SUCCESS
;

310 
GOSTSR_S32
 
GosT§_A«lysisD©a_TsEnvInô
()

312 
TS_PACKAGE_INFO
 *
pCurPackage
 = 
GOSTSR_NULL
;

313 
TS_PACKAGE_INFO
 *
¥ePackage
 = 
GOSTSR_NULL
;

314 
GOSTSR_U8
 
i
 = 0;

316 
i
 = 0; i < 
TABLE_NUMBER
; i++)

319 
pCurPackage
 = 
PackageHód
[
i
];

320 
pCurPackage
 !
GOSTSR_NULL
)

322 
¥ePackage
 = 
pCurPackage
;

323 
pCurPackage
 =ÖCurPackage->
√xt
;

324 
‰ì
(
¥ePackage
);

325 
¥ePackage
 = 
GOSTSR_NULL
;

327 
PackageHód
[
i
] = 
GOSTSR_NULL
;

330 
i
 = 0; i < 
ANALYSIS_CALLBACKFUNCTION_NUM
; i++)

332 
ˇŒBackFunc
[
i
] = 
GOSTSR_NULL
;

335 
GosT§_A«lysisD©a_CRCInô
();

336 
GosT§_A«lysisD©a_Re£tPMTID
();

337 
GosT§_A«lysisD©a_Re£tP©Info
();

339  
GOSTSR_SUCCESS
;

342 
GOSTSR_S32
 
GosT§_A«lysisD©a_TsEnvDeInô
()

344 
TS_PACKAGE_INFO
 *
pCurPackage
 = 
GOSTSR_NULL
;

345 
TS_PACKAGE_INFO
 *
¥ePackage
 = 
GOSTSR_NULL
;

346 
GOSTSR_U8
 
i
 = 0;

348 
i
 = 0; i < 
TABLE_NUMBER
; i++)

351 
pCurPackage
 = 
PackageHód
[
i
];

352 
pCurPackage
 !
GOSTSR_NULL
)

354 
¥ePackage
 = 
pCurPackage
;

355 
pCurPackage
 =ÖCurPackage->
√xt
;

356 
‰ì
(
¥ePackage
);

357 
¥ePackage
 = 
GOSTSR_NULL
;

359 
PackageHód
[
i
] = 
GOSTSR_NULL
;

362 
i
 = 0; i < 
ANALYSIS_CALLBACKFUNCTION_NUM
; i++)

364 
ˇŒBackFunc
[
i
] = 
GOSTSR_NULL
;

367 
GosT§_A«lysisD©a_Re£tPMTID
();

369  
GOSTSR_SUCCESS
;

372 
GOSTSR_S32
 
GosT§_A«lysisD©a_CÆlBack
(
TS_SECTION_INFO
 *
tsSe˘i⁄Info
)

374 
GOSTSR_U8
 
i
 = 0;

376 
i
 = 0; i < 
ANALYSIS_CALLBACKFUNCTION_NUM
; i++)

378 i‡(
GOSTSR_NULL
 !
ˇŒBackFunc
[
i
])

380 
ˇŒBackFunc
[
i
](
tsSe˘i⁄Info
);

384  
GOSTSR_SUCCESS
;

387 
GOSTSR_S32
 
GosT§_A«lysisD©a_Regi°îCÆlBack
(
A«lysisD©a_FUN
 
fun˘i⁄
, 
GOSTSR_U8
 *
ödex
)

389 
GOSTSR_U8
 
i
 = 0;

391 i‡((
GOSTSR_NULL
 =
fun˘i⁄
Ë|| (GOSTSR_NULL =
ödex
))

393  
GOSTSR_FAILURE
;

396 
i
 = 0; i < 
ANALYSIS_CALLBACKFUNCTION_NUM
; i++)

398 i‡(
GOSTSR_NULL
 =
ˇŒBackFunc
[
i
])

404 i‡(
i
 !
ANALYSIS_CALLBACKFUNCTION_NUM
)

406 
ˇŒBackFunc
[
i
] = 
fun˘i⁄
;

407 *
ödex
 = 
i
;

409  
GOSTSR_SUCCESS
;

412  
GOSTSR_FAILURE
;

415 
GOSTSR_S32
 
GosT§_A«lysisD©a_UnRegi°îCÆlBack
(
GOSTSR_U8
 
ödex
)

417 i‡(
GOSTSR_NULL
 !
ˇŒBackFunc
[
ödex
])

419 
ˇŒBackFunc
[
ödex
] = 
GOSTSR_NULL
;

422  
GOSTSR_SUCCESS
;

425 
GOSTSR_S32
 
GosT§_A«lysisD©a_GëPMTID
(
GOSTSR_PSISI_PAT_S
 *
∑tInfo
)

427 
GOSTSR_U16
 
i
 = 0;

428 
GOSTSR_U16
 
ödex
 = 0;

431 
i
 = 0; i < 
∑tInfo
->
u16NbEÀmíts
; i++)

433 i‡(0 =
∑tInfo
->
a°EÀmít
[
i
].
u16ProgømNumbî
)

438 
pmtsPID
[
ödex
++] = 
∑tInfo
->
a°EÀmít
[
i
].
u16Pid
;

442 
pmtsPIDNumbî
 = 
ödex
;

445  
GOSTSR_SUCCESS
;

448 
GOSTSR_S32
 
GosT§_A«lysisD©a_LökPackage
(
GOSTSR_U8
 
èbÀID
, 
TS_PACKAGE_INFO
 *
PackageHód_Temp
, GOSTSR_U8 
œ°D©aLí
, GOSTSR_U8 *
œ°D©a
)

450 
GOSTSR_U8
 *
pSe˘i⁄D©a
 = 
GOSTSR_NULL
;

451 
GOSTSR_U16
 
curSe˘i⁄Lígth
 = 0;

452 
GOSTSR_U16
 
ÆlSe˘i⁄Lígth
 = 0;

453 
TS_SECTION_INFO
 *
curSe˘i⁄Info
 = 
GOSTSR_NULL
;

454 
TS_PACKAGE_INFO
 *
pCurPackage
 = 
GOSTSR_NULL
;

456 if((
GOSTSR_NULL
 =
PackageHód_Temp
Ë|| (GOSTSR_NULL =
œ°D©a
))

458  
GOSTSR_FAILURE
;

461 
pCurPackage
 = 
PackageHód_Temp
;

462 
GOSTSR_NULL
 !
pCurPackage
)

464 
ÆlSe˘i⁄Lígth
 +
pCurPackage
->
∑ckageLí
;

465 
pCurPackage
 =ÖCurPackage->
√xt
;

468 
curSe˘i⁄Lígth
 = 
ÆlSe˘i⁄Lígth
;

469 
curSe˘i⁄Lígth
 +
œ°D©aLí
;

471 
curSe˘i⁄Info
 = (
TS_SECTION_INFO
 *)
mÆloc
((TS_SECTION_INFO));

472 if(
GOSTSR_NULL
 =
curSe˘i⁄Info
)

474  
GOSTSR_FAILURE
;

476 
curSe˘i⁄Info
->
£˘i⁄Lígth
 = 
curSe˘i⁄Lígth
;

477 
curSe˘i⁄Info
->
PID
 = 
PackageHód_Temp
->PID;

478 
curSe˘i⁄Info
->
èbÀID
 = 
PackageHód_Temp
->tableID;

479 
mem˝y
(&
curSe˘i⁄Info
->
°Eº‹Info
,&
PackageHód_Temp
->°Eº‹Info,(
TR101290_ERROR_S
));

480 
curSe˘i⁄Info
->
£˘i⁄D©a
 = (
GOSTSR_U8
 *)
mÆloc
(
curSe˘i⁄Lígth
);

481 if(
GOSTSR_NULL
 =
curSe˘i⁄Info
->
£˘i⁄D©a
)

483  
GOSTSR_FAILURE
;

486 
mem£t
(
curSe˘i⁄Info
->
£˘i⁄D©a
, 0x00, 
curSe˘i⁄Lígth
);

487 
pSe˘i⁄D©a
 = 
curSe˘i⁄Info
->
£˘i⁄D©a
;

488 
pCurPackage
 = 
PackageHód_Temp
;

490 
GOSTSR_NULL
 !
pCurPackage
)

492 
mem˝y
(
pSe˘i⁄D©a
, 
pCurPackage
->
∑ckageD©a
,ÖCurPackage->
∑ckageLí
);

493 
pSe˘i⁄D©a
 +
pCurPackage
->
∑ckageLí
;

494 
pCurPackage
 =ÖCurPackage->
√xt
;

496 
mem˝y
(
pSe˘i⁄D©a
, 
œ°D©a
, 
œ°D©aLí
);

498 
GOSTSR_U16
 
curPos
 = 
curSe˘i⁄Info
->
£˘i⁄Lígth
 - 4;

499 
GOSTSR_U8
 *
pD©a
 = &(
curSe˘i⁄Info
->
£˘i⁄D©a
[
curPos
]);

500 
GOSTSR_U32
 
¸c32
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

501 
GOSTSR_U32
 
ˇlCrc32
 = 0;

503 
ˇlCrc32
 = 
GosT§_A«lysisD©a_CRCCheck
(
curSe˘i⁄Info
->
£˘i⁄D©a
, curSe˘i⁄Info->
£˘i⁄Lígth
 - 4);

505 if(
TsEº‹Check_TwoLevñ_checkCrcEº‹
(&
curSe˘i⁄Info
->
°Eº‹Info
,curSe˘i⁄Info->
èbÀID
, 
¸c32
, 
ˇlCrc32
Ë=
GOSTSR_SUCCESS
)

507  
GOSTSR_FAILURE
;

510 
TsEº‹Check_ThªeLevñ_Se˘i⁄sTimeEº‹
(*
curSe˘i⁄Info
);

511 i‡((
¸c32
 =
ˇlCrc32
Ë|| (
TDT_TABLE_ID
 =
èbÀID
))

513 
GosT§_A«lysisD©a_CÆlBack
(
curSe˘i⁄Info
);

516 i‡(
GOSTSR_NULL
 !
curSe˘i⁄Info
)

518 i‡(
GOSTSR_NULL
 !
curSe˘i⁄Info
->
£˘i⁄D©a
)

520 
‰ì
(
curSe˘i⁄Info
->
£˘i⁄D©a
);

521 
curSe˘i⁄Info
->
£˘i⁄D©a
 = 
GOSTSR_NULL
;

523 
‰ì
(
curSe˘i⁄Info
);

524 
curSe˘i⁄Info
 = 
GOSTSR_NULL
;

527  
GOSTSR_SUCCESS
;

530 
GOSTSR_S32
 
GosT§_A«lysisD©a_TabÀID
(
GOSTSR_U8
 
èbÀID
,c⁄° *
d©a
, 
TS_HEAD_INFO
 
tsHódInfo
)

532 
GOSTSR_U8
 
£˘i⁄Fœg
 = 
GOSTSR_FALSE
;

533 
GOSTSR_U16
 
i
 = 0, 
j
 = 0;

534 
GOSTSR_U8
 *
pcurD©a
 = 
GOSTSR_NULL
;

535 
GOSTSR_U8
 
ad≠tLígth
 = 0;

536 
GOSTSR_U8
 
poötFõldLígth
 = 0;

537 
GOSTSR_U8
 
‰⁄tSe˘i⁄D©a
[256] = {0,};

538 
GOSTSR_U8
 
curTabÀID
 = 
BULT_TABLE_ID
;

539 
GOSTSR_U16
 
curTempD©a
 = 0;

540 
GOSTSR_U16
 
curSe˘i⁄Lígth
 = 0;

541 
GOSTSR_U16
 
ªmaöLí
 = 0;

542 
TS_SECTION_INFO
 *
curSe˘i⁄Info
 = 
GOSTSR_NULL
;

543 
TS_PACKAGE_INFO
 *
pCurPackage
 = 
GOSTSR_NULL
;

544 
TS_PACKAGE_INFO
 *
¥ePackage
 = 
GOSTSR_NULL
;

545 
GOSTSR_U16
 
∑ckageAŒLí
 = 0;

546 
GOSTSR_U8
 *
pSe˘i⁄D©a
 = 
GOSTSR_NULL
;

547 
GOSTSR_U16
 
ÆlSe˘i⁄Lígth
 = 0;

549 i‡(
GOSTSR_NULL
 =
d©a
)

551  
GOSTSR_FAILURE
;

554 
pcurD©a
 = (
GOSTSR_U8
 *)
d©a
;

555 
pcurD©a
 +
TS_HEAD_LENGTH
;

558 i‡(
tsHódInfo
.
ad≠ãr_c⁄åﬁ
 & 
BIT2
)

561 
ad≠tLígth
 = 
pcurD©a
[0];

562 
pcurD©a
 += 1;

565 
pcurD©a
 +
ad≠tLígth
;

569 i‡(
tsHódInfo
.
lﬂd_ödiˇãr
 =
BIT1
)

572 
poötFõldLígth
 = 
pcurD©a
[0];

573 
pcurD©a
 += 1;

576 
mem£t
(
‰⁄tSe˘i⁄D©a
, 0x00, (frontSectionData));

577 
mem˝y
(
‰⁄tSe˘i⁄D©a
, 
pcurD©a
, 
poötFõldLígth
);

578 
pcurD©a
 +
poötFõldLígth
;

581 
curTabÀID
 = 
pcurD©a
[0];

582 
pcurD©a
 += 1;

584 
TsEº‹Check_O√Levñ_P©Eº‹
(&
tsHódInfo
.
°Eº‹Info
,tsHódInfo.
ts_pid
,
curTabÀID
,tsHódInfo.
s¸ambÀ_c⁄åﬁ
);

585 
TsEº‹Check_O√Levñ_PmtEº‹
(&
tsHódInfo
.
°Eº‹Info
,tsHódInfo.
ts_pid
,tsHódInfo.
s¸ambÀ_c⁄åﬁ
);

586 
TsEº‹Check_TwoLevñ_checkC©Eº‹
(&
tsHódInfo
.
°Eº‹Info
,tsHódInfo.
ts_pid
, 
curTabÀID
,ÅsHódInfo.
s¸ambÀ_c⁄åﬁ
);

587 i‡(
curTabÀID
 !
èbÀID
)

589  
GOSTSR_FAILURE
;

592 
i
 = 0; i < 
TABLE_NUMBER
; i++)

594 i‡(
PackageHód
[
i
] =
GOSTSR_NULL
)

599 i‡(
PackageHód
[
i
]->
PID
 =
tsHódInfo
.
ts_pid
)

601 
ÆlSe˘i⁄Lígth
 = 0;

603 
pCurPackage
 = 
PackageHód
[
i
];

604 
GOSTSR_NULL
 !
pCurPackage
)

606 
ÆlSe˘i⁄Lígth
 +
pCurPackage
->
∑ckageLí
;

607 
pCurPackage
 =ÖCurPackage->
√xt
;

610 if((
ÆlSe˘i⁄Lígth
 + 
poötFõldLígth
Ë>
PackageHód
[
i
]->
£˘i⁄Lí
)

612 
GosT§_A«lysisD©a_LökPackage
(
èbÀID
,
PackageHód
[
i
],
poötFõldLígth
,
‰⁄tSe˘i⁄D©a
);

615 
pCurPackage
 = 
PackageHód
[
i
];

616 
pCurPackage
 !
GOSTSR_NULL
)

618 
¥ePackage
 = 
pCurPackage
;

619 
pCurPackage
 =ÖCurPackage->
√xt
;

620 
‰ì
(
¥ePackage
);

621 
¥ePackage
 = 
GOSTSR_NULL
;

624 
PackageHód
[
i
] = 
GOSTSR_NULL
;

629 
curTempD©a
 = 
pcurD©a
[0]*256 +ÖcurData[1];

630 
curSe˘i⁄Lígth
 = 
curTempD©a
 & (~((
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
) * 256));

631 
pcurD©a
 += 2;

634 
pcurD©a
 -= 3;

635 
curSe˘i⁄Lígth
 += 3;

638 i‡(
tsHódInfo
.
ad≠ãr_c⁄åﬁ
 & 
BIT2
)

640 i‡(
tsHódInfo
.
∑ckageTy≥
 =
PACKAGE_188
)

642 
ªmaöLí
 = (
TS_LENGTH_188
 - 
TS_HEAD_LENGTH
 - 1 - 
ad≠tLígth
 - 1 - 
poötFõldLígth
);

646 
ªmaöLí
 = (
TS_LENGTH_204
 - 
TS_HEAD_LENGTH
 - 1 - 
ad≠tLígth
 - 1 - 
poötFõldLígth
);

651 i‡(
tsHódInfo
.
∑ckageTy≥
 =
PACKAGE_188
)

653 
ªmaöLí
 = (
TS_LENGTH_188
 - 
TS_HEAD_LENGTH
 - 1 - 
poötFõldLígth
);

657 
ªmaöLí
 = (
TS_LENGTH_204
 - 
TS_HEAD_LENGTH
 - 1 - 
poötFõldLígth
);

662 i‡(
curSe˘i⁄Lígth
 <
ªmaöLí
)

664 
curSe˘i⁄Info
 = (
TS_SECTION_INFO
 *)
mÆloc
((TS_SECTION_INFO));

665 
curSe˘i⁄Info
->
£˘i⁄Lígth
 = 
curSe˘i⁄Lígth
;

666 
curSe˘i⁄Info
->
èbÀID
 =ÅableID;

667 
curSe˘i⁄Info
->
PID
 = 
tsHódInfo
.
ts_pid
;

669 
mem˝y
(&
curSe˘i⁄Info
->
°Eº‹Info
,&
tsHódInfo
.°Eº‹Info,(
TR101290_ERROR_S
));

671 
curSe˘i⁄Info
->
£˘i⁄D©a
 = (
GOSTSR_U8
 *)
mÆloc
(
curSe˘i⁄Lígth
);

672 
mem£t
(
curSe˘i⁄Info
->
£˘i⁄D©a
, 0x00, 
curSe˘i⁄Lígth
);

673 
mem˝y
(
curSe˘i⁄Info
->
£˘i⁄D©a
, 
pcurD©a
, 
curSe˘i⁄Lígth
);

676 
£˘i⁄Fœg
 = 
GOSTSR_TRUE
;

681 
i
 = 0; i < 
TABLE_NUMBER
; i++)

683 i‡(
PackageHód
[
i
] =
GOSTSR_NULL
)

689 i‡(
TABLE_NUMBER
 !
i
)

691 
PackageHód
[
i
] = (
TS_PACKAGE_INFO
*)
mÆloc
((TS_PACKAGE_INFO));

692 
PackageHód
[
i
]->
√xt
 = 
GOSTSR_NULL
;

693 
PackageHód
[
i
]->
∑ckageLí
 = 
ªmaöLí
;

694 
mem£t
(
PackageHód
[
i
]->
∑ckageD©a
, 0x00, (PackageHead[i]->packageData));

695 
mem˝y
(
PackageHód
[
i
]->
∑ckageD©a
, 
pcurD©a
, 
ªmaöLí
);

696 
PackageHód
[
i
]->
PID
 = 
tsHódInfo
.
ts_pid
;

697 
PackageHód
[
i
]->
numbî
 = 
tsHódInfo
.
cou¡î
;

698 
PackageHód
[
i
]->
£˘i⁄Lí
 = 
curSe˘i⁄Lígth
;

699 
PackageHód
[
i
]->
èbÀID
 =ÅableID;

700 
mem˝y
(&
PackageHód
[
i
]->
°Eº‹Info
,&
tsHódInfo
.°Eº‹Info,(
TR101290_ERROR_S
));

707 
i
 = 0; i < 
TABLE_NUMBER
; i++)

709 i‡(
PackageHód
[
i
] =
GOSTSR_NULL
)

714 i‡(
PackageHód
[
i
]->
PID
 =
tsHódInfo
.
ts_pid
)

721 i‡(
i
 =
TABLE_NUMBER
)

723  
GOSTSR_FAILURE
;

727 
∑ckageAŒLí
 = 0;

728 
pCurPackage
 = 
PackageHód
[
i
];

729 
¥ePackage
 = 
PackageHód
[
i
];

730 
pCurPackage
 !
GOSTSR_NULL
)

732 
∑ckageAŒLí
 +
pCurPackage
->
∑ckageLí
;

733 
¥ePackage
 = 
pCurPackage
;

734 
pCurPackage
 =ÖCurPackage->
√xt
;

738 
pCurPackage
 = (
TS_PACKAGE_INFO
*)
mÆloc
((TS_PACKAGE_INFO));

739 i‡(
GOSTSR_NULL
 =
pCurPackage
)

741  
GOSTSR_FAILURE
;

744 
¥ePackage
->
√xt
 = 
pCurPackage
;

745 
pCurPackage
->
√xt
 = 
GOSTSR_NULL
;

746 i‡(
tsHódInfo
.
ad≠ãr_c⁄åﬁ
 & 
BIT2
)

748 i‡(
tsHódInfo
.
∑ckageTy≥
 =
PACKAGE_188
)

750 
pCurPackage
->
∑ckageLí
 = (
TS_LENGTH_188
 - 
TS_HEAD_LENGTH
 - 1 - 
ad≠tLígth
);

754 
pCurPackage
->
∑ckageLí
 = (
TS_LENGTH_204
 - 
TS_HEAD_LENGTH
 - 1 - 
ad≠tLígth
);

759 i‡(
tsHódInfo
.
∑ckageTy≥
 =
PACKAGE_188
)

761 
pCurPackage
->
∑ckageLí
 = (
TS_LENGTH_188
 - 
TS_HEAD_LENGTH
);

765 
pCurPackage
->
∑ckageLí
 = (
TS_LENGTH_204
 - 
TS_HEAD_LENGTH
);

768 
mem£t
(
pCurPackage
->
∑ckageD©a
, 0x00, (pCurPackage->packageData));

769 
mem˝y
(
pCurPackage
->
∑ckageD©a
, 
pcurD©a
,ÖCurPackage->
∑ckageLí
);

770 
pCurPackage
->
PID
 = 
tsHódInfo
.
ts_pid
;

771 
pCurPackage
->
numbî
 = 
tsHódInfo
.
cou¡î
;

772 
pCurPackage
->
£˘i⁄Lí
 = 
PackageHód
[
i
]->sectionLen;

773 
pCurPackage
->
èbÀID
 = 
PackageHód
[
i
]->tableID;

774 
mem˝y
(&
pCurPackage
->
°Eº‹Info
,&
tsHódInfo
.°Eº‹Info,(
TR101290_ERROR_S
));

776 
∑ckageAŒLí
 +
pCurPackage
->
∑ckageLí
;

778 i‡(
∑ckageAŒLí
 >
PackageHód
[
i
]->
£˘i⁄Lí
)

780 
∑ckageAŒLí
 = 0;

781 
j
 = 
PackageHód
[
i
]->
numbî
;

784 
∑ckageAŒLí
 < 
PackageHód
[
i
]->
£˘i⁄Lí
)

786 
pCurPackage
 = 
PackageHód
[
i
];

787 
pCurPackage
 !
GOSTSR_NULL
)

789 if(
pCurPackage
->
numbî
 =
j
)

791 
∑ckageAŒLí
 +
pCurPackage
->
∑ckageLí
;

792 
j
++;

794 i‡(
j
 == 16)

796 
j
 = 0;

800 
pCurPackage
 =ÖCurPackage->
√xt
;

803 i‡(
GOSTSR_NULL
 =
pCurPackage
)

810 i‡(
GOSTSR_NULL
 =
pCurPackage
)

816 
èbÀID
 = 
PackageHód
[
i
]->tableID;

817 
curSe˘i⁄Lígth
 = 
PackageHód
[
i
]->
£˘i⁄Lí
;

818 
curSe˘i⁄Info
 = (
TS_SECTION_INFO
 *)
mÆloc
((TS_SECTION_INFO));

819 
curSe˘i⁄Info
->
£˘i⁄Lígth
 = 
curSe˘i⁄Lígth
;

820 
curSe˘i⁄Info
->
PID
 = 
tsHódInfo
.
ts_pid
;

821 
curSe˘i⁄Info
->
èbÀID
 =ÅableID;

822 
mem˝y
(&
curSe˘i⁄Info
->
°Eº‹Info
,&
tsHódInfo
.°Eº‹Info,(
TR101290_ERROR_S
));

823 
curSe˘i⁄Info
->
£˘i⁄D©a
 = (
GOSTSR_U8
 *)
mÆloc
(
curSe˘i⁄Lígth
);

824 
mem£t
(
curSe˘i⁄Info
->
£˘i⁄D©a
, 0x00, 
curSe˘i⁄Lígth
);

825 
pSe˘i⁄D©a
 = 
curSe˘i⁄Info
->
£˘i⁄D©a
;

827 
∑ckageAŒLí
 = 0;

828 
∑ckageAŒLí
 < 
curSe˘i⁄Lígth
)

831 
pCurPackage
 = 
PackageHód
[
i
];

832 
¥ePackage
 = 
PackageHód
[
i
];

833 
j
 = 
PackageHód
[
i
]->
numbî
;

835 
pCurPackage
 !
GOSTSR_NULL
)

837 if(
pCurPackage
->
numbî
 =
j
)

839 
j
++;

841 i‡(
j
 == 16)

843 
j
 = 0;

847 
¥ePackage
 = 
pCurPackage
;

848 
pCurPackage
 =ÖCurPackage->
√xt
;

851 i‡(
GOSTSR_NULL
 !
pCurPackage
)

854 i‡((
∑ckageAŒLí
 + 
pCurPackage
->
∑ckageLí
Ë> 
curSe˘i⁄Lígth
)

856 
ªmaöLí
 = 
curSe˘i⁄Lígth
 - 
∑ckageAŒLí
;

860 
ªmaöLí
 = 
pCurPackage
->
∑ckageLí
;

863 
mem˝y
(
pSe˘i⁄D©a
, 
pCurPackage
->
∑ckageD©a
, 
ªmaöLí
);

865 
pSe˘i⁄D©a
 +
ªmaöLí
;

866 
∑ckageAŒLí
 +
pCurPackage
->
∑ckageLí
;

869 i‡(
¥ePackage
 =
PackageHód
[
i
])

871 
PackageHód
[
i
] = 
¥ePackage
->
√xt
;

872 
‰ì
(
¥ePackage
);

873 
¥ePackage
 = 
GOSTSR_NULL
;

877 
¥ePackage
->
√xt
 = 
pCurPackage
->next;

878 
‰ì
(
pCurPackage
);

879 
pCurPackage
 = 
GOSTSR_NULL
;

886 
pCurPackage
 = 
PackageHód
[
i
];

887 
pCurPackage
 !
GOSTSR_NULL
)

889 
¥ePackage
 = 
pCurPackage
;

890 
pCurPackage
 =ÖCurPackage->
√xt
;

891 
‰ì
(
¥ePackage
);

892 
¥ePackage
 = 
GOSTSR_NULL
;

894 
PackageHód
[
i
] = 
GOSTSR_NULL
;

897 
£˘i⁄Fœg
 = 
GOSTSR_TRUE
;

902 i‡(
GOSTSR_TRUE
 =
£˘i⁄Fœg
)

904 
èbÀID
)

906 
PAT_TABLE_ID
:

907 
PMT_TABLE_ID
:

908 
CAT_TABLE_ID
:

909 
NIT_TABLE_ID_ACTUAL
:

910 
NIT_TABLE_ID_OTHER
:

911 
BAT_TABLE_ID
:

912 
SDT_TABLE_ID_ACTUAL
:

913 
SDT_TABLE_ID_OTEHR
:

914 
EIT_TABLE_ID_ACTUAL
:

915 
EIT_TABLE_ID_ACTUAL_SHEDULE
:

916 
EIT_TABLE_ID_OTHER
:

917 
EIT_TABLE_ID_OTHER_SHEDULE
:

918 
TDT_TABLE_ID
:

919 
TOT_TABLE_ID
:

921 
GOSTSR_U16
 
curPos
 = 
curSe˘i⁄Info
->
£˘i⁄Lígth
 - 4;

922 
GOSTSR_U8
 *
pD©a
 = &(
curSe˘i⁄Info
->
£˘i⁄D©a
[
curPos
]);

923 
GOSTSR_U32
 
¸c32
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

924 
GOSTSR_U32
 
ˇlCrc32
 = 0;

925 
ˇlCrc32
 = 
GosT§_A«lysisD©a_CRCCheck
(
curSe˘i⁄Info
->
£˘i⁄D©a
, curSe˘i⁄Info->
£˘i⁄Lígth
 - 4);

928 if(
TsEº‹Check_TwoLevñ_checkCrcEº‹
(&
curSe˘i⁄Info
->
°Eº‹Info
,curSe˘i⁄Info->
èbÀID
, 
¸c32
, 
ˇlCrc32
Ë=
GOSTSR_SUCCESS
)

930  
GOSTSR_FAILURE
;

932 
TsEº‹Check_ThªeLevñ_Se˘i⁄sTimeEº‹
(*
curSe˘i⁄Info
);

934 i‡((
¸c32
 =
ˇlCrc32
Ë|| (
TDT_TABLE_ID
 =
èbÀID
))

936 
GosT§_A«lysisD©a_CÆlBack
(
curSe˘i⁄Info
);

941 
RST_TABLE_ID
:

942 
SI_TABLE_ID
:

948 i‡(
GOSTSR_NULL
 !
curSe˘i⁄Info
)

950 i‡(
GOSTSR_NULL
 !
curSe˘i⁄Info
->
£˘i⁄D©a
)

952 
‰ì
(
curSe˘i⁄Info
->
£˘i⁄D©a
);

953 
curSe˘i⁄Info
->
£˘i⁄D©a
 = 
GOSTSR_NULL
;

955 
‰ì
(
curSe˘i⁄Info
);

956 
curSe˘i⁄Info
 = 
GOSTSR_NULL
;

959  
GOSTSR_SUCCESS
;

962 
GOSTSR_S32
 
GosT§_A«lysisD©a_TSHódInfo
–c⁄° *
§cD©a
, 
TS_HEAD_INFO
 *
desD©a
)

964 
GOSTSR_U8
 *
curD©a
 = 
GOSTSR_NULL
;

965 
GOSTSR_U16
 
ãmpD©a
 = 0;

966 
GOSTSR_S32
 
s32Rë
 = 0;

968 i‡((
GOSTSR_NULL
 =
§cD©a
Ë|| (GOSTSR_NULL =
desD©a
))

970  
GOSTSR_FAILURE
;

973 
curD©a
 = (
GOSTSR_U8
 *)
§cD©a
;

976 i‡(
SYNC_BYTE
 !
curD©a
[0])

978  
GOSTSR_FAILURE
;

981 
curD©a
++;

983 
desD©a
->
îr‹_ödiˇãr
 = (
curD©a
[0] & 
BIT8
) / BIT8;

985 
s32Rë
 = 
TsEº‹Check_TwoLevñ_checkTøn•‹tEº‹
(&
desD©a
->
°Eº‹Info
,desD©a->
îr‹_ödiˇãr
);

986 if(
s32Rë
 =
GOSTSR_SUCCESS
)

988  
GOSTSR_FAILURE
;

992 
desD©a
->
lﬂd_ödiˇãr
 = (
curD©a
[0] & 
BIT7
) / BIT7;

997 
ãmpD©a
 = 
curD©a
[0]*256 + curData[1];

998 
desD©a
->
ts_pid
 = 
ãmpD©a
 & (~((
BIT8
 | 
BIT7
 | 
BIT6
) * 256));

999 
s32Rë
 = 
TsEº‹Check_O√Levñ_pidMissEº‹
(&
desD©a
->
°Eº‹Info
,desD©a->
ts_pid
);

1000 if(
s32Rë
 =
GOSTSR_SUCCESS
)

1005 
curD©a
 += 2;

1007 
desD©a
->
s¸ambÀ_c⁄åﬁ
 = (
curD©a
[0] & (
BIT8
 | 
BIT7
)) / BIT7;

1010 
desD©a
->
ad≠ãr_c⁄åﬁ
 = (
curD©a
[0] & (
BIT6
 | 
BIT5
)) / BIT5;

1013 
desD©a
->
cou¡î
 = 
curD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

1015  
GOSTSR_SUCCESS
;

1018 
GOSTSR_S32
 
GosT§_A«lysisD©a_CheckTsHódInfo
(
TS_HEAD_INFO
 
tsHódInfo
)

1020 
GOSTSR_S32
 
ªt
 = 
GOSTSR_SUCCESS
;

1023 i‡(
tsHódInfo
.
îr‹_ödiˇãr
 =
BIT1
)

1025 
ªt
 |
GOSTSR_FAILURE
;

1029 i‡(
tsHódInfo
.
s¸ambÀ_c⁄åﬁ
 !
BIT0
)

1031 
ªt
 |
GOSTSR_FAILURE
;

1035 i‡((
tsHódInfo
.
ad≠ãr_c⁄åﬁ
 & 
BIT1
) != BIT1)

1037 
ªt
 |
GOSTSR_FAILURE
;

1040  
ªt
;

1043 
GOSTSR_S32
 
GosT§_A«lysisD©a_Ad≠èti⁄Info
(
TS_HEAD_INFO
 *
desD©a
, c⁄° *
d©a
, 
TS_ADAPT_INFO
 *
ad≠tInfo
)

1045 
GOSTSR_U8
 *
curD©a
 = 
GOSTSR_NULL
;

1048 i‡((
GOSTSR_NULL
 =
d©a
Ë|| (GOSTSR_NULL =
ad≠tInfo
))

1050  
GOSTSR_FAILURE
;

1053 i‡((0 =
desD©a
->
ad≠ãr_c⁄åﬁ
) || (1 == desData->adapter_control))

1055 
TsEº‹Check_O√Levñ_C⁄töuôyCou¡îEº‹
(&
desD©a
->
°Eº‹Info
,desD©a->
ts_pid
,desD©a->
cou¡î
,desD©a->
ad≠ãr_c⁄åﬁ
,
ad≠tInfo
->
disC⁄töuôyIndiˇt‹
);

1056  
GOSTSR_SUCCESS
;

1059 
curD©a
 = (
GOSTSR_U8
 *)
d©a
;

1060 
mem£t
(
ad≠tInfo
, 0x00, (
TS_ADAPT_INFO
));

1063 
ad≠tInfo
->
ad≠tLí
 = 
curD©a
[0];

1064 i‡(
ad≠tInfo
->
ad≠tLí
 > 0)

1066 
curD©a
++;

1069 
ad≠tInfo
->
disC⁄töuôyIndiˇt‹
 = (
BIT8
 & 
curD©a
[0]) / BIT8;

1071 
TsEº‹Check_O√Levñ_C⁄töuôyCou¡îEº‹
(&
desD©a
->
°Eº‹Info
,desD©a->
ts_pid
,desD©a->
cou¡î
,desD©a->
ad≠ãr_c⁄åﬁ
,
ad≠tInfo
->
disC⁄töuôyIndiˇt‹
);

1075 
ad≠tInfo
->
øndomAc˚ssIndiˇt‹
 = (
BIT7
 & 
curD©a
[0]) / BIT7;

1078 
ad≠tInfo
->
esPri‹ôyIndiˇt‹
 = (
BIT6
 & 
curD©a
[0]) / BIT6;

1081 
ad≠tInfo
->
p¸Fœg
 = (
BIT5
 & 
curD©a
[0]) / BIT5;

1084 
ad≠tInfo
->
›¸Fœg
 = (
BIT4
 & 
curD©a
[0]) / BIT4;

1087 
ad≠tInfo
->
•licögPoötFœg
 = (
BIT3
 & 
curD©a
[0]) / BIT3;

1090 
ad≠tInfo
->
tsPriv©eFœg
 = (
BIT2
 & 
curD©a
[0]) / BIT2;

1093 
ad≠tInfo
->
ad≠tFõldExãnFœg
 = 
BIT1
 & 
curD©a
[0];

1095 
curD©a
++;

1098 i‡(
ad≠tInfo
->
p¸Fœg
 =
BIT1
)

1101 
ad≠tInfo
->
p¸Info
.
pgClockRfBa£
 = ((((
curD©a
[0]*256 + curD©a[1])*256 + curD©a[2])*256 + curD©a[3])*256 + (curD©a[4] & 
BIT8
)) / BIT8;

1102 
curD©a
 += 4;

1107 
ad≠tInfo
->
p¸Info
.
pgClockRfExãn
 = (
curD©a
[0] & 
BIT1
)*256 + curData[1];

1108 
curD©a
 += 2;

1111 i‡(
ad≠tInfo
->
disC⁄töuôyIndiˇt‹
 =
BIT0
)

1113 
TsEº‹Check_TwoLevñ_checkP¸Eº‹
(&
desD©a
->
°Eº‹Info
,desD©a->
ts_pid
,
ad≠tInfo
->
p¸Info
.
pgClockRfBa£
,ád≠tInfo->p¸Info.
pgClockRfExãn
, 
GOSTSR_TRUE
);

1117 
TsEº‹Check_TwoLevñ_checkP¸Eº‹
(&
desD©a
->
°Eº‹Info
,desD©a->
ts_pid
,
ad≠tInfo
->
p¸Info
.
pgClockRfBa£
,ád≠tInfo->p¸Info.
pgClockRfExãn
, 
GOSTSR_FALSE
);

1122 i‡(
ad≠tInfo
->
›¸Fœg
 =
BIT1
)

1125 
ad≠tInfo
->
p¸Info
.
pgClockRfBa£
 = ((((
curD©a
[0]*256 + curD©a[1])*256 + curD©a[2])*256 + curD©a[3])*256 + (curD©a[4] & 
BIT8
)) / BIT8;

1126 
curD©a
 += 4;

1131 
ad≠tInfo
->
p¸Info
.
pgClockRfExãn
 = (
curD©a
[0] & 
BIT1
)*256 + curData[1];

1132 
curD©a
 += 2;

1136 i‡(
ad≠tInfo
->
•licögPoötFœg
 =
BIT1
)

1138 
ad≠tInfo
->
•li˚Cou¡Down
 = 
curD©a
[0];

1139 
curD©a
++;

1143 i‡(
ad≠tInfo
->
tsPriv©eFœg
 =
BIT1
)

1146 
ad≠tInfo
->
¥iv©eInfo
.
¥iD©aLí
 = 
curD©a
[0];

1147 
curD©a
++;

1150 
mem˝y
(
ad≠tInfo
->
¥iv©eInfo
.
¥iD©a
, 
curD©a
,ád≠tInfo->¥iv©eInfo.
¥iD©aLí
);

1151 
curD©a
 +
ad≠tInfo
->
¥iv©eInfo
.
¥iD©aLí
;

1155 i‡(
ad≠tInfo
->
ad≠tFõldExãnFœg
 =
BIT1
)

1158 
ad≠tInfo
->
exãnsi⁄Info
.
ad≠tExãnLí
 = 
curD©a
[0];

1159 
curD©a
++;

1162 
ad≠tInfo
->
exãnsi⁄Info
.
…wFœg
 = (
curD©a
[0] & 
BIT8
) / BIT8;

1165 
ad≠tInfo
->
exãnsi⁄Info
.
põ˚wi£R©eFœg
 = (
curD©a
[0] & 
BIT7
) / BIT7;

1168 
ad≠tInfo
->
exãnsi⁄Info
.
£amÀssS∂i˚Fœg
 = (
curD©a
[0] & 
BIT6
) / BIT6;

1171 
curD©a
++;

1174 i‡(
ad≠tInfo
->
exãnsi⁄Info
.
…wFœg
 =
BIT1
)

1177 
ad≠tInfo
->
exãnsi⁄Info
.
…wVÆidFœg
 = (
curD©a
[0] & 
BIT8
) / BIT8;

1180 
ad≠tInfo
->
exãnsi⁄Info
.
…wOff£t
 = (
curD©a
[0] & (~
BIT8
))*256 + curData[1];

1181 
curD©a
 += 2;

1185 i‡(
ad≠tInfo
->
exãnsi⁄Info
.
põ˚wi£R©eFœg
 =
BIT1
)

1190 
ad≠tInfo
->
exãnsi⁄Info
.
põ˚wi£R©e
 = (
curD©a
[0] & (~(
BIT8
 + 
BIT7
)))*256*256 + curData[1]*256 + curData[2];

1191 
curD©a
 += 3;

1195 i‡(
ad≠tInfo
->
exãnsi⁄Info
.
£amÀssS∂i˚Fœg
 =
BIT1
)

1198 
ad≠tInfo
->
exãnsi⁄Info
.
•li˚Ty≥
 = 
curD©a
[0] & (~(
BIT4
 + 
BIT3
 + 
BIT2
 + 
BIT1
));

1201 
ad≠tInfo
->
exãnsi⁄Info
.
DTSNextAU
 = ((
curD©a
[0] & (
BIT4
 + 
BIT3
 + 
BIT2
))<<29) + \

1202 ((
curD©a
[1]*256 + (curD©a[2] & (~
BIT1
)))<<14Ë+ (curD©a[3]*256 + (curD©a[4] & (~BIT1))Ë/ 
BIT2
;

1203 
curD©a
 += 5;

1212  
GOSTSR_SUCCESS
;

1215 
GOSTSR_S32
 
GosT§_A«lysisD©a_PESInfo
(
TS_HEAD_INFO
 *
desD©a
,c⁄° *
d©a
, 
TS_PES_INFO
 *
≥sInfo
)

1217 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1219 i‡((
GOSTSR_NULL
 =
d©a
Ë|| (GOSTSR_NULL =
≥sInfo
))

1221  
GOSTSR_FAILURE
;

1224 
pD©a
 = (
GOSTSR_U8
 *)
d©a
;

1225 
mem£t
(
≥sInfo
, 0x00, (
TS_PES_INFO
));

1229 
≥sInfo
->
ps˝
 = (
pD©a
[0]*256 +ÖData[1])*256 +ÖData[2];

1230 
pD©a
 += 3;

1233 
≥sInfo
->
°ªamId
 = 
pD©a
[0];

1234 
pD©a
 += 1;

1237 
≥sInfo
->
≥sPackëLí
 = 
pD©a
[0]*256 +ÖData[1];

1238 
pD©a
 += 2;

1240 i‡((
≥sInfo
->
°ªamId
 !
PROGRAM_STREAM_MAP
) \

1241 && (
≥sInfo
->
°ªamId
 !
PADDING_STREAM
) \

1242 && (
≥sInfo
->
°ªamId
 !
PRIVATE_STREAM_TWO
) \

1243 && (
≥sInfo
->
°ªamId
 !
ECM_STREAM
) \

1244 && (
≥sInfo
->
°ªamId
 !
EMM_STREAM
) \

1245 && (
≥sInfo
->
°ªamId
 !
PROGRAM_STREAM_DIR
))

1250 
≥sInfo
->
≥sS¸ambÀCå
 = (
pD©a
[0] & (
BIT6
 + 
BIT5
)) / BIT5;

1253 
≥sInfo
->
≥sPri‹ty
 = (
pD©a
[0] & 
BIT4
) / BIT4;

1256 
≥sInfo
->
d©aAlignmítIndiˇt‹
 = (
pD©a
[0] & 
BIT3
) / BIT3;

1259 
≥sInfo
->
c›yright
 = (
pD©a
[0] & 
BIT2
) / BIT2;

1262 
≥sInfo
->
‹igöÆOrC›y
 = 
pD©a
[0] & 
BIT1
;

1263 
pD©a
 += 1;

1266 
≥sInfo
->
PTSDTSFœg
 = (
pD©a
[0] & (
BIT8
 + 
BIT7
)) / BIT7;

1269 
≥sInfo
->
ESCRFœg
 = (
pD©a
[0] & 
BIT6
) / BIT6;

1272 
≥sInfo
->
EsR©eFœg
 = (
pD©a
[0] & 
BIT5
) / BIT5;

1275 
≥sInfo
->
DSMTrickModeFœg
 = (
pD©a
[0] & 
BIT4
) / BIT4;

1278 
≥sInfo
->
addôi⁄ÆC›yInfoFœg
 = (
pD©a
[0] & 
BIT3
) / BIT3;

1281 
≥sInfo
->
PESCRCFœg
 = (
pD©a
[0] & 
BIT2
) / BIT2;

1284 
≥sInfo
->
PESExãnsi⁄Fœg
 = 
pD©a
[0] & 
BIT1
;

1285 
pD©a
 += 1;

1288 
≥sInfo
->
PESHódîD©aLí
 = 
pD©a
[0];

1289 
pD©a
 += 1;

1292 i‡(
BIT2
 =
≥sInfo
->
PTSDTSFœg
)

1296 
≥sInfo
->
PTS
 = ((
pD©a
[0] & (
BIT4
 + 
BIT3
 + 
BIT2
))<<29) + \

1297 ((
pD©a
[1]*256 + (pD©a[2] & (~
BIT1
)))<<14Ë+ (’D©a[3]*256 + (pD©a[4] & (~BIT1))Ë/ 
BIT2
);

1298 
pD©a
 += 5;

1300 
TsEº‹Check_TwoLevñ_checkPtsEº‹
(&
desD©a
->
°Eº‹Info
,desD©a->
ts_pid
);

1302 i‡((
BIT1
 + 
BIT2
Ë=
≥sInfo
->
PTSDTSFœg
)

1306 
≥sInfo
->
PTS
 = ((
pD©a
[0] & (
BIT4
 + 
BIT3
 + 
BIT2
))<<29) + \

1307 ((
pD©a
[1]*256 + (pD©a[2] & (~
BIT1
)))<<14Ë+ (’D©a[3]*256 + (pD©a[4] & (~BIT1))Ë/ 
BIT2
);

1308 
pD©a
 += 5;

1311 
TsEº‹Check_TwoLevñ_checkPtsEº‹
(&
desD©a
->
°Eº‹Info
,desD©a->
ts_pid
);

1315 
≥sInfo
->
DTS
 = ((
pD©a
[0] & (
BIT4
 + 
BIT3
 + 
BIT2
))<<29) + \

1316 ((
pD©a
[1]*256 + (pD©a[2] & (~
BIT1
)))<<14Ë+ (’D©a[3]*256 + (pD©a[4] & (~BIT1))Ë/ 
BIT2
);

1317 
pD©a
 += 5;

1321 i‡(
≥sInfo
->
ESCRFœg
 =
BIT1
)

1326 
≥sInfo
->
ESCRBa£
 = ((
pD©a
[0] & (
BIT6
 + 
BIT5
 + 
BIT4
))<<27) + \

1327 ((((
pD©a
[0] & (
BIT2
 + 
BIT1
))*256 +ÖD©a[1])*256 + (pD©a[2] & (~(
BIT3
 + BIT2 + BIT1))))<<12) + \

1328 (((
pD©a
[2] & (
BIT2
 + 
BIT1
))*256 +ÖD©a[3])*256 + (pD©a[4]& (~(
BIT3
 + BIT2 + BIT1)))Ë/ 
BIT4
;

1332 
≥sInfo
->
ESCRExãn
 = ((
pD©a
[4] & (
BIT1
 + 
BIT2
))*256 + (pData[5] & (~BIT1))) / BIT2;

1333 
pD©a
 += 5;

1337 i‡(
≥sInfo
->
EsR©eFœg
 =
BIT1
)

1340 
≥sInfo
->
ESR©e
 = (((
pD©a
[0] & (~
BIT8
))*256 +ÖD©a[1])*256 + (pD©a[2] & (~
BIT1
))Ë/ 
BIT2
;

1341 
pD©a
 += 3;

1345 i‡(
≥sInfo
->
DSMTrickModeFœg
 =
BIT1
)

1348 
≥sInfo
->
åickModeCå
 = (
pD©a
[0] & (
BIT8
 + 
BIT7
 + 
BIT6
)) / BIT6;

1350 i‡((
BIT0
 =
≥sInfo
->
åickModeCå
Ë|| ((
BIT2
 + 
BIT1
) ==ÖesInfo->trickModeCtr))

1353 
≥sInfo
->
fõldId
 = (
pD©a
[0] & (
BIT5
 + 
BIT4
)) / BIT4;

1356 
≥sInfo
->
öåaSli˚Re‰esh
 = (
pD©a
[0] & 
BIT3
) / BIT3;

1359 
≥sInfo
->
‰equícyTrunˇti⁄
 = 
pD©a
[0] & (
BIT2
 + 
BIT1
);

1361 i‡((
BIT1
 =
≥sInfo
->
åickModeCå
Ë|| (
BIT3
 ==ÖesInfo->trickModeCtr))

1364 
≥sInfo
->
fõldRïC¡æ
 = 
pD©a
[0] & (~(
BIT8
 + 
BIT7
 + 
BIT6
));

1366 i‡(
BIT2
 =
≥sInfo
->
åickModeCå
)

1369 
≥sInfo
->
fõldId
 = (
pD©a
[0] & (
BIT5
 + 
BIT4
)) / BIT4;

1378 
pD©a
 += 1;

1382 i‡(
≥sInfo
->
addôi⁄ÆC›yInfoFœg
 =
BIT1
)

1385 
≥sInfo
->
addôi⁄ÆC›yInfo
 = 
pD©a
[0] & (~
BIT8
);

1386 
pD©a
 += 1;

1390 i‡(
≥sInfo
->
PESCRCFœg
 =
BIT1
)

1393 
≥sInfo
->
¥eviousPESPackëCRC
 = 
pD©a
[0]*256 +ÖData[1];

1394 
pD©a
 += 2;

1398 i‡(
≥sInfo
->
PESExãnsi⁄Fœg
 =
BIT1
)

1401 
≥sInfo
->
≥sExãnsi⁄Info
.
PESPriv©eD©aFœg
 = (
pD©a
[0] & 
BIT8
) / BIT8;

1404 
≥sInfo
->
≥sExãnsi⁄Info
.
∑ckHódîFõldFœg
 = (
pD©a
[0] & 
BIT7
) / BIT7;

1407 
≥sInfo
->
≥sExãnsi⁄Info
.
¥ogømPackëSequí˚Cou¡îFœg
 = (
pD©a
[0] & 
BIT6
) / BIT6;

1410 
≥sInfo
->
≥sExãnsi⁄Info
.
PSTDBuf„rFœg
 = (
pD©a
[0] & 
BIT5
) / BIT5;

1415 
≥sInfo
->
≥sExãnsi⁄Info
.
PESExãnsi⁄Fœg2
 = 
pD©a
[0] & 
BIT1
;

1416 
pD©a
 += 1;

1419 i‡(
≥sInfo
->
≥sExãnsi⁄Info
.
PESPriv©eD©aFœg
 =
BIT1
)

1423 
pD©a
 += 16;

1427 i‡(
≥sInfo
->
≥sExãnsi⁄Info
.
∑ckHódîFõldFœg
 =
BIT1
)

1430 
≥sInfo
->
≥sExãnsi⁄Info
.
∑ckFõldLí
 = 
pD©a
[0];

1431 
pD©a
 += 1;

1434 
pD©a
 +
≥sInfo
->
≥sExãnsi⁄Info
.
∑ckFõldLí
;

1438 i‡(
≥sInfo
->
≥sExãnsi⁄Info
.
¥ogømPackëSequí˚Cou¡îFœg
 =
BIT1
)

1441 
≥sInfo
->
≥sExãnsi⁄Info
.
¥ogømPackëSequí˚Cou¡î
 = 
pD©a
[0] & (~
BIT8
);

1442 
pD©a
 += 1;

1445 
≥sInfo
->
≥sExãnsi⁄Info
.
MPEG1MPEG2Idítifõr
 = (
pD©a
[0] & 
BIT7
) / BIT7;

1448 
≥sInfo
->
≥sExãnsi⁄Info
.
‹igöÆStuffLí
 = 
pD©a
[0] & (~(
BIT8
 + 
BIT7
));

1449 
pD©a
 += 1;

1453 i‡(
≥sInfo
->
≥sExãnsi⁄Info
.
PSTDBuf„rFœg
 =
BIT1
)

1458 
≥sInfo
->
≥sExãnsi⁄Info
.
PSTDBuf„rSˇÀ
 = (
pD©a
[0] & 
BIT6
) / BIT6;

1461 
≥sInfo
->
≥sExãnsi⁄Info
.
PSTDBuf„rSize
 = (
pD©a
[0] & (~(
BIT8
 + 
BIT7
 + 
BIT6
)))*256 +ÖData[1];

1462 
pD©a
 += 2;

1466 i‡(
≥sInfo
->
≥sExãnsi⁄Info
.
PESExãnsi⁄Fœg2
 =
BIT1
)

1469 
≥sInfo
->
≥sExãnsi⁄Info
.
PESExãnsi⁄FõldLí
 = 
pD©a
[0] & (~
BIT8
);

1470 
pD©a
 += 1;

1473 
pD©a
 +
≥sInfo
->
≥sExãnsi⁄Info
.
PESExãnsi⁄FõldLí
;

1481 if((
≥sInfo
->
°ªamId
 =
PROGRAM_STREAM_MAP
) \

1482 || (
≥sInfo
->
°ªamId
 =
PRIVATE_STREAM_TWO
) \

1483 || (
≥sInfo
->
°ªamId
 =
ECM_STREAM
) \

1484 || (
≥sInfo
->
°ªamId
 =
EMM_STREAM
) \

1485 || (
≥sInfo
->
°ªamId
 =
PROGRAM_STREAM_DIR
))

1489 i‡(
≥sInfo
->
°ªamId
 =
PADDING_STREAM
)

1494  
GOSTSR_SUCCESS
;

1497 
GOSTSR_S32
 
GosT§_A«lysisD©a_PSI
(c⁄° *
d©a
, 
TS_HEAD_INFO
 
tsHódInfo
)

1499 
GOSTSR_S32
 
i
 = 0;

1500 
GOSTSR_S32
 
ªt
 = 
GOSTSR_FAILURE
;

1502 i‡(
GOSTSR_NULL
 =
d©a
)

1504  
GOSTSR_FAILURE
;

1507 
TsEº‹Check_ThªeLevñ_Uƒe„ªn˚dPidEº‹
(
tsHódInfo
);

1510 
tsHódInfo
.
ts_pid
)

1512 
PAT_PID
:

1514 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
PAT_TABLE_ID
, 
d©a
, 
tsHódInfo
);

1517 
CAT_PID
:

1519 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
CAT_TABLE_ID
, 
d©a
, 
tsHódInfo
);

1522 
NIT_PID
:

1524 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
NIT_TABLE_ID_ACTUAL
, 
d©a
, 
tsHódInfo
);

1525 i‡(
ªt
 =
GOSTSR_FAILURE
)

1527 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
NIT_TABLE_ID_OTHER
, 
d©a
, 
tsHódInfo
);

1534 
i
 = 0; i < 
g°P©Info
.
u16NbEÀmíts
;i++)

1536 if(
g°P©Info
.
a°EÀmít
[
i
].
u16Pid
 =
tsHódInfo
.
ts_pid
)

1539 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
PMT_TABLE_ID
, 
d©a
, 
tsHódInfo
);

1548  
ªt
;

1551 
GOSTSR_S32
 
GosT§_A«lysisD©a_SI
(c⁄° *
d©a
, 
TS_HEAD_INFO
 
tsHódInfo
)

1553 
GOSTSR_S32
 
ªt
 = 
GOSTSR_FAILURE
;

1555 i‡(
GOSTSR_NULL
 =
d©a
)

1557  
GOSTSR_FAILURE
;

1560 
tsHódInfo
.
ts_pid
)

1562 
BAT_SDT_PID
:

1563 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
BAT_TABLE_ID
, 
d©a
, 
tsHódInfo
);

1564 i‡(
GOSTSR_FAILURE
 =
ªt
)

1566 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
SDT_TABLE_ID_ACTUAL
, 
d©a
, 
tsHódInfo
);

1568 i‡(
ªt
 =
GOSTSR_FAILURE
)

1570 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
SDT_TABLE_ID_OTEHR
, 
d©a
, 
tsHódInfo
);

1574 
EIT_PID
:

1575 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
EIT_TABLE_ID_ACTUAL
, 
d©a
, 
tsHódInfo
);

1576 i‡(
ªt
 =
GOSTSR_FAILURE
)

1578 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
EIT_TABLE_ID_OTHER
, 
d©a
, 
tsHódInfo
);

1580 i‡(
ªt
 =
GOSTSR_FAILURE
)

1582 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
EIT_TABLE_ID_OTHER_SHEDULE
, 
d©a
, 
tsHódInfo
);

1584 i‡(
ªt
 =
GOSTSR_FAILURE
)

1586 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
EIT_TABLE_ID_ACTUAL_SHEDULE
, 
d©a
, 
tsHódInfo
);

1590 
RST_PID
:

1591 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
RST_TABLE_ID
, 
d©a
, 
tsHódInfo
);

1594 
TDT_TOT_PID
:

1595 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
TDT_TABLE_ID
, 
d©a
, 
tsHódInfo
);

1596 i‡(
GOSTSR_FAILURE
 =
ªt
)

1598 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
TOT_TABLE_ID
, 
d©a
, 
tsHódInfo
);

1603 i‡((
SI_PID_MIN
 <
tsHódInfo
.
ts_pid
Ë&& (tsHódInfo.ts_pid <
SI_PID_MAX
))

1605 
ªt
 = 
GosT§_A«lysisD©a_TabÀID
(
SI_TABLE_ID
, 
d©a
, 
tsHódInfo
);

1609  
ªt
;

1612 
GOSTSR_S32
 
GosT§_A«lysisD©a_PAT
(
TS_SECTION_INFO
 *
£˘i⁄Info
, 
GOSTSR_PSISI_PAT_S
 *
∑tInfo
)

1614 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1615 
GOSTSR_U16
 
ãmpD©a
 = 0;

1616 
GOSTSR_U16
 
i
 = 0;

1617 
GOSTSR_U32
 
¸cVÆue
 = 0;

1618 
GOSTSR_U16
 
u16OvîNbEÀmíts
 = 0;

1620 i‡((
GOSTSR_NULL
 =
£˘i⁄Info
Ë|| (GOSTSR_NULL =£˘i⁄Info->
£˘i⁄D©a
Ë|| (GOSTSR_NULL =
∑tInfo
))

1622  
GOSTSR_FAILURE
;

1625 
pD©a
 = 
£˘i⁄Info
->
£˘i⁄D©a
;

1626 
mem£t
(
∑tInfo
, 0x00, (
GOSTSR_PSISI_PAT_S
));

1627 
pD©a
 += 3;

1630 
∑tInfo
->
u8TabÀId
 = 
£˘i⁄Info
->
èbÀID
;

1633 
ãmpD©a
 = 
pD©a
[0]*256 +ÖData[1];

1634 
∑tInfo
->
u16Tøn•‹tSåómId
 = 
ãmpD©a
;

1635 
pD©a
 += 2;

1640 
∑tInfo
->
u8Vîsi⁄
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT1
))Ë/ 
BIT2
;

1643 
ãmpD©a
 = 
pD©a
[0] & 
BIT1
;

1644 i‡(
BIT1
 !
ãmpD©a
)

1646  
GOSTSR_FAILURE
;

1648 
pD©a
 += 1;

1651 
∑tInfo
->
u8Se˘i⁄Num
 = 
pD©a
[0];

1652 
pD©a
 += 1;

1655 
∑tInfo
->
u8La°Se˘i⁄Num
 = 
pD©a
[0];

1656 
pD©a
 += 1;

1658 
∑tInfo
->
u16NbEÀmíts
 = (
£˘i⁄Info
->
£˘i⁄Lígth
 - 8 - 4) / 4;

1660 i‡(
∑tInfo
->
u16NbEÀmíts
 > 
GOS_MAX_SERVICE_NUM
)

1662 
u16OvîNbEÀmíts
 = 
∑tInfo
->
u16NbEÀmíts
 - 
GOS_MAX_SERVICE_NUM
;

1663 
∑tInfo
->
u16NbEÀmíts
 = 
GOS_MAX_SERVICE_NUM
;

1666 
i
 = 0; i < 
∑tInfo
->
u16NbEÀmíts
; i++)

1669 
∑tInfo
->
a°EÀmít
[
i
].
u16ProgømNumbî
 = 
pD©a
[0]*256 +ÖData[1];

1672 
∑tInfo
->
a°EÀmít
[
i
].
u16Pid
 = (
pD©a
[2] & (~(
BIT8
 | 
BIT7
 | 
BIT6
)))*256 +ÖData[3] ;

1674 
pD©a
 += 4;

1677 i‡(0 !
u16OvîNbEÀmíts
)

1679 
pD©a
 +4 * 
u16OvîNbEÀmíts
;

1683 
¸cVÆue
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

1684 
∑tInfo
->
u32CrcVÆue
 = 
¸cVÆue
;

1685 
pD©a
 = 
GOSTSR_NULL
;

1687 
GosT§_A«lysisD©a_Re£tPMTID
();

1688 
GosT§_A«lysisD©a_GëPMTID
(
∑tInfo
);

1689 
GosT§_A«lysisD©a_gëP©Info
(
∑tInfo
);

1691  
GOSTSR_SUCCESS
;

1694 
GOSTSR_S32
 
GosT§_A«lysisD©a_CAT
(
TS_SECTION_INFO
 *
£˘i⁄Info
, 
GOSTSR_PSISI_CAT_S
 *
ˇtInfo
)

1696 
GOSTSR_U16
 
i
 = 0;

1697 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1698 
GOSTSR_U16
 
ãmpD©a
 = 0;

1699 
GOSTSR_S32
 
desTŸÆLígth
 = 0;

1700 
GOSTSR_U16
 
desSögÀLígth
 = 0;

1701 
GOSTSR_U32
 
¸cVÆue
 = 0;

1703 i‡((
GOSTSR_NULL
 =
£˘i⁄Info
Ë|| (GOSTSR_NULL =£˘i⁄Info->
£˘i⁄D©a
Ë|| (GOSTSR_NULL =
ˇtInfo
))

1705  
GOSTSR_FAILURE
;

1708 
pD©a
 = 
£˘i⁄Info
->
£˘i⁄D©a
;

1709 
mem£t
(
ˇtInfo
, 0x00, (
GOSTSR_PSISI_CAT_S
));

1710 
pD©a
 += 3;

1713 
ˇtInfo
->
u8TabÀId
 = 
£˘i⁄Info
->
èbÀID
;

1716 
pD©a
 += 2;

1719 
ˇtInfo
->
u8Vîsi⁄
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT1
))Ë/ 
BIT2
;

1722 
ãmpD©a
 = 
pD©a
[0] & 
BIT1
;

1723 i‡(
BIT1
 !
ãmpD©a
)

1725  
GOSTSR_FAILURE
;

1727 
pD©a
 += 1;

1730 
ˇtInfo
->
u8Se˘i⁄Num
 = 
pD©a
[0];

1731 
pD©a
 += 1;

1734 
ˇtInfo
->
u8La°Se˘i⁄Num
 = 
pD©a
[0];

1735 
pD©a
 += 1;

1737 
desTŸÆLígth
 = 
£˘i⁄Info
->
£˘i⁄Lígth
 - 8 - 4;

1738 
i
 = 0;

1740 
desTŸÆLígth
 > 0)

1743 
ˇtInfo
->
a°Des¸ùt‹
[
i
].
Tag
 = (
GOS_PSISI_DESCRIPTORTYPE_E
)
pD©a
[0];

1744 
pD©a
 += 1;

1747 
desSögÀLígth
 = 
pD©a
[0];

1748 
ˇtInfo
->
a°Des¸ùt‹
[
i
].
u16Size
 = 
desSögÀLígth
;

1749 
pD©a
 += 1;

1751 i‡((
desTŸÆLígth
 - (
desSögÀLígth
 + 2)) < 0)

1753 
pD©a
 +(
desTŸÆLígth
 - 2);

1758 
ˇtInfo
->
a°Des¸ùt‹
[
i
].
D©a
 = (
GOSTSR_U8
 *Ë
mÆloc
(
desSögÀLígth
);

1759 
mem£t
(
ˇtInfo
->
a°Des¸ùt‹
[
i
].
D©a
, 0x00, 
desSögÀLígth
);

1760 
mem˝y
(
ˇtInfo
->
a°Des¸ùt‹
[
i
].
D©a
, 
pD©a
, 
desSögÀLígth
);

1762 
pD©a
 +
desSögÀLígth
;

1763 
desTŸÆLígth
 -(
desSögÀLígth
 + 2);

1764 
i
++;

1766 i‡(
i
 >
GOS_MAX_CAT_DESCRIPTOR
)

1768 
pD©a
 +
desTŸÆLígth
;

1772 
ˇtInfo
->
u16NbDes¸ùt‹s
 = 
i
;

1775 
¸cVÆue
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

1776 
ˇtInfo
->
u32CrcVÆue
 = 
¸cVÆue
;

1779 
pD©a
 = 
GOSTSR_NULL
;

1781  
GOSTSR_SUCCESS
;

1784 
GOSTSR_S32
 
GosT§_A«lysisD©a_NIT
(
TS_SECTION_INFO
 *
£˘i⁄Info
, 
GOSTSR_PSISI_NIT_S
 *
nôInfo
)

1786 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1787 
GOSTSR_U16
 
ãmpD©a
 = 0;

1788 
GOSTSR_S32
 
√tDesTŸÆLí
 = 0;

1789 
GOSTSR_U16
 
√tDesSögÀLí
 = 0;

1790 
GOSTSR_S32
 
√tEÀmítTŸÆLí
 = 0;

1791 
GOSTSR_U16
 
i
 = 0, 
j
 = 0;

1792 
GOSTSR_U32
 
¸cVÆue
 = 0;

1794 i‡((
GOSTSR_NULL
 =
£˘i⁄Info
Ë|| (GOSTSR_NULL =£˘i⁄Info->
£˘i⁄D©a
Ë|| (GOSTSR_NULL =
nôInfo
))

1796  
GOSTSR_FAILURE
;

1799 
pD©a
 = 
£˘i⁄Info
->
£˘i⁄D©a
;

1800 
mem£t
(
nôInfo
, 0x00, (
GOSTSR_PSISI_NIT_S
));

1801 
pD©a
 += 3;

1804 
nôInfo
->
u8TabÀId
 = 
£˘i⁄Info
->
èbÀID
;

1807 
nôInfo
->
u16NëW‹kId
 = 
pD©a
[0]*256 +pData[1];

1808 
pD©a
 += 2;

1813 
nôInfo
->
u8Vîsi⁄
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT1
))Ë/ 
BIT2
;

1816 
ãmpD©a
 = 
pD©a
[0] & 
BIT1
;

1817 i‡(
BIT1
 !
ãmpD©a
)

1819  
GOSTSR_FAILURE
;

1821 
pD©a
 += 1;

1824 
nôInfo
->
u8Se˘i⁄Num
 = 
pD©a
[0];

1825 
pD©a
 += 1;

1828 
nôInfo
->
u8La°Se˘i⁄Num
 = 
pD©a
[0];

1829 
pD©a
 += 1;

1834 
√tDesTŸÆLí
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
)))*256 +ÖData[1];

1835 
pD©a
 += 2;

1838 
i
 = 0;

1839 
√tDesTŸÆLí
 > 0)

1842 
nôInfo
->
a°Des¸ùt‹
[
i
].
Tag
 = (
GOS_PSISI_DESCRIPTORTYPE_E
)
pD©a
[0];

1843 
pD©a
 += 1;

1846 
√tDesSögÀLí
 = 
pD©a
[0];

1847 
nôInfo
->
a°Des¸ùt‹
[
i
].
u16Size
 = 
√tDesSögÀLí
;

1848 
pD©a
 += 1;

1850 i‡((
√tDesTŸÆLí
 - (
√tDesSögÀLí
 + 2)) < 0)

1852 
pD©a
 +(
√tDesTŸÆLí
 - 2);

1857 
nôInfo
->
a°Des¸ùt‹
[
i
].
D©a
 = (
GOSTSR_U8
 *)
mÆloc
(
√tDesSögÀLí
);

1858 
mem£t
(
nôInfo
->
a°Des¸ùt‹
[
i
].
D©a
, 0x00, 
√tDesSögÀLí
);

1859 
mem˝y
(
nôInfo
->
a°Des¸ùt‹
[
i
].
D©a
, 
pD©a
, 
√tDesSögÀLí
);

1860 
pD©a
 +
√tDesSögÀLí
;

1862 
√tDesTŸÆLí
 -(
√tDesSögÀLí
 + 2);

1863 
i
++;

1865 i‡(
i
 >
GOS_MAX_NIT_DESCIP_LOOP
)

1867 
pD©a
 +
√tDesTŸÆLí
;

1871 
nôInfo
->
u16NbDes¸ùt‹s
 = 
i
;

1876 
√tEÀmítTŸÆLí
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
)))*256 +ÖData[1];

1877 
pD©a
 += 2;

1880 
j
 = 0; 
i
 = 0;

1881 
√tEÀmítTŸÆLí
 > 0)

1884 
nôInfo
->
a°EÀmít
[
i
].
u16Tøn•‹tSåómId
 = 
pD©a
[0]*256 +ÖData[1];

1885 
pD©a
 += 2;

1888 
nôInfo
->
a°EÀmít
[
i
].
u16OrigöÆNëW‹kId
 = 
pD©a
[0]*256 +ÖData[1];

1889 
pD©a
 += 2;

1894 
√tDesTŸÆLí
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
)))*256 +ÖData[1];

1895 
pD©a
 += 2;

1897 i‡((
√tEÀmítTŸÆLí
 - (6 + 
√tDesTŸÆLí
)) < 0)

1899 
pD©a
 +(
√tEÀmítTŸÆLí
 - 6);

1903 
√tEÀmítTŸÆLí
 -(6 + 
√tDesTŸÆLí
);

1905 
j
 = 0;

1906 
√tDesTŸÆLí
 > 0)

1909 
nôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
Tag
 = (
GOS_PSISI_DESCRIPTORTYPE_E
)
pD©a
[0];

1910 
pD©a
 += 1;

1913 
√tDesSögÀLí
 = 
pD©a
[0];

1914 
nôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
u16Size
 = 
√tDesSögÀLí
;

1915 
pD©a
 += 1;

1917 i‡((
√tDesTŸÆLí
 - (
√tDesSögÀLí
 + 2)) < 0)

1919 
pD©a
 +(
√tDesTŸÆLí
 - 2);

1924 
nôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
 = (
GOSTSR_U8
 *)
mÆloc
(
√tDesSögÀLí
);

1925 
mem£t
(
nôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
, 0x00, 
√tDesSögÀLí
);

1926 
mem˝y
(
nôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
, 
pD©a
, 
√tDesSögÀLí
);

1928 
pD©a
 +
√tDesSögÀLí
;

1929 
√tDesTŸÆLí
 -(
√tDesSögÀLí
 + 2);

1930 
j
++;

1932 i‡(
j
 >
GOS_MAX_NIT_ELEMENT_DESCRIPTOR
)

1934 
pD©a
 +
√tDesTŸÆLí
;

1938 
nôInfo
->
a°EÀmít
[
i
].
u16NbDes¸ùt‹s
 = 
j
;

1940 
i
++;

1942 i‡(
i
 >
GOS_MAX_NIT_ELEMENT
)

1944 
pD©a
 +
√tEÀmítTŸÆLí
;

1948 
nôInfo
->
u16NbEÀmíts
 = 
i
;

1951 
¸cVÆue
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

1952 
nôInfo
->
u32CrcVÆue
 = 
¸cVÆue
;

1954 
pD©a
 = 
GOSTSR_NULL
;

1956  
GOSTSR_SUCCESS
;

1959 
GOSTSR_S32
 
GosT§_A«lysisD©a_PMT
(
TS_SECTION_INFO
 *
£˘i⁄Info
, 
GOSTSR_PSISI_PMT_S
 *
pmtInfo
)

1961 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1962 
GOSTSR_U16
 
ãmpD©a
 = 0;

1963 
GOSTSR_U16
 
i
 = 0, 
j
 = 0;

1964 
GOSTSR_S32
 
pmtDesTŸÆLí
 = 0;

1965 
GOSTSR_U16
 
pmtDesSögÀLí
 = 0;

1966 
GOSTSR_S32
 
pmtElmTŸÆLí
 = 0;

1967 
GOSTSR_U32
 
¸cVÆue
 = 0;

1969 i‡((
GOSTSR_NULL
 =
£˘i⁄Info
Ë|| (GOSTSR_NULL =£˘i⁄Info->
£˘i⁄D©a
Ë|| (GOSTSR_NULL =
pmtInfo
Ë|| (0 =
pmtsPIDNumbî
))

1971  
GOSTSR_FAILURE
;

1974 
pD©a
 = 
£˘i⁄Info
->
£˘i⁄D©a
;

1975 
mem£t
(
pmtInfo
, 0x00, (
GOSTSR_PSISI_PMT_S
));

1976 
pD©a
 += 3;

1979 
pmtInfo
->
u8TabÀId
 = 
£˘i⁄Info
->
èbÀID
;

1982 
pmtInfo
->
u16ProgømNumbî
 = 
pD©a
[0]*256 +ÖData[1];

1983 
pD©a
 += 2;

1988 
pmtInfo
->
u8Vîsi⁄
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT1
))Ë/ 
BIT2
;

1991 
ãmpD©a
 = 
pD©a
[0] & 
BIT1
;

1992 i‡(
BIT1
 !
ãmpD©a
)

1994  
GOSTSR_FAILURE
;

1996 
pD©a
 += 1;

1999 
pmtInfo
->
u8Se˘i⁄Num
 = 
pD©a
[0];

2000 
pD©a
 += 1;

2003 
pmtInfo
->
u8La°Se˘i⁄Num
 = 
pD©a
[0];

2004 
pD©a
 += 1;

2009 
pmtInfo
->
u16P¸Pid
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT6
)))*256 +ÖData[1];

2010 
pD©a
 += 2;

2015 
pmtDesTŸÆLí
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
)))*256 +ÖData[1];

2016 
pD©a
 += 2;

2018 
pmtElmTŸÆLí
 = 
£˘i⁄Info
->
£˘i⁄Lígth
 - 4 - 
pmtDesTŸÆLí
 - 12;

2020 
i
 = 0;

2022 
pmtDesTŸÆLí
 > 0)

2025 
pmtInfo
->
a°Des¸ùt‹
[
i
].
Tag
 = (
GOS_PSISI_DESCRIPTORTYPE_E
)
pD©a
[0];

2026 
pD©a
 += 1;

2029 
pmtDesSögÀLí
 = 
pD©a
[0];

2030 
pmtInfo
->
a°Des¸ùt‹
[
i
].
u16Size
 = 
pmtDesSögÀLí
;

2031 
pD©a
 += 1;

2033 i‡((
pmtDesTŸÆLí
 - (
pmtDesSögÀLí
 + 2)) < 0)

2035 
pD©a
 +(
pmtDesTŸÆLí
 - 2);

2040 
pmtInfo
->
a°Des¸ùt‹
[
i
].
D©a
 = (
GOSTSR_U8
 *)
mÆloc
(
pmtDesSögÀLí
);

2041 
mem£t
(
pmtInfo
->
a°Des¸ùt‹
[
i
].
D©a
, 0x00, 
pmtDesSögÀLí
);

2042 
mem˝y
(
pmtInfo
->
a°Des¸ùt‹
[
i
].
D©a
, 
pD©a
, 
pmtDesSögÀLí
);

2044 
pD©a
 +
pmtDesSögÀLí
;

2045 
pmtDesTŸÆLí
 -(
pmtDesSögÀLí
 + 2);

2046 
i
++;

2048 i‡(
i
 >
GOS_MAX_PMT_DESCIP_LOOP1
)

2050 
pD©a
 +
pmtDesTŸÆLí
;

2054 
pmtInfo
->
u16NbDes¸ùt‹s
 = 
i
;

2056 
i
 = 0;
j
 = 0;

2057 
pmtElmTŸÆLí
 > 0)

2060 
pmtInfo
->
a°EÀmít
[
i
].
eTy≥
 = (
GOS_PSISI_STREAMTYPE_E
)
pD©a
[0];

2061 
pD©a
 += 1;

2066 
pmtInfo
->
a°EÀmít
[
i
].
u16Pid
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT6
)))*256 +ÖData[1];

2067 
pD©a
 += 2;

2072 
pmtDesTŸÆLí
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
)))*256 +ÖData[1];

2073 
pD©a
 += 2;

2075 i‡((
pmtElmTŸÆLí
 - (
pmtDesTŸÆLí
 + 5)) < 0)

2077 
pD©a
 +(
pmtElmTŸÆLí
 - 5);

2081 
pmtElmTŸÆLí
 -(
pmtDesTŸÆLí
 + 5);

2083 
j
 = 0;

2085 
pmtDesTŸÆLí
 > 0)

2088 
pmtInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
Tag
 = (
GOS_PSISI_DESCRIPTORTYPE_E
)
pD©a
[0];

2089 
pD©a
 += 1;

2092 
pmtDesSögÀLí
 = 
pD©a
[0];

2093 
pmtInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
u16Size
 = 
pmtDesSögÀLí
;

2094 
pD©a
 += 1;

2096 i‡((
pmtDesTŸÆLí
 - (
pmtDesSögÀLí
 + 2)) < 0)

2098 
pD©a
 +(
pmtDesTŸÆLí
 - 2);

2103 
pmtInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
 = (
GOSTSR_U8
 *)
mÆloc
(
pmtDesSögÀLí
);

2104 
mem£t
(
pmtInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
, 0x00, 
pmtDesSögÀLí
);

2105 
mem˝y
(
pmtInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
, 
pD©a
, 
pmtDesSögÀLí
);

2107 
pD©a
 +
pmtDesSögÀLí
;

2108 
pmtDesTŸÆLí
 -(
pmtDesSögÀLí
 + 2);

2109 
j
++;

2111 i‡(
j
 >
GOS_MAX_PMT_ELEMENT_DESCRIPTOR
)

2113 
pD©a
 +
pmtDesTŸÆLí
;

2117 
pmtInfo
->
a°EÀmít
[
i
].
u16NbDes¸ùt‹s
 = 
j
;

2119 
i
++;

2121 i‡(
i
 >
GOS_MAX_PMT_ELEMENT
)

2123 
pD©a
 +
pmtElmTŸÆLí
;

2127 
pmtInfo
->
u16NbEÀmíts
 = 
i
;

2130 
¸cVÆue
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

2131 
pmtInfo
->
u32CrcVÆue
 = 
¸cVÆue
;

2132 
pD©a
 = 
GOSTSR_NULL
;

2134  
GOSTSR_SUCCESS
;

2137 
GOSTSR_S32
 
GosT§_A«lysisD©a_SDT
(
TS_SECTION_INFO
 *
£˘i⁄Info
, 
GOSTSR_PSISI_SDT_S
 *
sdtInfo
)

2139 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2140 
GOSTSR_U16
 
ãmpD©a
 = 0;

2141 
GOSTSR_S32
 
sdtDesTŸÆLí
 = 0;

2142 
GOSTSR_U16
 
sdtDesSögÀLí
 = 0;

2143 
GOSTSR_S32
 
sdtEÀTŸÆLí
 = 0;

2144 
GOSTSR_U16
 
i
 = 0, 
j
 = 0;

2145 
GOSTSR_U32
 
¸cVÆue
 = 0;

2147 i‡((
GOSTSR_NULL
 =
£˘i⁄Info
Ë|| (GOSTSR_NULL =£˘i⁄Info->
£˘i⁄D©a
Ë|| (GOSTSR_NULL =
sdtInfo
))

2149  
GOSTSR_FAILURE
;

2152 
pD©a
 = 
£˘i⁄Info
->
£˘i⁄D©a
;

2153 
mem£t
(
sdtInfo
, 0x00, (
GOSTSR_PSISI_SDT_S
));

2154 
pD©a
 += 3;

2157 
sdtInfo
->
u8TabÀId
 = 
£˘i⁄Info
->
èbÀID
;

2160 
sdtInfo
->
u16Tøn•‹tSåómId
 = 
pD©a
[0]*256 +ÖData[1];

2161 
pD©a
 += 2;

2166 
sdtInfo
->
u8Vîsi⁄
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT1
))Ë/ 
BIT2
;

2169 
ãmpD©a
 = 
pD©a
[0] & 
BIT1
;

2170 i‡(
BIT1
 !
ãmpD©a
)

2172  
GOSTSR_FAILURE
;

2174 
pD©a
 += 1;

2177 
sdtInfo
->
u8Se˘i⁄Num
 = 
pD©a
[0];

2178 
pD©a
 += 1;

2181 
sdtInfo
->
u8La°Se˘i⁄Num
 = 
pD©a
[0];

2182 
pD©a
 += 1;

2185 
sdtInfo
->
u16OrigöÆNëW‹kdId
 = 
pD©a
[0]*256 +ÖData[1];

2186 
pD©a
 += 2;

2189 
pD©a
 += 1;

2192 
sdtEÀTŸÆLí
 = 
£˘i⁄Info
->
£˘i⁄Lígth
 - 11 - 4;

2194 
i
 = 0;

2195 
sdtEÀTŸÆLí
 > 0)

2198 
sdtInfo
->
a°EÀmít
[
i
].
u16Sîvi˚Id
 = 
pD©a
[0]*256 +ÖData[1];

2199 
pD©a
 += 2;

2204 
sdtInfo
->
a°EÀmít
[
i
].
bEITScheduÀFœg
 = (
pD©a
[0] & 
BIT2
) / BIT2;

2207 
sdtInfo
->
a°EÀmít
[
i
].
bEITPª£¡FﬁlowögFœg
 = 
pD©a
[0] & 
BIT1
;

2208 
pD©a
 += 1;

2211 
sdtInfo
->
a°EÀmít
[
i
].
eSètus
 = (
GOS_PSISI_TABLE_STATUS_E
)((
pD©a
[0] & (
BIT8
 | 
BIT7
 | 
BIT6
)) / BIT6);

2214 
sdtInfo
->
a°EÀmít
[
i
].
bS¸ambÀd
 = (
pD©a
[0] & 
BIT5
) / BIT5;

2217 
sdtDesTŸÆLí
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
)))*256 +ÖData[1];

2218 
pD©a
 += 2;

2220 i‡((
sdtEÀTŸÆLí
 - (5 + 
sdtDesTŸÆLí
)) < 0)

2222 
pD©a
 +(
sdtEÀTŸÆLí
 - 5);

2226 
sdtEÀTŸÆLí
 -(5 + 
sdtDesTŸÆLí
);

2228 
j
 = 0;

2229 
sdtDesTŸÆLí
 > 0)

2232 
sdtInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
Tag
 = (
GOS_PSISI_DESCRIPTORTYPE_E
)
pD©a
[0];

2233 
pD©a
 += 1;

2236 
sdtDesSögÀLí
 = 
pD©a
[0];

2237 
sdtInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
u16Size
 = 
sdtDesSögÀLí
;

2238 
pD©a
 += 1;

2240 i‡((
sdtDesTŸÆLí
 - (
sdtDesSögÀLí
 + 2)) < 0)

2242 
pD©a
 +(
sdtDesTŸÆLí
 - 2);

2247 
sdtInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
 = (
GOSTSR_U8
 *)
mÆloc
(
sdtDesSögÀLí
);

2248 
mem£t
(
sdtInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
, 0x00, 
sdtDesSögÀLí
);

2249 
mem˝y
(
sdtInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
, 
pD©a
, 
sdtDesSögÀLí
);

2251 
pD©a
 +
sdtDesSögÀLí
;

2252 
sdtDesTŸÆLí
 -(
sdtDesSögÀLí
 + 2);

2253 
j
++;

2255 i‡(
j
 >
GOS_MAX_SDT_ELEMENT_DESCRIPTOR
)

2257 
pD©a
 +
sdtDesTŸÆLí
;

2261 
sdtInfo
->
a°EÀmít
[
i
].
u16NbDes¸ùt‹s
 = 
j
;

2263 
i
++;

2265 i‡(
i
 >
GOS_MAX_SDT_ELEMENT
)

2267 
pD©a
 +
sdtEÀTŸÆLí
;

2271 
sdtInfo
->
u16NbEÀmíts
 = 
i
;

2274 
¸cVÆue
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

2275 
sdtInfo
->
u32CrcVÆue
 = 
¸cVÆue
;

2276 
pD©a
 = 
GOSTSR_NULL
;

2278  
GOSTSR_SUCCESS
;

2281 
GOSTSR_S32
 
GosT§_A«lysisD©a_BAT
(
TS_SECTION_INFO
 *
£˘i⁄Info
, 
GOSTSR_PSISI_BAT_S
 *
b©Info
)

2283 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2284 
GOSTSR_U16
 
ãmpD©a
 = 0;

2285 
GOSTSR_S32
 
b©DesTŸÆLí
 = 0;

2286 
GOSTSR_U16
 
b©DesSögÀLí
 = 0;

2287 
GOSTSR_S32
 
b©ElmTŸÆLí
 = 0;

2288 
GOSTSR_U16
 
i
 = 0, 
j
 = 0;

2289 
GOSTSR_U32
 
¸cVÆue
 = 0;

2291 i‡((
GOSTSR_NULL
 =
£˘i⁄Info
Ë|| (GOSTSR_NULL =£˘i⁄Info->
£˘i⁄D©a
Ë|| (GOSTSR_NULL =
b©Info
))

2293  
GOSTSR_FAILURE
;

2296 
pD©a
 = 
£˘i⁄Info
->
£˘i⁄D©a
;

2297 
mem£t
(
b©Info
, 0x00, (
GOSTSR_PSISI_BAT_S
));

2298 
pD©a
 += 3;

2301 
b©Info
->
u8TabÀId
 = 
£˘i⁄Info
->
èbÀID
;

2304 
b©Info
->
u16Bouquë_id
 = 
pD©a
[0]*256 +ÖData[1];

2305 
pD©a
 += 2;

2310 
b©Info
->
u8Vîsi⁄
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT1
))Ë/ 
BIT2
;

2313 
ãmpD©a
 = 
pD©a
[0] & 
BIT1
;

2314 i‡(
BIT1
 !
ãmpD©a
)

2316  
GOSTSR_FAILURE
;

2318 
pD©a
 += 1;

2321 
b©Info
->
u8Se˘i⁄Num
 = 
pD©a
[0];

2322 
pD©a
 += 1;

2325 
b©Info
->
u8La°Se˘i⁄Num
 = 
pD©a
[0];

2326 
pD©a
 += 1;

2331 
b©DesTŸÆLí
 = (
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
))*256 +ÖData[1];

2332 
pD©a
 += 2;

2334 
i
 = 0;

2336 
b©DesTŸÆLí
 > 0)

2339 
b©Info
->
a°Des¸ùt‹
[
i
].
Tag
 = (
GOS_PSISI_DESCRIPTORTYPE_E
)
pD©a
[0];

2340 
pD©a
 += 1;

2343 
b©DesSögÀLí
 = 
pD©a
[0];

2344 
b©Info
->
a°Des¸ùt‹
[
i
].
u16Size
 = 
b©DesSögÀLí
;

2345 
pD©a
 += 1;

2347 i‡((
b©DesTŸÆLí
 - (
b©DesSögÀLí
 + 2)) < 0)

2349 
pD©a
 +(
b©DesTŸÆLí
 - 2);

2354 
b©Info
->
a°Des¸ùt‹
[
i
].
D©a
 = (
GOSTSR_U8
 *)
mÆloc
(
b©DesSögÀLí
);

2355 
mem£t
(
b©Info
->
a°Des¸ùt‹
[
i
].
D©a
, 0x00, 
b©DesSögÀLí
);

2356 
mem˝y
(
b©Info
->
a°Des¸ùt‹
[
i
].
D©a
, 
pD©a
, 
b©DesSögÀLí
);

2358 
pD©a
 +
b©DesSögÀLí
;

2359 
b©DesTŸÆLí
 -(
b©DesSögÀLí
 + 2);

2360 
i
++;

2362 i‡(
i
 >
GOS_MAX_BAT_DESCIP_LOOP1
)

2364 
pD©a
 +
b©DesTŸÆLí
;

2368 
b©Info
->
u16NbDes¸ùt‹s
 = 
i
;

2373 
b©ElmTŸÆLí
 = (
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
))*256 +ÖData[1];

2374 
pD©a
 += 2;

2376 
i
 = 0;
j
 = 0;

2378 
b©ElmTŸÆLí
 > 0)

2381 
b©Info
->
a°EÀmít
[
i
].
u16Tøn•‹tSåómId
 = 
pD©a
[0]*256 +ÖData[1];

2382 
pD©a
 += 2;

2385 
b©Info
->
a°EÀmít
[
i
].
u16OrigöÆNëw‹kId
 = 
pD©a
[0]*256 +ÖData[1];

2386 
pD©a
 += 2;

2391 
b©DesTŸÆLí
 = (
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
))*256 +ÖData[1];

2392 
pD©a
 += 2;

2394 i‡((
b©ElmTŸÆLí
 - (6 + 
b©DesTŸÆLí
)) < 0)

2396 
pD©a
 +(
b©ElmTŸÆLí
 - 6);

2400 
b©ElmTŸÆLí
 -(6 + 
b©DesTŸÆLí
);

2402 
j
 = 0;

2404 
b©DesTŸÆLí
 > 0)

2407 
b©Info
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
Tag
 = (
GOS_PSISI_DESCRIPTORTYPE_E
)
pD©a
[0];

2408 
pD©a
 += 1;

2411 
b©DesSögÀLí
 = 
pD©a
[0];

2412 
b©Info
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
u16Size
 = 
b©DesSögÀLí
;

2413 
pD©a
 += 1;

2415 i‡((
b©DesTŸÆLí
 - (
b©DesSögÀLí
 + 2)) < 0)

2417 
pD©a
 +(
b©DesTŸÆLí
 - 2);

2422 
b©Info
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
 = (
GOSTSR_U8
 *)
mÆloc
(
b©DesSögÀLí
);

2423 
mem£t
(
b©Info
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
, 0x00, 
b©DesSögÀLí
);

2424 
mem˝y
(
b©Info
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
, 
pD©a
, 
b©DesSögÀLí
);

2426 
pD©a
 +
b©DesSögÀLí
;

2427 
b©DesTŸÆLí
 -(
b©DesSögÀLí
 + 2);

2428 
j
++;

2430 i‡(
j
 >
GOS_MAX_BAT_ELEMENT_DESCRIPTOR
)

2432 
pD©a
 +
b©DesTŸÆLí
;

2436 
b©Info
->
a°EÀmít
[
i
].
u16NbDes¸ùt‹s
 = 
j
;

2438 
i
++;

2440 i‡(
i
 >
GOS_MAX_BAT_ELEMENT
)

2442 
pD©a
 +
b©ElmTŸÆLí
;

2446 
b©Info
->
u16NbEÀmíts
 = 
i
;

2449 
¸cVÆue
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

2450 
b©Info
->
u32CrcVÆue
 = 
¸cVÆue
;

2451 
pD©a
 = 
GOSTSR_NULL
;

2453  
GOSTSR_SUCCESS
;

2456 
GOSTSR_S32
 
GosT§_A«lysisD©a_EIT
(
TS_SECTION_INFO
 *
£˘i⁄Info
, 
GOSTSR_PSISI_EIT_S
 *
eôInfo
)

2458 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2459 
GOSTSR_U16
 
ãmpD©a
 = 0;

2460 
GOSTSR_S32
 
eôDesTŸÆLí
 = 0;

2461 
GOSTSR_U16
 
eôDesSögÀLí
 = 0;

2462 
GOSTSR_S32
 
eôEÀTŸÆLí
 = 0;

2463 
GOSTSR_U16
 
i
 = 0, 
j
 = 0;

2464 
GOSTSR_U32
 
¸cVÆue
 = 0;

2466 i‡((
GOSTSR_NULL
 =
£˘i⁄Info
Ë|| (GOSTSR_NULL =£˘i⁄Info->
£˘i⁄D©a
Ë|| (GOSTSR_NULL =
eôInfo
))

2468  
GOSTSR_FAILURE
;

2471 
pD©a
 = 
£˘i⁄Info
->
£˘i⁄D©a
;

2472 
mem£t
(
eôInfo
, 0x00, (
GOSTSR_PSISI_SDT_S
));

2473 
pD©a
 += 3;

2476 
eôInfo
->
u8TabÀId
 = 
£˘i⁄Info
->
èbÀID
;

2479 
eôInfo
->
u16Sîvi˚Id
 = 
pD©a
[0]*256 +ÖData[1];

2480 
pD©a
 += 2;

2485 
eôInfo
->
u8Vîsi⁄
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT1
))Ë/ 
BIT2
;

2488 
ãmpD©a
 = 
pD©a
[0] & 
BIT1
;

2489 i‡(
BIT1
 !
ãmpD©a
)

2491  
GOSTSR_FAILURE
;

2493 
pD©a
 += 1;

2496 
eôInfo
->
u8Se˘i⁄Num
 = 
pD©a
[0];

2497 
pD©a
 += 1;

2500 
eôInfo
->
u8La°Se˘i⁄Num
 = 
pD©a
[0];

2501 
pD©a
 += 1;

2504 
eôInfo
->
u16Tøn•‹tSåómId
 = 
pD©a
[0]*256 +ÖData[1];

2505 
pD©a
 += 2;

2508 
eôInfo
->
u16OrigöÆNëW‹kdId
 = 
pD©a
[0]*256 +ÖData[1];

2509 
pD©a
 += 2;

2512 
eôInfo
->
u8SegLa°Se˘i⁄Num
 = 
pD©a
[0];

2513 
pD©a
 += 1;

2516 
eôInfo
->
u8La°TabeId
 = 
pD©a
[0];

2517 
pD©a
 += 1;

2519 
eôEÀTŸÆLí
 = 
£˘i⁄Info
->
£˘i⁄Lígth
 - 14 - 4;

2521 
i
 = 0; 
j
 = 0;

2522 
eôEÀTŸÆLí
 > 0)

2525 
eôInfo
->
a°EÀmít
[
i
].
u16EvítId
 = 
pD©a
[0]*256 +ÖData[1];

2526 
pD©a
 += 2;

2529 
eôInfo
->
a°EÀmít
[
i
].
u32SèπTimeW‹d
[0] = 
pD©a
[0];

2530 
eôInfo
->
a°EÀmít
[
i
].
u32SèπTimeW‹d
[1] = (
pD©a
[1]<<24) + (pData[2]<<16) + (pData[3]<<8) +ÖData[4];

2531 
pD©a
 += 5;

2534 
eôInfo
->
a°EÀmít
[
i
].
u32Duøti⁄TimeW‹d
 = (
pD©a
[0]<<16) + (pData[1]<<8) +ÖData[2];

2535 
pD©a
 += 3;

2538 
eôInfo
->
a°EÀmít
[
i
].
eSètus
 = (
GOS_PSISI_TABLE_STATUS_E
)((
pD©a
[0] & (
BIT8
 | 
BIT7
 | 
BIT6
)) / BIT6);

2541 
eôInfo
->
a°EÀmít
[
i
].
bS¸ambÀd
 = (
pD©a
[0] & 
BIT5
) / BIT5;

2544 
eôDesTŸÆLí
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
)))*256 +ÖData[1];

2545 
pD©a
 += 2;

2547 i‡((
eôEÀTŸÆLí
 - (12 + 
eôDesTŸÆLí
)) < 0)

2549 
pD©a
 +(
eôEÀTŸÆLí
 - 12);

2553 
eôEÀTŸÆLí
 -(12 + 
eôDesTŸÆLí
);

2555 
j
 = 0;

2556 
eôDesTŸÆLí
 > 0)

2559 
eôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
Tag
 = (
GOS_PSISI_DESCRIPTORTYPE_E
)
pD©a
[0];

2560 
pD©a
 += 1;

2563 
eôDesSögÀLí
 = 
pD©a
[0];

2564 
eôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
u16Size
 = 
eôDesSögÀLí
;

2565 
pD©a
 += 1;

2567 i‡((
eôDesTŸÆLí
 - (
eôDesSögÀLí
 + 2)) < 0)

2569 
pD©a
 +(
eôDesTŸÆLí
 - 2);

2574 
eôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
 = 
GOSTSR_NULL
;

2575 
eôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
 = (
GOSTSR_U8
 *)
mÆloc
(
eôDesSögÀLí
);

2576 i‡(
GOSTSR_NULL
 =
eôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
)

2578  
GOSTSR_FAILURE
;

2580 
mem£t
(
eôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
, 0x00, 
eôDesSögÀLí
);

2581 
mem˝y
(
eôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
, 
pD©a
, 
eôDesSögÀLí
);

2583 
pD©a
 +
eôDesSögÀLí
;

2585 
eôDesTŸÆLí
 -(
eôDesSögÀLí
 + 2);

2587 
j
++;

2589 i‡(
j
 >
GOS_MAX_EIT_ELEMENT_DESCRIPTOR
)

2591 
pD©a
 +
eôDesTŸÆLí
;

2595 
eôInfo
->
a°EÀmít
[
i
].
u16NbDes¸ùt‹s
 = 
j
;

2597 
i
++;

2599 i‡(
i
 >
GOS_MAX_EIT_ELEMENT
)

2601 
pD©a
 +
eôEÀTŸÆLí
;

2605 
eôInfo
->
u16NbEÀmíts
 = 
i
;

2608 
¸cVÆue
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

2609 
eôInfo
->
u32CrcVÆue
 = 
¸cVÆue
;

2610 
pD©a
 = 
GOSTSR_NULL
;

2612  
GOSTSR_SUCCESS
;

2615 
GOSTSR_S32
 
GosT§_A«lysisD©a_TDT
(
TS_SECTION_INFO
 *
£˘i⁄Info
, 
GOSTSR_PSISI_TDT_S
 *
tdtInfo
)

2617 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2619 i‡((
GOSTSR_NULL
 =
£˘i⁄Info
Ë|| (GOSTSR_NULL =£˘i⁄Info->
£˘i⁄D©a
Ë|| (GOSTSR_NULL =
tdtInfo
))

2621  
GOSTSR_FAILURE
;

2624 
pD©a
 = 
£˘i⁄Info
->
£˘i⁄D©a
;

2625 
mem£t
(
tdtInfo
, 0x00, (
GOSTSR_PSISI_TDT_S
));

2627 
pD©a
 += 3;

2630 
tdtInfo
->
u16MJDtime
 = 
pD©a
[0]*256 +ÖData[1];

2631 
pD©a
 += 2;

2633 
tdtInfo
->
u32UTCtimeDW‹d
 = (
pD©a
[0]<<16) + (pData[1]<<8) +ÖData[2];

2636 
tdtInfo
->
utcTime
.
u8Hour
 = (
pD©a
[0] & 0xf0)*10 + (pData[0] &0x0f);

2639 
tdtInfo
->
utcTime
.
u8Möuã
 = (
pD©a
[1] & 0xf0)*10 + (pData[1] &0x0f);

2642 
tdtInfo
->
utcTime
.
u8Sec⁄d
(
pD©a
[2] & 0xf0)*10 + (pData[2] &0x0f);

2644 
pD©a
 = 
GOSTSR_NULL
;

2646  
GOSTSR_SUCCESS
;

2649 
GOSTSR_S32
 
GosT§_A«lysisD©a_TOT
(
TS_SECTION_INFO
 *
£˘i⁄Info
, 
GOSTSR_PSISI_TOT_S
 *
tŸInfo
)

2651 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2652 
GOSTSR_S32
 
tŸDesTŸÆLí
 = 0;

2653 
GOSTSR_U16
 
tŸDesSögÀLí
 = 0;

2654 
GOSTSR_U16
 
i
 = 0;

2655 
GOSTSR_U32
 
¸cVÆue
 = 0;

2657 i‡((
GOSTSR_NULL
 =
£˘i⁄Info
Ë|| (GOSTSR_NULL =£˘i⁄Info->
£˘i⁄D©a
Ë|| (GOSTSR_NULL =
tŸInfo
))

2659  
GOSTSR_FAILURE
;

2662 
pD©a
 = 
£˘i⁄Info
->
£˘i⁄D©a
;

2663 
mem£t
(
tŸInfo
, 0x00, (
GOSTSR_PSISI_TOT_S
));

2665 
pD©a
 += 3;

2668 
tŸInfo
->
u16MJDtime
 = 
pD©a
[0]*256 +ÖData[1];

2669 
pD©a
 += 2;

2671 
tŸInfo
->
u32UTCtimeDW‹d
 = (
pD©a
[0]<<16) + (pData[1]<<8) +ÖData[2];

2672 
pD©a
 += 3;

2677 
tŸDesTŸÆLí
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
)))*256 +ÖData[1];

2678 
pD©a
 += 2;

2680 
i
 = 0;

2681 
tŸDesTŸÆLí
 > 0)

2684 
tŸInfo
->
°LoˇlTimeOffDesc
[
i
].
Tag
 = (
GOS_PSISI_DESCRIPTORTYPE_E
)
pD©a
[0];

2685 
pD©a
 += 1;

2688 
tŸDesSögÀLí
 = 
pD©a
[0];

2689 
tŸInfo
->
°LoˇlTimeOffDesc
[
i
].
u16Size
 = 
tŸDesSögÀLí
;

2690 
pD©a
 += 1;

2692 i‡((
tŸDesTŸÆLí
 - (
tŸDesSögÀLí
 + 2)) < 0)

2694 
pD©a
 +(
tŸDesTŸÆLí
 - 2);

2699 
tŸInfo
->
°LoˇlTimeOffDesc
[
i
].
D©a
 = (
GOSTSR_U8
*)
mÆloc
(
tŸDesSögÀLí
);

2700 
mem£t
(
tŸInfo
->
°LoˇlTimeOffDesc
[
i
].
D©a
, 0x00, 
tŸDesSögÀLí
);

2701 
mem˝y
(
tŸInfo
->
°LoˇlTimeOffDesc
[
i
].
D©a
, 
pD©a
, 
tŸDesSögÀLí
);

2703 
pD©a
 +
tŸDesSögÀLí
;

2704 
tŸDesTŸÆLí
 -(
tŸDesSögÀLí
 + 2);

2705 
i
++;

2707 i‡(
i
 >
GOS_MAX_TOT_DESCRIPTOR
)

2709 
pD©a
 +
tŸDesTŸÆLí
;

2713 
tŸInfo
->
u16NbDes¸ùt‹s
 = 
i
;

2716 
¸cVÆue
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

2717 
tŸInfo
->
u32CrcVÆue
 = 
¸cVÆue
;

2718 
pD©a
 = 
GOSTSR_NULL
;

2720  
GOSTSR_SUCCESS
;

2723 
GOSTSR_S32
 
GosT§_A«lysisD©a_RST
(
TS_SECTION_INFO
 *
£˘i⁄Info
, 
GOSTSR_PSISI_RST_S
 *
r°Info
)

2725 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2726 
GOSTSR_U16
 
i
 = 0;

2728 i‡((
GOSTSR_NULL
 =
£˘i⁄Info
Ë|| (GOSTSR_NULL =£˘i⁄Info->
£˘i⁄D©a
Ë|| (GOSTSR_NULL =
r°Info
))

2730  
GOSTSR_FAILURE
;

2733 
pD©a
 = 
£˘i⁄Info
->
£˘i⁄D©a
;

2734 
mem£t
(
r°Info
, 0x00, (
GOSTSR_PSISI_RST_S
));

2736 
pD©a
 += 3;

2739 
r°Info
->
u16NbEÀmíts
 = 
£˘i⁄Info
->
£˘i⁄Lígth
 / 9;

2740 i‡(
r°Info
->
u16NbEÀmíts
 > 
GOS_MAX_RTT_ELEMENT
)

2742 
r°Info
->
u16NbEÀmíts
 = 
GOS_MAX_RTT_ELEMENT
;

2745 
i
 = 0; i < 
r°Info
->
u16NbEÀmíts
; i++)

2748 
r°Info
->
a°EÀmít
[
i
].
u16Tøn•‹tSåómId
 = 
pD©a
[0]*256 +ÖData[1];

2749 
pD©a
 += 2;

2752 
r°Info
->
a°EÀmít
[
i
].
u16OrigöÆNëW‹kdId
 = 
pD©a
[0]*256 +ÖData[1];

2753 
pD©a
 += 2;

2756 
r°Info
->
a°EÀmít
[
i
].
u16Sîvi˚Id
 = 
pD©a
[0]*256 +ÖData[1];

2757 
pD©a
 += 2;

2760 
r°Info
->
a°EÀmít
[
i
].
u16EvítId
 = 
pD©a
[0]*256 +ÖData[1];

2761 
pD©a
 += 2;

2766 
r°Info
->
a°EÀmít
[
i
].
u8RunSètus
 = 
pD©a
[0] & (
BIT3
 | 
BIT2
 | 
BIT1
);

2767 
pD©a
 += 1;

2770 
pD©a
 = 
GOSTSR_NULL
;

2772  
GOSTSR_SUCCESS
;

2775 
GOSTSR_S32
 
GosT§_A«lysisD©a_ST
(
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_ST_S
 *
°Info
)

2777 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2778 
GOSTSR_U16
 
ãmpSe˘i⁄Lí
 = 0;

2779 
GOSTSR_U16
 
ãmpD©a
 = 0;

2781 i‡((
GOSTSR_NULL
 =
£˘i⁄D©a
Ë|| (GOSTSR_NULL =£˘i⁄D©a->£˘i⁄D©aË|| (GOSTSR_NULL =
°Info
))

2783  
GOSTSR_FAILURE
;

2786 
pD©a
 = 
£˘i⁄D©a
->sectionData;

2787 
mem£t
(
°Info
, 0x00, (
GOSTSR_PSISI_DIT_S
));

2790 
°Info
->
u8TabÀId
 = 
£˘i⁄D©a
->
èbÀID
;

2791 
pD©a
 += 1;

2794 
ãmpD©a
 = (
pD©a
[0] & 
BIT8
) / BIT8;

2797 
ãmpD©a
 = (
pD©a
[0] & 
BIT7
) / BIT7;

2800 
ãmpD©a
 = (
pD©a
[0] & (
BIT6
 |
BIT5
)) / BIT5;

2803 
ãmpSe˘i⁄Lí
 = ((
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
)) << 8) +ÖData[1];

2804 
pD©a
 += 2;

2807 
ãmpSe˘i⁄Lí
 > 0)

2810 
ãmpD©a
 = 
pD©a
[0];

2813 i‡(
ãmpD©a
)

2817 
pD©a
 = 
GOSTSR_NULL
;

2819  
GOSTSR_SUCCESS
;

2822 
GOSTSR_S32
 
GosT§_A«lysisD©a_DIT
(
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_DIT_S
 *
dôInfo
)

2824 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2825 
GOSTSR_U16
 
ãmpD©a
 = 0;

2827 i‡((
GOSTSR_NULL
 =
£˘i⁄D©a
Ë|| (GOSTSR_NULL =£˘i⁄D©a->£˘i⁄D©aË|| (GOSTSR_NULL =
dôInfo
))

2829  
GOSTSR_FAILURE
;

2832 
pD©a
 = 
£˘i⁄D©a
->sectionData;

2833 
mem£t
(
dôInfo
, 0x00, (
GOSTSR_PSISI_DIT_S
));

2836 
dôInfo
->
u8TabÀId
 = 
£˘i⁄D©a
->
èbÀID
;

2837 
pD©a
 += 1;

2840 
ãmpD©a
 = (
pD©a
[0] & 
BIT8
) / BIT8;

2841 i‡(0x00 !
ãmpD©a
)

2843  
GOSTSR_FAILURE
;

2847 
ãmpD©a
 = (
pD©a
[0] & 
BIT7
) / BIT7;

2850 
ãmpD©a
 = (
pD©a
[0] & 
BIT6
) / BIT6;

2853 
ãmpD©a
 = ((
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
)) << 8) +ÖData[1];

2854 
pD©a
 += 2;

2857 
dôInfo
->
u8Tønsôi⁄Fœg
 = (
pD©a
[0] & 
BIT8
) / BIT8;

2860 
ãmpD©a
 = 
pD©a
[0] & (~(
BIT8
));

2862 
pD©a
 = 
GOSTSR_NULL
;

2864  
GOSTSR_SUCCESS
;

2867 
GOSTSR_S32
 
GosT§_A«lysisD©a_SIT
(
TS_SECTION_INFO
 *
£˘i⁄D©a
, 
GOSTSR_PSISI_SIT_S
 *
sôInfo
)

2869 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2870 
GOSTSR_U16
 
ãmpD©a
 = 0;

2871 
GOSTSR_S32
 
sôDesTempLí
 = 0;

2872 
GOSTSR_S32
 
sôDesTŸÆLí
 = 0;

2873 
GOSTSR_U16
 
sôDesSögÀLí
 = 0;

2874 
GOSTSR_S32
 
sôElmTŸÆLí
 = 0;

2875 
GOSTSR_U16
 
i
 = 0;

2876 
GOSTSR_U16
 
j
 = 0;

2878 i‡((
GOSTSR_NULL
 =
£˘i⁄D©a
Ë|| (GOSTSR_NULL =£˘i⁄D©a->£˘i⁄D©aË|| (GOSTSR_NULL =
sôInfo
))

2880  
GOSTSR_FAILURE
;

2883 
pD©a
 = 
£˘i⁄D©a
->sectionData;

2884 
mem£t
(
sôInfo
, 0x00, (
GOSTSR_PSISI_SIT_S
));

2887 
sôInfo
->
u8TabÀId
 = 
£˘i⁄D©a
->
èbÀID
;

2888 
pD©a
 += 1;

2891 
ãmpD©a
 = (
pD©a
[0] & 
BIT8
) / BIT8;

2892 i‡(0x01 !
ãmpD©a
)

2894  
GOSTSR_FAILURE
;

2898 
ãmpD©a
 = (
pD©a
[0] & 
BIT7
) / BIT7;

2901 
ãmpD©a
 = (
pD©a
[0] & (
BIT6
 | 
BIT5
)) / BIT5;

2904 
ãmpD©a
 = ((
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
)) << 8 )+ÖData[1];

2905 
pD©a
 += 2;

2908 
ãmpD©a
 = (
pD©a
[0] << 8) +ÖData[1];

2909 
pD©a
 += 2;

2912 
ãmpD©a
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
)) / BIT7;

2915 
sôInfo
->
u8Vîsi⁄Num
 = (
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT1
))Ë/ 
BIT2
;

2918 
ãmpD©a
 = 
pD©a
[0] & 
BIT1
;

2919 i‡(
BIT1
 !
ãmpD©a
)

2921  
GOSTSR_FAILURE
;

2923 
pD©a
 += 1;

2926 
sôInfo
->
u8Se˘i⁄Num
 = 
pD©a
[0];

2927 
pD©a
 += 1;

2930 
sôInfo
->
u8La°Se˘i⁄Num
 = 
pD©a
[0];

2931 
pD©a
 += 1;

2934 
ãmpD©a
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
)) / BIT5;

2937 
sôDesTempLí
 = (
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
)) * 256 +ÖData[1];

2938 
pD©a
 += 2;

2940 
i
 = 0;

2941 
sôDesTŸÆLí
 = 
sôDesTempLí
;

2944 
sôDesTŸÆLí
 > 0)

2947 
sôInfo
->
a°Des¸ùt‹
[
i
].
Tag
 = (
GOS_PSISI_DESCRIPTORTYPE_E
)
pD©a
[0];

2948 
pD©a
 += 1;

2951 
sôDesSögÀLí
 = 
pD©a
[0];

2952 
sôInfo
->
a°Des¸ùt‹
[
i
].
u16Size
 = 
sôDesSögÀLí
;

2953 
pD©a
 += 1;

2955 i‡((
sôDesTŸÆLí
 - (
sôDesSögÀLí
 + 2)) < 0)

2957 
pD©a
 +(
sôDesTŸÆLí
 - 2);

2962 
sôInfo
->
a°Des¸ùt‹
[
i
].
D©a
 = (
GOSTSR_U8
 *)
mÆloc
(
sôDesSögÀLí
);

2963 
mem£t
(
sôInfo
->
a°Des¸ùt‹
[
i
].
D©a
, 0x00, 
sôDesSögÀLí
);

2964 
mem˝y
(
sôInfo
->
a°Des¸ùt‹
[
i
].
D©a
, 
pD©a
, 
sôDesSögÀLí
);

2966 
pD©a
 +
sôDesSögÀLí
;

2967 
sôDesTŸÆLí
 -(
sôDesSögÀLí
 + 2);

2968 
i
++;

2970 i‡(
i
 >
GOS_MAX_SIT_DESCIP_LOOP1
)

2972 
pD©a
 +
sôDesTŸÆLí
;

2976 
sôInfo
->
u16NbDes¸ùt‹s
 = 
i
;

2979 
sôElmTŸÆLí
 = 
sôDesTempLí
;

2980 
i
 = 0;
j
 = 0;

2983 
sôElmTŸÆLí
 > 0)

2986 
sôInfo
->
a°EÀmít
[
i
].
u16Sîvi˚Id
 = 
pD©a
[0]*256 +ÖData[1];

2987 
pD©a
 += 2;

2990 
ãmpD©a
 = (
pD©a
[0] & (
BIT8
)) / BIT8;

2993 
sôInfo
->
a°EÀmít
[
i
].
u8RunSètus
(
pD©a
[0] & (
BIT7
 | 
BIT6
 | 
BIT5
 )) / BIT5;

2996 
sôDesTŸÆLí
 = (
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
))*256 +ÖData[1];

2997 
pD©a
 += 2;

2999 i‡((
sôElmTŸÆLí
 - (4 + 
sôDesTŸÆLí
)) < 0)

3001 
pD©a
 +(
sôElmTŸÆLí
 - 4);

3005 
sôElmTŸÆLí
 -(4 + 
sôDesTŸÆLí
);

3007 
j
 = 0;

3009 
sôDesTŸÆLí
 > 0)

3012 
sôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
Tag
 = (
GOS_PSISI_DESCRIPTORTYPE_E
)
pD©a
[0];

3013 
pD©a
 += 1;

3016 
sôDesSögÀLí
 = 
pD©a
[0];

3017 
sôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
u16Size
 = 
sôDesSögÀLí
;

3018 
pD©a
 += 1;

3020 i‡((
sôDesTŸÆLí
 - (
sôDesSögÀLí
 + 2)) < 0)

3022 
pD©a
 +(
sôDesTŸÆLí
 - 2);

3027 
sôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
 = (
GOSTSR_U8
 *)
mÆloc
(
sôDesSögÀLí
);

3028 
mem£t
(
sôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
, 0x00, 
sôDesSögÀLí
);

3029 
mem˝y
(
sôInfo
->
a°EÀmít
[
i
].
a°Des¸ùt‹
[
j
].
D©a
, 
pD©a
, 
sôDesSögÀLí
);

3031 
pD©a
 +
sôDesSögÀLí
;

3032 
sôDesTŸÆLí
 -(
sôDesSögÀLí
 + 2);

3033 
j
++;

3035 i‡(
j
 >
GOS_MAX_SIT_ELEMENT_DESCRIPTOR
)

3037 
pD©a
 +
sôDesTŸÆLí
;

3041 
sôInfo
->
a°EÀmít
[
i
].
u16NbDes¸ùt‹s
 = 
j
;

3043 
i
++;

3045 i‡(
i
 >
GOS_MAX_SIT_ELEMENT
)

3047 
pD©a
 +
sôElmTŸÆLí
;

3051 
sôInfo
->
u16NbEÀmíts
 = 
i
;

3054 
ãmpD©a
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

3056 
pD©a
 = 
GOSTSR_NULL
;

3058  
GOSTSR_SUCCESS
;

3061 
GOSTSR_DATE_S
 
GosT§_TIME_MJDtoYMD
(
GOSTSR_U16
 
mjd
)

3063 
GOSTSR_S32
 
yór_x
, 
m⁄th_x
;

3064 
GOSTSR_S32
 
m_day
, 
m_m⁄th
, 
m_yór
;

3065 
GOSTSR_U8
 
k
;

3066 
GOSTSR_DATE_S
 
d©e
;

3068 
GOSTSR_U32
 
ˇl_mjd
;

3070 
ˇl_mjd
 = 
mjd
;

3072 
yór_x
 = ()–(
ˇl_mjd
*100 - 1507820) / 36525 );

3073 
m⁄th_x
 = ()–(
ˇl_mjd
*10000 - 149561000 - ()((
yór_x
 * 36525)/100)*10000) / 306001 );

3074 
m_day
 = 
ˇl_mjd
 - 14956 - (Ë((
yór_x
 * 36525)/100Ë- (Ë((
m⁄th_x
 * 306001)/10000);

3076 i‡(
m⁄th_x
 == 14 || month_x == 15)

3077 
k
 = 1;

3079 
k
 = 0;

3081 
m_yór
 = (Ë(
yór_x
 + 
k
);

3082 
m_m⁄th
 = (Ë(
m⁄th_x
 - 1 - (
k
 * 12));

3084 if–
m_m⁄th
 > 12 )

3086 
m_yór
++;

3087 
m_m⁄th
 -= 12;

3091 
m_yór
 += 1900;

3093 
d©e
.
u16yór
 = 
m_yór
;

3094 
d©e
.
u8m⁄th
 = 
m_m⁄th
;

3095 
d©e
.
u8day
 = 
m_day
;

3097  
d©e
;

3100 
GOSTSR_TIME_S
 
GosT§_TIME_UTCtoHMS
(
GOSTSR_U32
 
utc
)

3102 
GOSTSR_TIME_S
 
time
;

3104 
time
.
u8hour
 = (
GOSTSR_U8
Ë––((
utc
 >> 20) & 0x0F) * 10 ) + ( (utc >> 16) & 0x0F ) );

3105 
time
.
u8möuã
 = (
GOSTSR_U8
Ë––((
utc
 >> 12) & 0x0F) * 10 ) + ( (utc >> 8) & 0x0F ) );

3106 
time
.
u8£c⁄d
 = (
GOSTSR_U8
Ë––((
utc
 >> 4) & 0x0F) * 10 ) + ( utc & 0x0F ) );

3108 i‡(60 <
time
.
u8£c⁄d
)

3110 
time
.
u8möuã
 +time.
u8£c⁄d
 / 60;

3111 
time
.
u8£c⁄d
 =Åime.u8second % 60;

3114 i‡(60 <
time
.
u8möuã
)

3116 
time
.
u8hour
 +time.
u8möuã
 / 60;

3117 
time
.
u8möuã
 =Åime.u8minute % 60;

3120 i‡(24 <
time
.
u8hour
)

3122 
time
.
u8hour
 =Åime.u8hour % 24;

3125  
time
;

3128 
GOS_STREAMTYPE
 
GosT§_A«lysisD©a_SåómTy≥
(
GOS_PSISI_STREAMTYPE_E
 
SåómD©a
)

3130 
GOS_STREAMTYPE
 
SåómTy≥
 = 
BULT_STREAM
;

3132 i‡–(
SåómD©a
Ë=
GOS_PSISI_STREAM_VIDEO_MPEG1
 \

3133 ||(
SåómD©a
Ë=
GOS_PSISI_STREAM_VIDEO_MPEG2
 \

3134 ||(
SåómD©a
Ë=
GOS_PSISI_STREAM_VIDEO_MPEG4
 \

3135 ||(
SåómD©a
Ë=
GOS_PSISI_STREAM_VIDEO_H264
 \

3136 ||(
SåómD©a
Ë=
GOS_PSISI_STREAM_VIDEO_AVS
 \

3137 ||(
SåómD©a
Ë=
GOS_PSISI_STREAM_VIDEO_WM9
 \

3140 
SåómTy≥
 = 
VIDEO_STREAM
;

3142 i‡–(
SåómD©a
Ë=
GOS_PSISI_STREAM_AUDIO_MPEG1
 \

3143 ||(
SåómD©a
Ë=
GOS_PSISI_STREAM_AUDIO_MPEG2
 \

3144 ||(
SåómD©a
Ë=
GOS_PSISI_STREAM_AUDIO_AAC_ADTS
 \

3145 ||(
SåómD©a
Ë=
GOS_PSISI_STREAM_AUDIO_AAC_LATM
 \

3146 ||(
SåómD©a
Ë=
GOS_PSISI_STREAM_AUDIO_AAC_RAW
 \

3147 ||(
SåómD©a
Ë=
GOS_PSISI_STREAM_AUDIO_AVS
 \

3148 ||(
SåómD©a
Ë=
GOS_PSISI_STREAM_AUDIO_AC3
 \

3149 ||(
SåómD©a
Ë=
GOS_PSISI_STREAM_AUDIO_DTS
 \

3152 
SåómTy≥
 = 
AUDIO_STREAM
;

3154 if–(
SåómD©a
Ë=
GOS_PSISI_STREAM_SCTE_SUBT
)

3156 
SåómTy≥
 = 
SCTE_SUBTITLE_STREAM
;

3158 if–(
SåómD©a
Ë=
GOS_PSISI_STREAM_PRIVATE_PES
)

3160 
SåómTy≥
 = 
PRIVATE_PES_STREAM
;

3164 
SåómTy≥
 = 
BULT_STREAM
;

3167  
SåómTy≥
;

3170 
GOSTSR_S32
 
GosT§_A«lysisD©a_OTAPriv©e
(
GOSTSR_U8
 *
¥iv©eD©a
, 
GOSTSR_PSISI_OTAINFO
 *
ŸaInfo
)

3172 
GOSTSR_S32
 
i
 = 0;

3173 
GOSTSR_U8
 *
pD©a
 = 
¥iv©eD©a
;

3175 i‡(
GOSTSR_NULL
 =
pD©a
)

3177  
GOSTSR_FAILURE
;

3181 
ŸaInfo
->
u8DscLí
 = 
pD©a
[0];

3182 
pD©a
 += 1;

3185 
ŸaInfo
->
u32OUI
 = (
pD©a
[0] << 16) + (pData[1] << 8) +ÖData[2];

3186 
pD©a
 += 3;

3189 
ŸaInfo
->
u8Sñe˘‹Lígth
 = 
pD©a
[0];

3190 
pD©a
 += 1;

3193 
i
 = 0;i < 12;i++)

3195 
ŸaInfo
->
u8Sñe˘‹
[
i
] = 
pD©a
[i];

3198 
pD©a
 += 12;

3201 
ŸaInfo
->
u8So·Vî
 = 
pD©a
[0];

3202 
pD©a
 += 1;

3205 
ŸaInfo
->
u8Upd©eMode
 = 
pD©a
[0];

3206 
pD©a
 += 1;

3209 
ŸaInfo
->
u8So·Mode
 = 
pD©a
[0];

3210 
pD©a
 += 1;

3213 
ŸaInfo
->
u16OADPid
 = (
pD©a
[0] << 8) +ÖData[1];

3214 
pD©a
 += 2;

3217 
ŸaInfo
->
u32Fªquícy
 = (
pD©a
[0] << 16) + (pData[1] << 8) +ÖData[2];

3219 
pD©a
 += 3;

3222 
ŸaInfo
->
u8B™dWidth
 = 
pD©a
[0];

3223 
pD©a
 += 1;

3226 
ŸaInfo
->
u16Symbﬁøã
 = (
pD©a
[0] << 8) +ÖData[1];

3227 
pD©a
 += 2;

3230 
ŸaInfo
->
u8Qam
 = 
pD©a
[0];

3231 
pD©a
 += 1;

3234 
ŸaInfo
->
u8Pﬁ¨ôy
 = 
pD©a
[0];

3235 
pD©a
 += 1;

3237  
GOSTSR_SUCCESS
;

3240 
GOSTSR_S32
 
GosT§_Unicode_to_UTF8
(
GOSTSR_U16
 
unicode
, 
GOSTSR_U8
 *
pOutd©a
, GOSTSR_U8 *
pOuéí
)

3242 
GOSTSR_U8
 
cou¡
 = 0;

3244 i‡((
GOSTSR_NULL
 =
pOutd©a
Ë|| (GOSTSR_NULL =
pOuéí
))

3246  
GOSTSR_FAILURE
;

3249 i‡(
unicode
 <= 0x0000007F)

3251 *
pOutd©a
 = (
unicode
 & 0x7F);

3252 
cou¡
 = 1;

3254 i‡–
unicode
 >= 0x00000080 && unicode <= 0x000007FF)

3256 *(
pOutd©a
+1Ë(
unicode
 & 0x3F) | 0x80;

3257 *
pOutd©a
 = ((
unicode
 >> 6) & 0x1F) | 0xC0;

3258 
cou¡
 = 2;

3260 i‡–
unicode
 >= 0x00000800 && unicode <= 0x0000FFFF)

3262 *(
pOutd©a
+2Ë(
unicode
 & 0x3F) | 0x80;

3263 *(
pOutd©a
+1Ë((
unicode
 >> 6) & 0x3F) | 0x80;

3264 *
pOutd©a
 = ((
unicode
 >> 12) & 0x0F) | 0xE0;

3265 
cou¡
 = 3;

3267 i‡(
unicode
 >= 0x00010000 && unicode <= 0x001FFFFF)

3269 *(
pOutd©a
+3Ë(
unicode
 & 0x3F) | 0x80;

3270 *(
pOutd©a
+2Ë((
unicode
 >> 6) & 0x3F) | 0x80;

3271 *(
pOutd©a
+1Ë((
unicode
 >> 12) & 0x3F) | 0x80;

3272 *
pOutd©a
 = ((
unicode
 >> 18) & 0x07) | 0xF0;

3273 
cou¡
 = 4;

3275 i‡(
unicode
 >= 0x00200000 && unicode <= 0x03FFFFFF)

3277 *(
pOutd©a
+4Ë(
unicode
 & 0x3F) | 0x80;

3278 *(
pOutd©a
+3Ë((
unicode
 >> 6) & 0x3F) | 0x80;

3279 *(
pOutd©a
+2Ë((
unicode
 >> 12) & 0x3F) | 0x80;

3280 *(
pOutd©a
+1Ë((
unicode
 >> 18) & 0x3F) | 0x80;

3281 *
pOutd©a
 = ((
unicode
 >> 24) & 0x03) | 0xF8;

3282 
cou¡
 = 5;

3284 i‡(
unicode
 >= 0x04000000 && unicode <= 0x7FFFFFFF)

3286 *(
pOutd©a
+5Ë(
unicode
 & 0x3F) | 0x80;

3287 *(
pOutd©a
+4Ë((
unicode
 >> 6) & 0x3F) | 0x80;

3288 *(
pOutd©a
+3Ë((
unicode
 >> 12) & 0x3F) | 0x80;

3289 *(
pOutd©a
+2Ë((
unicode
 >> 18) & 0x3F) | 0x80;

3290 *(
pOutd©a
+1Ë((
unicode
 >> 24) & 0x3F) | 0x80;

3291 *
pOutd©a
 = ((
unicode
 >> 30) & 0x01) | 0xFC;

3292 
cou¡
 = 6;

3294 *
pOuéí
 = 
cou¡
;

3295 i‡(0 =
cou¡
)

3296  
GOSTSR_FAILURE
;

3298  
GOSTSR_SUCCESS
;

3301 
GOSTSR_S32
 
GosT§_UnicodeSåög_to_UTF8Såög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3303 
GOSTSR_U16
 
i
 = 0;

3304 
GOSTSR_U8
 
ãmpbuff
[6];

3305 
GOSTSR_U8
 
ãmpLí
 = 0;

3306 
GOSTSR_U32
 
tŸÆÀn
 = 0;

3307 
GOSTSR_U16
 
unicode
 = 0;

3309 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3311  
GOSTSR_FAILURE
;

3314 
i
 = 0; i < 
sour_Àn
; i = i+2)

3316 i‡((
sour_Àn
 % 2 !0Ë&& ((
i
+1) == sour_len))

3318 
unicode
 = 0x0000;

3322 
unicode
 = 
sour_°rög
[
i
]*256 + sour_string[i+1];

3324 i‡(
GOSTSR_SUCCESS
 =
GosT§_Unicode_to_UTF8
(
unicode
, 
ãmpbuff
, &
ãmpLí
))

3326 
mem˝y
(&
des_°rög
[
tŸÆÀn
], 
ãmpbuff
, 
ãmpLí
);

3327 
tŸÆÀn
 +
ãmpLí
;

3328 
ãmpLí
 = 0;

3331 
des_°rög
[
tŸÆÀn
] = '\0';

3332 
tŸÆÀn
++;

3334 i‡(
GOSTSR_NULL
 !
des_Àn
)

3336 *
des_Àn
 = 
tŸÆÀn
 ;

3339  
GOSTSR_SUCCESS
;

3342 
GOSTSR_S32
 
GosT§_ISO8859_1Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3344 
GOSTSR_U16
 
i
 = 0;

3346 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3348  
GOSTSR_FAILURE
;

3351 
i
 = 0; i < 
sour_Àn
; i++)

3353 i‡(
sour_°rög
[
i
] < 0xa0)

3355 i‡((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e))

3357 
des_°rög
[
i
*2] = 0x00;

3358 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3364 
des_°rög
[
i
*2] = 0x00;

3365 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

3370 
des_°rög
[
i
*2] = 0x00;

3371 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3374 
des_°rög
[
i
*2] = 0x00;

3375 
des_°rög
[
i
*2 + 1] = 0x00;

3377 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

3379  
GOSTSR_SUCCESS
;

3382 
GOSTSR_S32
 
GosT§_ISO8859_2Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3384 
GOSTSR_U16
 
i
 = 0;

3385 
GOSTSR_U16
 
ödex
 = 0;

3387 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3389  
GOSTSR_FAILURE
;

3392 
i
 = 0; i < 
sour_Àn
; i++)

3394 i‡(
sour_°rög
[
i
] < 0xa0)

3396 i‡((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e))

3398 
des_°rög
[
i
*2] = 0x00;

3399 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3405 
des_°rög
[
i
*2] = 0x00;

3406 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

3411 
ödex
 = 
sour_°rög
[
i
] - 0xa0;

3413 
des_°rög
[
i
*2] = 
iso8859_2
[
ödex
] / 256;

3414 
des_°rög
[
i
*2 + 1] = 
iso8859_2
[
ödex
] % 256;

3417 
des_°rög
[
i
*2] = 0x00;

3418 
des_°rög
[
i
*2 + 1] = 0x00;

3420 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

3422  
GOSTSR_SUCCESS
;

3425 
GOSTSR_S32
 
GosT§_ISO8859_3Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3427 
GOSTSR_U16
 
i
 = 0;

3428 
GOSTSR_U16
 
ödex
 = 0;

3430 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3432  
GOSTSR_FAILURE
;

3435 
i
 = 0; i < 
sour_Àn
; i++)

3437 i‡(
sour_°rög
[
i
] < 0xa0)

3439 i‡((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e))

3441 
des_°rög
[
i
*2] = 0x00;

3442 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3448 
des_°rög
[
i
*2] = 0x00;

3449 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

3454 
ödex
 = 
sour_°rög
[
i
] - 0xa0;

3456 
des_°rög
[
i
*2] = 
iso8859_3
[
ödex
] / 256;

3457 
des_°rög
[
i
*2 + 1] = 
iso8859_3
[
ödex
] % 256;

3460 
des_°rög
[
i
*2] = 0x00;

3461 
des_°rög
[
i
*2 + 1] = 0x00;

3463 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

3465  
GOSTSR_SUCCESS
;

3468 
GOSTSR_S32
 
GosT§_ISO8859_4Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3470 
GOSTSR_U16
 
i
 = 0;

3471 
GOSTSR_U16
 
ödex
 = 0;

3473 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3475  
GOSTSR_FAILURE
;

3478 
i
 = 0; i < 
sour_Àn
; i++)

3480 i‡(
sour_°rög
[
i
] < 0xa0)

3482 i‡((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e))

3484 
des_°rög
[
i
*2] = 0x00;

3485 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3491 
des_°rög
[
i
*2] = 0x00;

3492 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

3497 
ödex
 = 
sour_°rög
[
i
] - 0xa0;

3499 
des_°rög
[
i
*2] = 
iso8859_4
[
ödex
] / 256;

3500 
des_°rög
[
i
*2 + 1] = 
iso8859_4
[
ödex
] % 256;

3503 
des_°rög
[
i
*2] = 0x00;

3504 
des_°rög
[
i
*2 + 1] = 0x00;

3506 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

3508  
GOSTSR_SUCCESS
;

3511 
GOSTSR_S32
 
GosT§_ISO8859_5Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3513 
GOSTSR_U16
 
i
 = 0;

3515 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3517  
GOSTSR_FAILURE
;

3520 
i
 = 0; i < 
sour_Àn
; i++)

3522 i‡(
sour_°rög
[
i
] < 0xa0)

3524 i‡((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e))

3526 
des_°rög
[
i
*2] = 0x00;

3527 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3533 
des_°rög
[
i
*2] = 0x00;

3534 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

3539 
sour_°rög
[
i
])

3543 
des_°rög
[
i
*2] = 0x00;

3544 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3548 
des_°rög
[
i
*2] = 0x21;

3549 
des_°rög
[
i
*2 + 1] = 0x16;

3553 
des_°rög
[
i
*2] = 0x00;

3554 
des_°rög
[
i
*2 + 1] = 0xa7;

3558 
des_°rög
[
i
*2] = 0x04;

3559 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i] - 0xa0;

3564 
des_°rög
[
i
*2] = 0x00;

3565 
des_°rög
[
i
*2 + 1] = 0x00;

3567 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

3569  
GOSTSR_SUCCESS
;

3572 
GOSTSR_S32
 
GosT§_ISO8859_6Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3574 
GOSTSR_U16
 
i
 = 0;

3576 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3578  
GOSTSR_FAILURE
;

3581 
i
 = 0; i < 
sour_Àn
; i++)

3583 i‡(
sour_°rög
[
i
] < 0xac)

3585 i‡(((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e)) || \

3586 (0xa0 =
sour_°rög
[
i
]) || (sour_string[i] == 0xa4))

3588 
des_°rög
[
i
*2] = 0x00;

3589 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3595 
des_°rög
[
i
*2] = 0x00;

3596 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

3601 i‡(
sour_°rög
[
i
] == 0xad)

3603 
des_°rög
[
i
*2] = 0x00;

3604 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3608 
des_°rög
[
i
*2] = 0x06;

3609 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i] - 0xa0;

3612 
des_°rög
[
i
*2] = 0x00;

3613 
des_°rög
[
i
*2 + 1] = 0x00;

3615 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

3617  
GOSTSR_SUCCESS
;

3620 
GOSTSR_S32
 
GosT§_ISO8859_7Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3622 
GOSTSR_U16
 
i
 = 0;

3623 
GOSTSR_U16
 
ödex
 = 0;

3625 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3627  
GOSTSR_FAILURE
;

3630 
i
 = 0; i < 
sour_Àn
; i++)

3632 i‡(
sour_°rög
[
i
] < 0xa0)

3634 i‡((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e))

3636 
des_°rög
[
i
*2] = 0x00;

3637 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3643 
des_°rög
[
i
*2] = 0x00;

3644 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

3649 
ödex
 = 
sour_°rög
[
i
] - 0xa0;

3651 
des_°rög
[
i
*2] = 
iso8859_7
[
ödex
] / 256;

3652 
des_°rög
[
i
*2 + 1] = 
iso8859_7
[
ödex
] % 256;

3655 
des_°rög
[
i
*2] = 0x00;

3656 
des_°rög
[
i
*2 + 1] = 0x00;

3658 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

3660  
GOSTSR_SUCCESS
;

3663 
GOSTSR_S32
 
GosT§_ISO8859_8Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3665 
GOSTSR_U16
 
i
 = 0;

3666 
GOSTSR_U16
 
ödex
 = 0;

3668 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3670  
GOSTSR_FAILURE
;

3673 
i
 = 0; i < 
sour_Àn
; i++)

3675 i‡(
sour_°rög
[
i
] < 0xa0)

3677 i‡((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e))

3679 
des_°rög
[
i
*2] = 0x00;

3680 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3686 
des_°rög
[
i
*2] = 0x00;

3687 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

3692 
ödex
 = 
sour_°rög
[
i
] - 0xa0;

3694 
des_°rög
[
i
*2] = 
iso8859_8
[
ödex
] / 256;

3695 
des_°rög
[
i
*2 + 1] = 
iso8859_8
[
ödex
] % 256;

3698 
des_°rög
[
i
*2] = 0x00;

3699 
des_°rög
[
i
*2 + 1] = 0x00;

3701 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

3703  
GOSTSR_SUCCESS
;

3706 
GOSTSR_S32
 
GosT§_ISO8859_9Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3708 
GOSTSR_U16
 
i
 = 0;

3710 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3712  
GOSTSR_FAILURE
;

3715 
i
 = 0; i < 
sour_Àn
; i++)

3717 i‡(
sour_°rög
[
i
] < 0xa0)

3719 i‡((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e))

3721 
des_°rög
[
i
*2] = 0x00;

3722 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3728 
des_°rög
[
i
*2] = 0x00;

3729 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

3734 
sour_°rög
[
i
])

3737 
des_°rög
[
i
*2] = 0x01;

3738 
des_°rög
[
i
*2 + 1] = 0x1e;

3742 
des_°rög
[
i
*2] = 0x01;

3743 
des_°rög
[
i
*2 + 1] = 0x30;

3747 
des_°rög
[
i
*2] = 0x01;

3748 
des_°rög
[
i
*2 + 1] = 0x5e;

3752 
des_°rög
[
i
*2] = 0x01;

3753 
des_°rög
[
i
*2 + 1] = 0x1f;

3757 
des_°rög
[
i
*2] = 0x01;

3758 
des_°rög
[
i
*2 + 1] = 0x31;

3762 
des_°rög
[
i
*2] = 0x01;

3763 
des_°rög
[
i
*2 + 1] = 0x5f;

3767 
des_°rög
[
i
*2] = 0x00;

3768 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3773 
des_°rög
[
i
*2] = 0x00;

3774 
des_°rög
[
i
*2 + 1] = 0x00;

3776 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

3778  
GOSTSR_SUCCESS
;

3781 
GOSTSR_S32
 
GosT§_ISO8859_10Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3783 
GOSTSR_U16
 
i
 = 0;

3784 
GOSTSR_U16
 
ödex
 = 0;

3786 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3788  
GOSTSR_FAILURE
;

3791 
i
 = 0; i < 
sour_Àn
; i++)

3793 i‡(
sour_°rög
[
i
] < 0xa0)

3795 i‡((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e))

3797 
des_°rög
[
i
*2] = 0x00;

3798 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3804 
des_°rög
[
i
*2] = 0x00;

3805 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

3810 
ödex
 = 
sour_°rög
[
i
] - 0xa0;

3812 
des_°rög
[
i
*2] = 
iso8859_10
[
ödex
] / 256;

3813 
des_°rög
[
i
*2 + 1] = 
iso8859_10
[
ödex
] % 256;

3816 
des_°rög
[
i
*2] = 0x00;

3817 
des_°rög
[
i
*2 + 1] = 0x00;

3819 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

3821  
GOSTSR_SUCCESS
;

3824 
GOSTSR_S32
 
GosT§_ISO8859_11Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3826 
GOSTSR_U16
 
i
 = 0;

3828 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3830  
GOSTSR_FAILURE
;

3833 
i
 = 0; i < 
sour_Àn
; i++)

3835 i‡(
sour_°rög
[
i
] < 0xa0)

3837 i‡((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e))

3839 
des_°rög
[
i
*2] = 0x00;

3840 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3846 
des_°rög
[
i
*2] = 0x00;

3847 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

3852 i‡(0xa0 =
sour_°rög
[
i
])

3854 
des_°rög
[
i
*2] = 0x00;

3855 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3859 
des_°rög
[
i
*2] = 0x0e;

3860 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i] - 0xa0;

3863 
des_°rög
[
i
*2] = 0x00;

3864 
des_°rög
[
i
*2 + 1] = 0x00;

3866 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

3868  
GOSTSR_SUCCESS
;

3871 
GOSTSR_S32
 
GosT§_ISO8859_13Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3873 
GOSTSR_U16
 
i
 = 0;

3874 
GOSTSR_U16
 
ödex
 = 0;

3876 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3878  
GOSTSR_FAILURE
;

3881 
i
 = 0; i < 
sour_Àn
; i++)

3883 i‡(
sour_°rög
[
i
] < 0xa0)

3885 i‡((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e))

3887 
des_°rög
[
i
*2] = 0x00;

3888 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3894 
des_°rög
[
i
*2] = 0x00;

3895 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

3900 
ödex
 = 
sour_°rög
[
i
] - 0xa0;

3902 
des_°rög
[
i
*2] = 
iso8859_13
[
ödex
] / 256;

3903 
des_°rög
[
i
*2 + 1] = 
iso8859_13
[
ödex
] % 256;

3906 
des_°rög
[
i
*2] = 0x00;

3907 
des_°rög
[
i
*2 + 1] = 0x00;

3909 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

3911  
GOSTSR_SUCCESS
;

3914 
GOSTSR_S32
 
GosT§_ISO8859_14Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3916 
GOSTSR_U16
 
i
 = 0;

3917 
GOSTSR_U16
 
ödex
 = 0;

3919 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3921  
GOSTSR_FAILURE
;

3924 
i
 = 0; i < 
sour_Àn
; i++)

3926 i‡(
sour_°rög
[
i
] < 0xa0)

3928 i‡((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e))

3930 
des_°rög
[
i
*2] = 0x00;

3931 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3937 
des_°rög
[
i
*2] = 0x00;

3938 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

3943 
ödex
 = 
sour_°rög
[
i
] - 0xa0;

3945 
des_°rög
[
i
*2] = 
iso8859_14
[
ödex
] / 256;

3946 
des_°rög
[
i
*2 + 1] = 
iso8859_14
[
ödex
] % 256;

3949 
des_°rög
[
i
*2] = 0x00;

3950 
des_°rög
[
i
*2 + 1] = 0x00;

3952 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

3954  
GOSTSR_SUCCESS
;

3957 
GOSTSR_S32
 
GosT§_ISO8859_15Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

3959 
GOSTSR_U16
 
i
 = 0;

3961 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

3963  
GOSTSR_FAILURE
;

3966 
i
 = 0; i < 
sour_Àn
; i++)

3968 i‡(
sour_°rög
[
i
] < 0xa0)

3970 i‡((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e))

3972 
des_°rög
[
i
*2] = 0x00;

3973 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

3979 
des_°rög
[
i
*2] = 0x00;

3980 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

3985 
sour_°rög
[
i
])

3988 
des_°rög
[
i
*2] = 0x20;

3989 
des_°rög
[
i
*2 + 1] = 0xac;

3993 
des_°rög
[
i
*2] = 0x01;

3994 
des_°rög
[
i
*2 + 1] = 0x60;

3998 
des_°rög
[
i
*2] = 0x01;

3999 
des_°rög
[
i
*2 + 1] = 0x61;

4003 
des_°rög
[
i
*2] = 0x01;

4004 
des_°rög
[
i
*2 + 1] = 0x7d;

4008 
des_°rög
[
i
*2] = 0x01;

4009 
des_°rög
[
i
*2 + 1] = 0x7e;

4013 
des_°rög
[
i
*2] = 0x01;

4014 
des_°rög
[
i
*2 + 1] = 0x52;

4018 
des_°rög
[
i
*2] = 0x01;

4019 
des_°rög
[
i
*2 + 1] = 0x53;

4023 
des_°rög
[
i
*2] = 0x01;

4024 
des_°rög
[
i
*2 + 1] = 0x78;

4028 
des_°rög
[
i
*2] = 0x00;

4029 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

4034 
des_°rög
[
i
*2] = 0x00;

4035 
des_°rög
[
i
*2 + 1] = 0x00;

4037 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

4039  
GOSTSR_SUCCESS
;

4042 
GOSTSR_S32
 
GosT§_ISO8859_16Såög_to_UnicodeSåög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

4044 
GOSTSR_U16
 
i
 = 0;

4045 
GOSTSR_U16
 
ödex
 = 0;

4047 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
))

4049  
GOSTSR_FAILURE
;

4052 
i
 = 0; i < 
sour_Àn
; i++)

4054 i‡(
sour_°rög
[
i
] < 0xa0)

4056 i‡((0x20 <
sour_°rög
[
i
]) && (sour_string[i] <= 0x7e))

4058 
des_°rög
[
i
*2] = 0x00;

4059 
des_°rög
[
i
*2 + 1] = 
sour_°rög
[i];

4065 
des_°rög
[
i
*2] = 0x00;

4066 
des_°rög
[
i
*2 + 1] = 
DEFAULT_CODE
;

4071 
ödex
 = 
sour_°rög
[
i
] - 0xa0;

4073 
des_°rög
[
i
*2] = 
iso8859_16
[
ödex
] / 256;

4074 
des_°rög
[
i
*2 + 1] = 
iso8859_16
[
ödex
] % 256;

4077 
des_°rög
[
i
*2] = 0x00;

4078 
des_°rög
[
i
*2 + 1] = 0x00;

4080 *
des_Àn
 = 2 * 
sour_Àn
 + 2;

4082  
GOSTSR_SUCCESS
;

4085 
ENCODE_TYPE
 
GosT§_CheckL™guageHódCode
(
GOSTSR_U8
 
hódCode
, GOSTSR_U8 
£c⁄dCode
, GOSTSR_U8 
thridCode
)

4087 
ENCODE_TYPE
 
ícodeTy≥
 = 
ENCODE_ASCII
;

4089 
hódCode
)

4091 
FRIST_ISO10646
:

4092 
ícodeTy≥
 = 
ENCODE_UNICODE
;

4095 
FRIST_ISO8859_5
:

4096 
ícodeTy≥
 = 
ENCODE_ISO8859_5
;

4099 
FRIST_ISO8859_6
:

4100 
ícodeTy≥
 = 
ENCODE_ISO8859_6
;

4103 
FRIST_ISO8859_7
:

4104 
ícodeTy≥
 = 
ENCODE_ISO8859_7
;

4107 
FRIST_ISO8859_8
:

4108 
ícodeTy≥
 = 
ENCODE_ISO8859_8
;

4111 
FRIST_ISO8859_9
:

4112 
ícodeTy≥
 = 
ENCODE_ISO8859_9
;

4115 
FRIST_ISO8859_10
:

4116 
ícodeTy≥
 = 
ENCODE_ISO8859_10
;

4119 
FRIST_ISO8859_11
:

4120 
ícodeTy≥
 = 
ENCODE_ISO8859_11
;

4123 
FRIST_ISO8859_13
:

4124 
ícodeTy≥
 = 
ENCODE_ISO8859_13
;

4127 
FRIST_ISO8859_14
:

4128 
ícodeTy≥
 = 
ENCODE_ISO8859_14
;

4131 
FRIST_ISO8859_15
:

4132 
ícodeTy≥
 = 
ENCODE_ISO8859_15
;

4135 
FRIST_ISO8859
:

4137 i‡(
SECOND_ISO8859
 =
£c⁄dCode
)

4139 
thridCode
)

4141 
THIRD_ISO8859_1
:

4142 
ícodeTy≥
 = 
ENCODE_ISO8859_1
;

4145 
THIRD_ISO8859_2
:

4146 
ícodeTy≥
 = 
ENCODE_ISO8859_2
;

4149 
THIRD_ISO8859_3
:

4150 
ícodeTy≥
 = 
ENCODE_ISO8859_3
;

4153 
THIRD_ISO8859_4
:

4154 
ícodeTy≥
 = 
ENCODE_ISO8859_4
;

4157 
THIRD_ISO8859_5
:

4158 
ícodeTy≥
 = 
ENCODE_ISO8859_5
;

4161 
THIRD_ISO8859_6
:

4162 
ícodeTy≥
 = 
ENCODE_ISO8859_6
;

4165 
THIRD_ISO8859_7
:

4166 
ícodeTy≥
 = 
ENCODE_ISO8859_7
;

4169 
THIRD_ISO8859_8
:

4170 
ícodeTy≥
 = 
ENCODE_ISO8859_8
;

4173 
THIRD_ISO8859_9
:

4174 
ícodeTy≥
 = 
ENCODE_ISO8859_9
;

4177 
THIRD_ISO8859_10
:

4178 
ícodeTy≥
 = 
ENCODE_ISO8859_10
;

4181 
THIRD_ISO8859_11
:

4182 
ícodeTy≥
 = 
ENCODE_ISO8859_11
;

4185 
THIRD_ISO8859_13
:

4186 
ícodeTy≥
 = 
ENCODE_ISO8859_13
;

4189 
THIRD_ISO8859_14
:

4190 
ícodeTy≥
 = 
ENCODE_ISO8859_14
;

4193 
THIRD_ISO8859_15
:

4194 
ícodeTy≥
 = 
ENCODE_ISO8859_15
;

4204 
FRIST_KSX1001
:

4207 
FRIST_GB2312
:

4211 
FRIST_ISO10646_TC
:

4212 
ícodeTy≥
 = 
ENCODE_UNICODE
;

4215 
FRIST_ISO10646_UTF8
:

4216 
ícodeTy≥
 = 
ENCODE_UTF8
;

4219 
FRIST_ENCODE_TYPEID
:

4226  
ícodeTy≥
;

4229 
GOSTSR_S32
 
GosT§_Sour˚Såög_to_UTF8Såög
(
GOSTSR_U8
 *
sour_°rög
, 
GOSTSR_U16
 
sour_Àn
, GOSTSR_U8 *
des_°rög
, GOSTSR_U16 *
des_Àn
)

4231 
GOSTSR_U8
 
ödex
 = 1;

4232 
ENCODE_TYPE
 
ícodeTy≥
 = 
ENCODE_BULT
;

4233 
GOSTSR_U8
 *
ãmpSåög
 = 
GOSTSR_NULL
;

4234 
GOSTSR_U16
 
ãmpSåögLí
 = 0;

4236 i‡((
GOSTSR_NULL
 =
sour_°rög
Ë|| (GOSTSR_NULL =
des_°rög
Ë|| (GOSTSR_NULL =
des_Àn
Ë|| (0 =
sour_Àn
))

4238 i‡(
GOSTSR_NULL
 !
des_°rög
)

4240 
des_°rög
[0] = '\0';

4242  
GOSTSR_FAILURE
;

4245 
ícodeTy≥
 = 
GosT§_CheckL™guageHódCode
(
sour_°rög
[0], sour_string[1], sour_string[2]);

4246 i‡(
FRIST_ISO8859
 =
sour_°rög
[0])

4248 
ödex
 = 3;

4251 
ãmpSåög
 = (
GOSTSR_U8
 *)
mÆloc
(
sour_Àn
*2 + 2);

4252 i‡(
GOSTSR_NULL
 =
ãmpSåög
)

4254  
GOSTSR_FAILURE
;

4256 
mem£t
(
ãmpSåög
, 0x00, 2*
sour_Àn
 + 2);

4258 
ícodeTy≥
)

4260 
ENCODE_ASCII
:

4261 
ENCODE_UTF8
:

4262 
mem˝y
(
des_°rög
, 
sour_°rög
, 
sour_Àn
);

4263 *
des_Àn
 = 
sour_Àn
;

4266 
ENCODE_UNICODE
:

4267 
GosT§_UnicodeSåög_to_UTF8Såög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
des_°rög
, 
des_Àn
);

4270 
ENCODE_ISO8859_1
:

4271 
GosT§_ISO8859_1Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4272 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4275 
ENCODE_ISO8859_2
:

4276 
GosT§_ISO8859_2Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4277 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4280 
ENCODE_ISO8859_3
:

4281 
GosT§_ISO8859_3Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4282 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4285 
ENCODE_ISO8859_4
:

4286 
GosT§_ISO8859_4Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4287 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4290 
ENCODE_ISO8859_5
:

4291 
GosT§_ISO8859_5Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4292 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4295 
ENCODE_ISO8859_6
:

4296 
GosT§_ISO8859_6Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4297 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4300 
ENCODE_ISO8859_7
:

4301 
GosT§_ISO8859_7Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4302 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4305 
ENCODE_ISO8859_8
:

4306 
GosT§_ISO8859_8Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4307 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4310 
ENCODE_ISO8859_9
:

4311 
GosT§_ISO8859_9Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4312 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4315 
ENCODE_ISO8859_10
:

4316 
GosT§_ISO8859_10Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4317 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4320 
ENCODE_ISO8859_11
:

4321 
GosT§_ISO8859_11Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4322 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4325 
ENCODE_ISO8859_13
:

4326 
GosT§_ISO8859_13Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4327 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4330 
ENCODE_ISO8859_14
:

4331 
GosT§_ISO8859_14Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4332 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4335 
ENCODE_ISO8859_15
:

4336 
GosT§_ISO8859_15Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4337 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4340 
ENCODE_ISO8859_16
:

4341 
GosT§_ISO8859_16Såög_to_UnicodeSåög
(&
sour_°rög
[
ödex
], 
sour_Àn
 - index, 
ãmpSåög
, &
ãmpSåögLí
);

4342 
GosT§_UnicodeSåög_to_UTF8Såög
(
ãmpSåög
, 
ãmpSåögLí
, 
des_°rög
, 
des_Àn
);

4349 i‡(
GOSTSR_NULL
 !
ãmpSåög
)

4351 
‰ì
(
ãmpSåög
);

4352 
ãmpSåög
 = 
GOSTSR_NULL
;

4355  
GOSTSR_SUCCESS
;

4358 #ifde‡
__˝lu•lus


4359 #i‡
__˝lu•lus


	@porting/src/tsparse/GosTsr_Crc.c

1 #ifde‡
__˝lu•lus


2 #i‡
__˝lu•lus


7 
	~"GosT§_Crc.h
"

9 
GOSTSR_U32
 
CRC_¸c32_èbÀ
[
CRC32_MAX_COEFFICIENTS
];

11 
GOSTSR_S32
 
GosT§_A«lysisD©a_CRCInô
()

13 
GOSTSR_U32
 
lo›C¡C€f
;

14 
GOSTSR_U32
 
lo›C¡Bô
;

15 
GOSTSR_U32
 
c€f32
;

17 
lo›C¡C€f
 = 0;Üo›C¡C€‡< 
CRC32_MAX_COEFFICIENTS
;ÜoopCntCoef++)

19 
c€f32
 = 
lo›C¡C€f
 << 24;

20 
lo›C¡Bô
=0;ÜoopCntBit<8;ÜoopCntBit++)

22 i‡(
c€f32
 & 0x80000000)

23 
c€f32
 = ((c€f32 << 1Ë^ 
CRC32_POLYNOMIAL
);

25 
c€f32
 <<= 1;

27 
CRC_¸c32_èbÀ
[
lo›C¡C€f
] = 
c€f32
;

30  
GOSTSR_SUCCESS
;

33 
GOSTSR_U32
 
GosT§_A«lysisD©a_CRCCheck
(c⁄° 
GOSTSR_U8
 *
d©a
, GOSTSR_U32 
d©aLí
)

35 
GOSTSR_U32
 
¸c32
 = 0xFFFFFFFF;

36 
GOSTSR_U32
 
˙tByã
;

38 
˙tByã
 = 0; c¡Byã < 
d©aLí
; cntByte++)

40 
¸c32
 = (¸c32 << 8 ) ^ 
CRC_¸c32_èbÀ
[((¸c32 >> 24Ë^ *
d©a
++) & 0xFF];

43  
¸c32
;

46 #ifde‡
__˝lu•lus


47 #i‡
__˝lu•lus


	@porting/src/tsparse/GosTsr_Descriptor.c

1 #ifde‡
__˝lu•lus


2 #i‡
__˝lu•lus


7 
	~"GosT§_Des¸ùt‹.h
"

9 
GOSTSR_S32
 
GosT§_Des¸ùt‹_AudioSåóm
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_AUDIOSTRAM_S
 *
asDes
)

11 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

13 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
asDes
))

15  
GOSTSR_FAILURE
;

18 i‡(
GOS_PSISI_DESCRIPTOR_AUDIO_STREAM
 !
§cDes
->
Tag
)

20  
GOSTSR_FAILURE
;

23 
mem£t
(
asDes
, 0x00, (
GOS_DESC_AUDIOSTRAM_S
));

24 
pD©a
 = 
§cDes
->
D©a
;

27 
asDes
->
u8FªeF‹m©Fœg
 = (
pD©a
[0] & 
BIT8
) / BIT8;

30 
asDes
->
u8ID
 = (
pD©a
[0] & 
BIT7
) / BIT7;

33 
asDes
->
u8Layî
 = (
pD©a
[0] & (
BIT6
 | 
BIT5
)) / BIT5;

37 
pD©a
 = 
GOSTSR_NULL
;

39  
GOSTSR_SUCCESS
;

42 
GOSTSR_S32
 
GosT§_Des¸ùt‹_AVCVideo
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_AVCVIDEO_S
 *
avDes
)

44 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
avDes
))

46  
GOSTSR_FAILURE
;

49 i‡(
GOS_PSISI_DESCRIPTOR_AVC_VIDEO
 !
§cDes
->
Tag
)

51  
GOSTSR_FAILURE
;

55 
avDes
->
u16AVCVideoLí
 = 
§cDes
->
u16Size
;

57 i‡(
avDes
->
u16AVCVideoLí
 > 
GOS_MAX_AVCVIDEO_NUM
)

59 
avDes
->
u16AVCVideoLí
 = 
GOS_MAX_AVCVIDEO_NUM
;

63 
mem£t
(
avDes
->
u8AVCVideoD©a
, 0x00, 
GOS_MAX_AVCVIDEO_NUM
);

64 
mem˝y
(
avDes
->
u8AVCVideoD©a
, 
§cDes
->
D©a
,ávDes->
u16AVCVideoLí
);

66  
GOSTSR_SUCCESS
;

69 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Bouquë«me
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_BOUQUETNAME_S
 *
bndes
)

71 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
bndes
))

73  
GOSTSR_FAILURE
;

76 i‡(
GOS_PSISI_DESCRIPTOR_BOUQUET_NAME
 !
§cDes
->
Tag
)

78  
GOSTSR_FAILURE
;

81 
mem£t
(
bndes
, 0x00, (
GOS_DESC_BOUQUETNAME_S
));

82 
bndes
->
u8NameLí
 = (
§cDes
->
u16Size
 < 
GOS_MAX_BOUQUET_NAME_LEN
)? srcDes->u16Size : (GOS_MAX_BOUQUET_NAME_LEN - 1);

83 
mem˝y
(
bndes
->
au8BouqName
, 
§cDes
->
D©a
, bndes->
u8NameLí
);

84 
bndes
->
au8BouqName
[bndes->
u8NameLí
] = '\0';

86  
GOSTSR_SUCCESS
;

89 
GOSTSR_S32
 
GosT§_Des¸ùt‹_CabÀSy°em
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_CABDELIVSYS_S
 *
csDes
)

91 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

93 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
csDes
))

95  
GOSTSR_FAILURE
;

98 i‡(
GOS_PSISI_DESCRIPTOR_CABLE_DELIVERY_SYSTEM
 !
§cDes
->
Tag
)

100  
GOSTSR_FAILURE
;

103 
mem£t
(
csDes
, 0x00, (
GOS_DESC_CABDELIVSYS_S
));

104 
pD©a
 = 
§cDes
->
D©a
;

107 
csDes
->
u32Fªq
 =((
pD©a
[0] & 0xf0Ë/ 
BIT5
)*10000000 + (pData[0] & 0x0f)*1000000 + \

108 ((
pD©a
[1] & 0xf0Ë/ 
BIT5
)*100000 + (pData[1] & 0x0f)*10000 + \

109 ((
pD©a
[2] & 0xf0Ë/ 
BIT5
)*1000 + (pData[2] & 0x0f)*100 + \

110 ((
pD©a
[3] & 0xf0Ë/ 
BIT5
)*10 + (pData[3] & 0x0f);

111 
pD©a
 += 4;

114 
pD©a
 += 1;

117 
csDes
->
u8FEC_Ouãr
 = 
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

118 
pD©a
 += 1;

121 
csDes
->
u8Moduœti⁄
 = 
pD©a
[0];

122 
pD©a
 += 1;

125 
csDes
->
u32Symbﬁ_R©e
 = ((
pD©a
[0] & 0xf0Ë/ 
BIT5
)*1000000 + (pData[0] & 0x0f)*100000 + \

126 ((
pD©a
[1] & 0xf0Ë/ 
BIT5
)*10000 + (pData[1] & 0x0f)*1000 + \

127 ((
pD©a
[2] & 0xf0Ë/ 
BIT5
)*100 + (pData[2] & 0x0f)*10 + \

128 ((
pD©a
[3] & 0xf0Ë/ 
BIT5
);

129 
pD©a
 += 3;

132 
csDes
->
u8FEC_I¬î
 = 
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

134 
pD©a
 = 
GOSTSR_NULL
;

136  
GOSTSR_SUCCESS
;

139 
GOSTSR_S32
 
GosT§_Des¸ùt‹_CaIdítify
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_CAIDF_S
 *
ciDes
)

141 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

142 
GOSTSR_U16
 
i
 = 0;

144 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
ciDes
))

146  
GOSTSR_FAILURE
;

149 i‡(
GOS_PSISI_DESCRIPTOR_CA_IDENTIFIER
 !
§cDes
->
Tag
)

151  
GOSTSR_FAILURE
;

154 
mem£t
(
ciDes
, 0x00, (
GOS_DESC_CAIDF_S
));

155 
pD©a
 = 
§cDes
->
D©a
;

157 
ciDes
->
u8CANum
 = 
§cDes
->
u16Size
 / 2;

159 
i
 = 0; i < 
ciDes
->
u8CANum
; i++)

161 
ciDes
->
au16CA_Sys_ID
[
i
] = 
pD©a
[0]*256 +ÖData[1];

162 
pD©a
 += 2;

165 
pD©a
 = 
GOSTSR_NULL
;

167  
GOSTSR_SUCCESS
;

170 
GOSTSR_S32
 
GosT§_Des¸ùt‹_CA
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_CA_S
 *
ˇDes
)

172 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

174 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
ˇDes
))

176  
GOSTSR_FAILURE
;

179 i‡(
GOS_PSISI_DESCRIPTOR_CA
 !
§cDes
->
Tag
)

181  
GOSTSR_FAILURE
;

184 
mem£t
(
ˇDes
, 0x00, (
GOS_DESC_CA_S
));

185 
pD©a
 = 
§cDes
->
D©a
;

188 
ˇDes
->
u16CaSy°emId
 = 
pD©a
[0]*256 +ÖData[1];

189 
pD©a
 += 2;

194 
ˇDes
->
u16CaPId
 = (
pD©a
[0] & (
BIT5
 | 
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
))*256 +ÖData[1];

195 
pD©a
 += 2;

198 
ˇDes
->
u8Piv©eD©aLí
 = 
§cDes
->
u16Size
 - 4;

201 
ˇDes
->
pu8D©a
 = (
GOSTSR_U8
 *)
mÆloc
(ˇDes->
u8Piv©eD©aLí
);

202 
mem£t
(
ˇDes
->
pu8D©a
, 0x00, caDes->
u8Piv©eD©aLí
);

203 
mem˝y
(
ˇDes
->
pu8D©a
, 
pD©a
, caDes->
u8Piv©eD©aLí
);

205 
pD©a
 = 
GOSTSR_NULL
;

207  
GOSTSR_SUCCESS
;

210 
GOSTSR_S32
 
GosT§_Des¸ùt‹_CA_Sy°em
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_CA_SYSTEM_S
 *
ˇDes
)

212 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

214 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
ˇDes
))

216  
GOSTSR_FAILURE
;

219 i‡(
GOS_PSISI_DESCRIPTOR_CA_SYSTEM
 !
§cDes
->
Tag
)

221  
GOSTSR_FAILURE
;

224 
mem£t
(
ˇDes
, 0x00, (
GOS_DESC_CA_SYSTEM_S
));

225 
pD©a
 = 
§cDes
->
D©a
;

227  
GOSTSR_SUCCESS
;

230 
GOSTSR_S32
 
GosT§_Des¸ùt‹_C›yRight
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_COPYRIGHT_S
 *
cDes
)

232 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

234 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
cDes
))

236  
GOSTSR_FAILURE
;

239 i‡(
GOS_PSISI_DESCRIPTOR_COPYRIGHT
 !
§cDes
->
Tag
)

241  
GOSTSR_FAILURE
;

244 
mem£t
(
cDes
, 0x00, (
GOS_DESC_COPYRIGHT_S
));

245 
pD©a
 = 
§cDes
->
D©a
;

248 
cDes
->
u32C›yrightIdítifõr
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

249 
pD©a
 += 4;

252 
cDes
->
u32AddC›yrightInfoLí
 = 
§cDes
->
u16Size
 - 4;

253 i‡(
cDes
->
u32AddC›yrightInfoLí
 > (
GOS_MAX_ADDCOPYRIGHTINFO_NUM
 - 1))

255 
cDes
->
u32AddC›yrightInfoLí
 = (
GOS_MAX_ADDCOPYRIGHTINFO_NUM
 - 1);

259 
mem˝y
(
cDes
->
u8AddC›yrightInfo
, 
pD©a
, cDes->
u32AddC›yrightInfoLí
);

260 
cDes
->
u8AddC›yrightInfo
[cDes->
u32AddC›yrightInfoLí
] = '\0';

262 
pD©a
 = 
GOSTSR_NULL
;

264  
GOSTSR_SUCCESS
;

267 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Comp⁄ít
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_COMPONENT_S
 *
cDes
)

269 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

270 
GOSTSR_U16
 
ªmaöLí
 = 0;

272 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
cDes
))

274  
GOSTSR_FAILURE
;

277 i‡(
GOS_PSISI_DESCRIPTOR_COMPONENT
 !
§cDes
->
Tag
)

279  
GOSTSR_FAILURE
;

282 
mem£t
(
cDes
, 0x00, (
GOS_DESC_COMPONENT_S
));

283 
pD©a
 = 
§cDes
->
D©a
;

288 
cDes
->
u8SåómC⁄ã¡
 = 
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

289 
pD©a
 += 1;

292 
cDes
->
u8Comp⁄ítTy≥
 = 
pD©a
[0];

293 
pD©a
 += 1;

296 
cDes
->
u8Comp⁄ítTag
 = 
pD©a
[0];

297 
pD©a
 += 1;

300 
cDes
->
au8ISO639_L™guage_Code
[0] = 
pD©a
[0];

301 
cDes
->
au8ISO639_L™guage_Code
[1] = 
pD©a
[1];

302 
cDes
->
au8ISO639_L™guage_Code
[2] = 
pD©a
[2];

303 
pD©a
 += 3;

306 
ªmaöLí
 = 
§cDes
->
u16Size
 - 6;

307 
ªmaöLí
 =ÑemaöLí < (
cDes
->
acTextCh¨
)?ÑemainLen: (cDes->acTextChar);

308 
mem£t
(
cDes
->
acTextCh¨
, 0x00, (cDes->acTextChar));

309 
mem˝y
(
cDes
->
acTextCh¨
, 
pD©a
, 
ªmaöLí
);

310 
cDes
->
acTextCh¨
[(cDes->acTextChar) - 1] = '\0';

312 
pD©a
 = 
GOSTSR_NULL
;

314  
GOSTSR_SUCCESS
;

317 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Comp⁄ít_Sîvi˚_Name
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_COMPONENT_SERVICE_NAME_S
 *
cDes
)

319 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

321 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
cDes
))

323  
GOSTSR_FAILURE
;

326 i‡(
GOS_PSISI_DESCRIPTOR_COMPONENT_SERVICE_NAME
 !
§cDes
->
Tag
)

328  
GOSTSR_FAILURE
;

331 
mem£t
(
cDes
, 0x00, (
GOS_DESC_COMPONENT_SERVICE_NAME_S
));

332 
pD©a
 = 
§cDes
->
D©a
;

334  
GOSTSR_SUCCESS
;

337 
GOSTSR_S32
 
GosT§_Des¸ùt‹_C⁄ã¡
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_CONTENT_S
 *
cDes
)

339 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

340 
GOSTSR_U16
 
i
 = 0;

342 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
cDes
))

344  
GOSTSR_FAILURE
;

347 i‡(
GOS_PSISI_DESCRIPTOR_CONTENT
 !
§cDes
->
Tag
)

349  
GOSTSR_FAILURE
;

352 
mem£t
(
cDes
, 0x00, (
GOS_DESC_CONTENT_S
));

353 
pD©a
 = 
§cDes
->
D©a
;

355 
cDes
->
u16NbC⁄ã¡
 = 
§cDes
->
u16Size
 / 2;

356 
i
 = 0; i < 
cDes
->
u16NbC⁄ã¡
; i++)

358 
cDes
->
a°DëaûLi°
[
i
].
u8NibbÀLevñ1
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
)) / BIT5;

359 
cDes
->
a°DëaûLi°
[
i
].
u8NibbÀLevñ2
 = 
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

360 
cDes
->
a°DëaûLi°
[
i
].
u8U£rNibbÀ1
(
pD©a
[1] & (
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
)) / BIT5;

361 
cDes
->
a°DëaûLi°
[
i
].
u8U£rNibbÀ2
 = 
pD©a
[1] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

362 
pD©a
 += 2;

365 
pD©a
 = 
GOSTSR_NULL
;

367  
GOSTSR_SUCCESS
;

370 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Cou¡ryAvaûabûôy
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_COUNTRY_AVAILABILITY_S
 *
ˇDes
)

372 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

373 
GOSTSR_U16
 
i
 = 0;

375 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
ˇDes
))

377  
GOSTSR_FAILURE
;

380 i‡(
GOS_PSISI_DESCRIPTOR_COUNTRY_AVAIBILITY
 !
§cDes
->
Tag
)

382  
GOSTSR_FAILURE
;

385 
mem£t
(
ˇDes
, 0x00, (
GOS_DESC_COUNTRY_AVAILABILITY_S
));

386 
pD©a
 = 
§cDes
->
D©a
;

389 
ˇDes
->
u8Cou¡ry_Avaûabûôy_Fœg
 = (
pD©a
[0] & 
BIT8
) / BIT8;

392 
pD©a
 += 1;

394 
ˇDes
->
u32Cou¡ryNum
 = (
§cDes
->
u16Size
 - 1) / 3;

395 
i
 = 0; i < 
ˇDes
->
u32Cou¡ryNum
; i++)

397 
ˇDes
->
au32Cou¡ryCode
[
i
] = (
pD©a
[0]<<16) + (pData[1]<<8) +ÖData[2];

398 
pD©a
 += 3;

401 
pD©a
 = 
GOSTSR_NULL
;

403  
GOSTSR_SUCCESS
;

406 
GOSTSR_S32
 
GosT§_Des¸ùt‹_D©aSåómAlignmít
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_DATASTRAMALIGNMENT_S
 *
dßDes
)

408 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

410 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
dßDes
))

412  
GOSTSR_FAILURE
;

415 i‡(
GOS_PSISI_DESCRIPTOR_DATA_STREAM_ALIGNMENT
 !
§cDes
->
Tag
)

417  
GOSTSR_FAILURE
;

420 
mem£t
(
dßDes
, 0x00, (
GOS_DESC_DATASTRAMALIGNMENT_S
));

421 
pD©a
 = 
§cDes
->
D©a
;

424 
dßDes
->
u8AlignmítTy≥
 = 
pD©a
[0];

426 
pD©a
 = 
GOSTSR_NULL
;

428  
GOSTSR_SUCCESS
;

431 
GOSTSR_S32
 
GosT§_Des¸ùt‹_D©aBrﬂdˇ°
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_DATA_BROADCAST_S
 *
dbDes
)

433 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

435 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
dbDes
))

437  
GOSTSR_FAILURE
;

440 i‡(
GOS_PSISI_DESCRIPTOR_DATA_BROADCAST
 !
§cDes
->
Tag
)

442  
GOSTSR_FAILURE
;

445 
mem£t
(
dbDes
, 0x00, (
GOS_DESC_DATA_BROADCAST_S
));

446 
pD©a
 = 
§cDes
->
D©a
;

449 
dbDes
->
u16D©aBrﬂdˇ°Id
 = 
pD©a
[0]*256 +ÖData[1];

450 
pD©a
 += 2;

453 
dbDes
->
u8Comp⁄ítTag
 = 
pD©a
[0];

454 
pD©a
 += 1;

457 
dbDes
->
u8Sñe˘‹Lígth
 = 
pD©a
[0];

458 
pD©a
 += 1;

461 
mem˝y
(
dbDes
->
au8Sñe˘‹Byã
, 
pD©a
, dbDes->
u8Sñe˘‹Lígth
);

462 
pD©a
 +
dbDes
->
u8Sñe˘‹Lígth
;

465 
dbDes
->
au8ISO639_L™guage_Code
[0] = 
pD©a
[0];

466 
dbDes
->
au8ISO639_L™guage_Code
[1] = 
pD©a
[1];

467 
dbDes
->
au8ISO639_L™guage_Code
[2] = 
pD©a
[2];

468 
pD©a
 += 3;

471 
dbDes
->
u8TextLígth
 = 
pD©a
[0];

472 
pD©a
 += 1;

475 
mem˝y
(
dbDes
->
au8TextCh¨
, 
pD©a
, dbDes->
u8TextLígth
);

476 
dbDes
->
au8TextCh¨
[(dbDes->au8TextChar) - 1] = '\0';

478 
pD©a
 = 
GOSTSR_NULL
;

480  
GOSTSR_SUCCESS
;

483 
GOSTSR_S32
 
GosT§_Des¸ùt‹_D©aBrﬂdˇ°ID
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_DATA_BROADCAST_ID_S
 *
dIDDes
)

485 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

487 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
dIDDes
))

489  
GOSTSR_FAILURE
;

492 i‡(
GOS_PSISI_DESCRIPTOR_DATA_BROADCAST_ID
 !
§cDes
->
Tag
)

494  
GOSTSR_FAILURE
;

497 
mem£t
(
dIDDes
, 0x00, (
GOS_DESC_DATA_BROADCAST_ID_S
));

498 
pD©a
 = 
§cDes
->
D©a
;

501 
dIDDes
->
u16D©aBrﬂdˇ°Id
 = 
pD©a
[0]*256 +ÖData[0];

502 
pD©a
 += 2;

505 
mem˝y
(
dIDDes
->
au8IdSñe˘‹Byã
, 
pD©a
, 
§cDes
->
u16Size
 - 2);

506 
dIDDes
->
au8IdSñe˘‹Byã
[(dIDDes->au8IdSelectorByte) - 1] = '\0';

508 
pD©a
 = 
GOSTSR_NULL
;

510  
GOSTSR_SUCCESS
;

513 
GOSTSR_S32
 
GosT§_Des¸ùt‹_ExãndEvít
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_EXTEVT_S
 *
ìDes
)

515 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

516 
GOSTSR_S16
 
ôemLí
 = 0;

517 
GOSTSR_U8
 
i
 = 0;

519 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
ìDes
))

521  
GOSTSR_FAILURE
;

524 i‡(
GOS_PSISI_DESCRIPTOR_EXTENDED_EVENT
 !
§cDes
->
Tag
)

526  
GOSTSR_FAILURE
;

529 
mem£t
(
ìDes
, 0x00, (
GOS_DESC_EXTEVT_S
));

530 
pD©a
 = 
§cDes
->
D©a
;

533 
ìDes
->
u8Desc_Num
 = (
pD©a
[0] & 0xf0Ë/ 
BIT5
;

536 
ìDes
->
u8La°_Desc_Num
 = 
pD©a
[0] & 0x0f;

537 
pD©a
 += 1;

540 
ìDes
->
u32Lag_Code
 = (
pD©a
[0]<<16) + (pData[1]<<8) +ÖData[2];

541 
pD©a
 += 3;

544 
ôemLí
 = 
pD©a
[0];

545 
ìDes
->
u8IãmNum
 = 
pD©a
[0];

546 
pD©a
 += 1;

548 
i
 = 0;

549 
ôemLí
 > 0)

552 
ìDes
->
a°IãmEÀ
[
i
].
u8IãmDescLí
 = 
pD©a
[0];

553 
pD©a
 += 1;

556 
mem˝y
(
ìDes
->
a°IãmEÀ
[
i
].
IãmDesc
, 
pD©a
,ÉeDes->a°IãmEÀ[i].
u8IãmDescLí
);

557 
ìDes
->
a°IãmEÀ
[
i
].
IãmDesc
[ìDes->a°IãmEÀ[i].
u8IãmDescLí
] = '\0';

558 
pD©a
 +
ìDes
->
a°IãmEÀ
[
i
].
u8IãmDescLí
;

561 
ìDes
->
a°IãmEÀ
[
i
].
u8IãmCh¨Lí
 = 
pD©a
[0];

562 
pD©a
 += 1;

565 
mem˝y
(
ìDes
->
a°IãmEÀ
[
i
].
IãmCh¨
, 
pD©a
,ÉeDes->a°IãmEÀ[i].
u8IãmCh¨Lí
);

566 
ìDes
->
a°IãmEÀ
[
i
].
IãmCh¨
[ìDes->a°IãmEÀ[i].
u8IãmCh¨Lí
] = '\0';

567 
pD©a
 +
ìDes
->
a°IãmEÀ
[
i
].
u8IãmCh¨Lí
;

569 
ôemLí
 -(2 + 
ìDes
->
a°IãmEÀ
[
i
].
u8IãmCh¨Lí
 +ÉeDes->a°IãmEÀ[i].
u8IãmDescLí
);

570 
i
++;

572 
ìDes
->
u8IãmNum
 = 
i
;

575 
ìDes
->
u32Txt_Lígth
 = 
pD©a
[0];

576 
pD©a
 += 1;

579 
mem˝y
(
ìDes
->
acTxt_Ch¨
, 
pD©a
,ÉeDes->
u32Txt_Lígth
);

580 
ìDes
->
acTxt_Ch¨
[(eeDes->acTxt_Char) - 1] = '\0';

582 
pD©a
 = 
GOSTSR_NULL
;

584  
GOSTSR_SUCCESS
;

587 
GOSTSR_S32
 
GosT§_Des¸ùt‹_FªquícyLi°
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_FREQLST_S
 *
ÊDes
)

589 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

590 
GOSTSR_U8
 
i
 = 0;

592 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
ÊDes
))

594  
GOSTSR_FAILURE
;

597 i‡(
GOS_PSISI_DESCRIPTOR_FREQUENCY_LIST
 !
§cDes
->
Tag
)

599  
GOSTSR_FAILURE
;

602 
mem£t
(
ÊDes
, 0x00, (
GOS_DESC_FREQLST_S
));

603 
pD©a
 = 
§cDes
->
D©a
;

608 
ÊDes
->
u8Codög_Ty≥
 = 
pD©a
[0] & (
BIT2
 | 
BIT1
);

609 
pD©a
 += 1;

611 
ÊDes
->
u32FªNum
 = ((
§cDes
->
u16Size
 - 1Ë/ 4Ë< 
GOS_MAX_FREQUENCY_NUM
? ((srcDes->u16Size - 1) / 4) : GOS_MAX_FREQUENCY_NUM;

614 
i
 = 0; i < 
ÊDes
->
u32FªNum
; i++)

616 
ÊDes
->
au32FªquícyVÆue
[
i
] = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

617 
pD©a
 += 4;

620 
pD©a
 = 
GOSTSR_NULL
;

622  
GOSTSR_SUCCESS
;

625 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Hõørchy
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_HIERARCHY_S
 *
hDes
)

627 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

629 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
hDes
))

631  
GOSTSR_FAILURE
;

634 i‡(
GOS_PSISI_DESCRIPTOR_HIERARCHY
 !
§cDes
->
Tag
)

636  
GOSTSR_FAILURE
;

639 
mem£t
(
hDes
, 0x00, (
GOS_DESC_HIERARCHY_S
));

640 
pD©a
 = 
§cDes
->
D©a
;

645 
hDes
->
u8HõørchyTy≥
 = 
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

646 
pD©a
 += 1;

651 
hDes
->
u8HõørchyLayîIndex
 = 
pD©a
[0] & (
BIT6
 | 
BIT5
 | 
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

652 
pD©a
 += 1;

657 
hDes
->
u8HõørchyEmbeddedLayî
 = 
pD©a
[0] & (
BIT6
 | 
BIT5
 | 
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

658 
pD©a
 += 1;

663 
hDes
->
u8HõørchyPri‹ôy
 = 
pD©a
[0] & (
BIT6
 | 
BIT5
 | 
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

664 
pD©a
 += 1;

666 
pD©a
 = 
GOSTSR_NULL
;

668  
GOSTSR_SUCCESS
;

671 
GOSTSR_S32
 
GosT§_Des¸ùt‹_ISO639L™guageCode
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_ISOLANGUAGECODE_S
 *
lcDes
)

673 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

674 
GOSTSR_U16
 
i
 = 0;

676 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
lcDes
))

678  
GOSTSR_FAILURE
;

681 i‡(
GOS_PSISI_DESCRIPTOR_LANGUAGE_NAME
 !
§cDes
->
Tag
)

683  
GOSTSR_FAILURE
;

686 
mem£t
(
lcDes
, 0x00, (
GOS_DESC_ISOLANGUAGECODE_S
));

687 
pD©a
 = 
§cDes
->
D©a
;

690 
lcDes
->
u16L™guageCodeLí
 = (
§cDes
->
u16Size
 - 1) / 3;

691 i‡(
lcDes
->
u16L™guageCodeLí
 > 
GOS_MAX_LANGUAGECODE_NUM
)

693 
lcDes
->
u16L™guageCodeLí
 = 
GOS_MAX_LANGUAGECODE_NUM
;

696 
i
 = 0; i < 
lcDes
->
u16L™guageCodeLí
; i++)

698 
lcDes
->
u32L™guageCode
[
i
] = (
pD©a
[0]<<16) + (pData[1]<<8) +ÖData[2];

699 
pD©a
 += 3;

703 
lcDes
->
u8AudioTy≥
 = 
pD©a
[0];

705 
pD©a
 = 
GOSTSR_NULL
;

707  
GOSTSR_SUCCESS
;

710 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Lökage
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_LINKAGE_S
 *
lDes
)

712 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

713 
GOSTSR_U8
 
u8TempOff£t
 = 0;

714 
GOSTSR_U16
 
u16TempLí
 = 0;

716 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
lDes
))

718  
GOSTSR_FAILURE
;

721 i‡(
GOS_PSISI_DESCRIPTOR_LINKAGE
 !
§cDes
->
Tag
)

723  
GOSTSR_FAILURE
;

726 
mem£t
(
lDes
, 0x00, (
GOS_DESC_LINKAGE_S
));

727 
pD©a
 = 
§cDes
->
D©a
;

729 
u16TempLí
 = 
§cDes
->
u16Size
;

732 
lDes
->
u16TsId
 = 
pD©a
[0]*256 +ÖData[1];

733 
pD©a
 += 2;

736 
lDes
->
u16Orid
 = 
pD©a
[0]*256 +ÖData[1];

737 
pD©a
 += 2;

740 
lDes
->
u16Sîvi˚Id
 = 
pD©a
[0]*256 +ÖData[1];

741 
pD©a
 += 2;

744 
lDes
->
u8LökTy≥
 = 
pD©a
[0];

745 
pD©a
 += 1;

747 if(
lDes
->
u8LökTy≥
 == 0x08)

750 
lDes
->
u8H™dOvîTy≥
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
)) / BIT5;

755 
lDes
->
u8OrigöTy≥
 = 
pD©a
[0] & 
BIT1
;

756 
pD©a
[0] += 1;

758 if((
lDes
->
u8H™dOvîTy≥
 == 0x01) ||(ÜDes->u8HandOverType == 0x02) || (lDes->u8HandOverType == 0x03))

761 
lDes
->
u16Nëw‹kID
 = (
pD©a
[0] << 8) +ÖData[1];

762 
u8TempOff£t
 += 2;

763 
pD©a
 += 2;

765 if(
lDes
->
u8OrigöTy≥
 == 0x00)

768 
lDes
->
u16InôSîID
 = (
pD©a
[0] << 8) +ÖData[1];

769 
u8TempOff£t
 += 2;

770 
pD©a
 += 2;

774 
lDes
->
u16PrivD©aLí
 = (
GOSTSR_U8
)
u16TempLí
 - 8 - 
u8TempOff£t
;

777 
mem˝y
(
lDes
->
u8PrivD©a
,
pD©a
,lDes->
u16PrivD©aLí
);

780 i‡(0x0D =
lDes
->
u8LökTy≥
)

783 
lDes
->
u16T¨gëEvítID
 = 
pD©a
[0]*256 +ÖData[1];

784 
pD©a
 += 2;

787 
lDes
->
u8T¨gëLi°ed
 = (
pD©a
[0] & 
BIT8
) / BIT8;

790 
lDes
->
u8EvítSimulˇ°
 = (
pD©a
[0] & 
BIT7
) / BIT7;

793 
pD©a
 += 1;

795 
u8TempOff£t
 += 3;

800 
lDes
->
u16PrivD©aLí
 = (
GOSTSR_U8
)
u16TempLí
 - 7 - 
u8TempOff£t
;

803 
mem˝y
(
lDes
->
u8PrivD©a
,
pD©a
,lDes->
u16PrivD©aLí
);

806 
pD©a
 = 
GOSTSR_NULL
;

808  
GOSTSR_SUCCESS
;

811 
GOSTSR_S32
 
GosT§_Des¸ùt‹_LoˇlTimeOff£t
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_LOCALTMOFFSET_S
 *
…oDes
)

813 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

814 
GOSTSR_U16
 
i
 = 0;

816 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
…oDes
))

818  
GOSTSR_FAILURE
;

821 i‡(
GOS_PSISI_DESCRIPTOR_LOCAL_TIME_OFFSET
 !
§cDes
->
Tag
)

823  
GOSTSR_FAILURE
;

826 
mem£t
(
…oDes
, 0x00, (
GOS_DESC_LOCALTMOFFSET_S
));

827 
pD©a
 = 
§cDes
->
D©a
;

829 
…oDes
->
u32TimeOff£tEÀNum
 = (
§cDes
->
u16Size
 / 13Ë< 
GOS_MAX_LOCALTIME_ELENUM
? (srcDes->u16Size / 13) : GOS_MAX_LOCALTIME_ELENUM;

831 
i
 = 0; i < 
…oDes
->
u32TimeOff£tEÀNum
; i++)

834 
…oDes
->
a°TimeOff£tInfo
[
i
].
u32Cou¡ry_Code
 = (
pD©a
[0]<<16) + (pData[1]<<8) +ÖData[2];

835 
pD©a
 += 3;

838 
…oDes
->
a°TimeOff£tInfo
[
i
].
u8Cou¡ry_Regi⁄_Id
 = (
pD©a
[0] & (~(
BIT2
 | 
BIT1
))Ë/ 
BIT3
;

843 
…oDes
->
a°TimeOff£tInfo
[
i
].
u8Loˇl_Time_Off£t_Pﬁ¨ôy
 = 
pD©a
[0] & 
BIT1
;

844 
pD©a
 += 1;

847 
…oDes
->
a°TimeOff£tInfo
[
i
].
u16Loˇl_Time_Off£t
 = ((
pD©a
[0] & 0xf0Ë/ 
BIT5
)*1000 + (pData[0] & 0x0f)*100 + \

848 ((
pD©a
[1] & 0xf0Ë/ 
BIT5
)*10 + (pData[1] & 0x0f);

849 
pD©a
 += 2;

852 
…oDes
->
a°TimeOff£tInfo
[
i
].
u16time_Of_Ch™ge_MJD
 = 
pD©a
[0]*256 +ÖData[1];

853 
pD©a
 += 2;

855 
…oDes
->
a°TimeOff£tInfo
[
i
].
u32Time_Of_Ch™ge_UTC
 = ((
pD©a
[0] & 0xf0Ë/ 
BIT5
)*100000 + (pData[0] & 0x0f)*10000 + \

856 ((
pD©a
[1] & 0xf0Ë/ 
BIT5
)*1000 + (pData[1] & 0x0f)*100 + \

857 ((
pD©a
[2] & 0xf0Ë/ 
BIT5
)*10 + (pData[2] & 0x0f);

858 
pD©a
 += 3;

861 
…oDes
->
a°TimeOff£tInfo
[
i
].
u16Next_Time_Off£t
 = ((
pD©a
[0] & 0xf0Ë/ 
BIT5
)*1000 + (pData[0] & 0x0f)*100 + \

862 ((
pD©a
[1] & 0xf0Ë/ 
BIT5
)*10 + (pData[1] & 0x0f);

863 
pD©a
 += 2;

866 
pD©a
 = 
GOSTSR_NULL
;

868  
GOSTSR_SUCCESS
;

871 
GOSTSR_S32
 
GosT§_Des¸ùt‹_LCN_83
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_LCN83_S
 *
l˙83Des
)

873 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

874 
GOSTSR_U16
 
i
 = 0;

876 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
l˙83Des
))

878  
GOSTSR_FAILURE
;

881 i‡(
GOS_PSISI_DESCRIPTOR_LCN_0X83
 !
§cDes
->
Tag
)

883  
GOSTSR_FAILURE
;

886 
mem£t
(
l˙83Des
, 0x00, (
GOS_DESC_LCN83_S
));

887 
pD©a
 = 
§cDes
->
D©a
;

889 
i
 = 0; i < (
§cDes
->
u16Size
 / 4); i++)

892 
l˙83Des
->
LCNSîvi˚Info
[
i
].
u16Sîvi˚Id
 = 
pD©a
[0]*256 +ÖData[1];

893 
pD©a
 += 2;

896 
l˙83Des
->
LCNSîvi˚Info
[
i
].
u8VisFœg
 = (
pD©a
[0] & 
BIT8
) / BIT8;

901 
l˙83Des
->
LCNSîvi˚Info
[
i
].
u16LCN
 = (
pD©a
[0] & (~(
BIT8
 + 
BIT7
)))*256 +ÖData[1];

902 
pD©a
 += 2;

904 
l˙83Des
->
u16LCNSîvi˚Num
 = 
i
;

906  
GOSTSR_SUCCESS
;

909 
GOSTSR_S32
 
GosT§_Des¸ùt‹_LCN_87
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_LCN87_S
 *
l˙87Des
)

911 
GOSTSR_S32
 
desLí
;

912 
GOSTSR_U16
 
l˙InfoLí
 = 0;

913 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

914 
GOSTSR_U16
 
i
 = 0, 
j
 =0;

916 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
l˙87Des
))

918  
GOSTSR_FAILURE
;

921 i‡(
GOS_PSISI_DESCRIPTOR_LCN_0X87
 !
§cDes
->
Tag
)

923  
GOSTSR_FAILURE
;

926 
mem£t
(
l˙87Des
, 0x00, (
GOS_DESC_LCN87_S
));

927 
pD©a
 = 
§cDes
->
D©a
;

928 
desLí
 = 
§cDes
->
u16Size
;

930 
desLí
 > 0)

933 
l˙87Des
->
ch™√lLi°Info
[
i
].
u8Ch™√lLi°Id
 = 
pD©a
[0];

934 
pD©a
++;

937 
l˙87Des
->
ch™√lLi°Info
[
i
].
u16Ch™√lLi°NameLí
 = 
pD©a
[0];

938 
pD©a
++;

941 
mem£t
(
l˙87Des
->
ch™√lLi°Info
[
i
].
u16Ch™√lLi°Name
, '\0', (lcn87Des->channelListInfo[i].u16ChannelListName));

942 
mem˝y
(
l˙87Des
->
ch™√lLi°Info
[
i
].
u16Ch™√lLi°Name
, 
pD©a
,Ü˙87Des->ch™√lLi°Info[i].
u16Ch™√lLi°NameLí
);

943 
pD©a
 +
l˙87Des
->
ch™√lLi°Info
[
i
].
u16Ch™√lLi°NameLí
;

946 
l˙87Des
->
ch™√lLi°Info
[
i
].
u32Cou¡ry_Code
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

947 
pD©a
 += 4;

949 
l˙InfoLí
 = 
pD©a
[0];

950 
pD©a
++;

952 
j
 = 0; j < (
l˙InfoLí
 / 4); j++)

955 
l˙87Des
->
ch™√lLi°Info
[
i
].
LCNSîvi˚Info
[
j
].
u16Sîvi˚Id
 = 
pD©a
[0]*256 +ÖData[1];

956 
pD©a
 += 2;

959 
l˙87Des
->
ch™√lLi°Info
[
i
].
LCNSîvi˚Info
[
j
].
u8VisFœg
 = (
pD©a
[0] & 
BIT8
) / BIT8;

964 
l˙87Des
->
ch™√lLi°Info
[
i
].
LCNSîvi˚Info
[
j
].
u16LCN
 = (
pD©a
[0] & (~(
BIT8
 + 
BIT7
)))*256 +ÖData[1];

965 
pD©a
 += 2;

967 
l˙87Des
->
ch™√lLi°Info
[
i
].
u16LCNSîvi˚Num
 = 
j
;

969 
desLí
 -
l˙InfoLí
 + 5 + 
l˙87Des
->
ch™√lLi°Info
[
i
].
u16Ch™√lLi°NameLí
 + 2;

970 
i
++;

972 
l˙87Des
->
u16Ch™√lLi°Num
 = 
i
;

974  
GOSTSR_SUCCESS
;

977 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Moßic
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_MOSAIC_S
 *
mDes
)

979 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

980 
GOSTSR_S32
 
ªmaöLí
 = 0;

981 
GOSTSR_U16
 
i
 = 0, 
j
 = 0;

982 
GOSTSR_U8
 
lökAge
 = 0;

983 
GOSTSR_U8
 
lökAgeLí
 = 0;

985 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
mDes
))

987  
GOSTSR_FAILURE
;

990 i‡(
GOS_PSISI_DESCRIPTOR_MOSAIC
 !
§cDes
->
Tag
)

992  
GOSTSR_FAILURE
;

995 
mem£t
(
mDes
, 0x00, (
GOS_DESC_MOSAIC_S
));

996 
pD©a
 = 
§cDes
->
D©a
;

999 
mDes
->
u8Moßic_íåy_poöt
 = (
pD©a
[0] & 
BIT8
) / BIT8;

1002 
mDes
->
u8NumbîHEÀmíèryCñls
 = (
pD©a
[0] & (
BIT7
 | 
BIT6
 | 
BIT5
)) / BIT5;

1007 
mDes
->
u8NumbîVEÀmíèryCñls
 = 
pD©a
[0] & (
BIT3
 | 
BIT2
 | 
BIT1
);

1008 
pD©a
 += 1;

1010 
ªmaöLí
 = 
§cDes
->
u16Size
 - 1;

1012 
i
 = 0;

1013 
ªmaöLí
 > 0)

1016 
mDes
->
a°LogicCñlInfo
[
i
].
u8LogiˇlCñlId
 = (
pD©a
[0] & (~(
BIT2
 | 
BIT1
))Ë/ 
BIT3
;

1019 
pD©a
 += 1;

1022 
mDes
->
a°LogicCñlInfo
[
i
].
u8LogiˇlCñlInfo
 = 
pD©a
[0] & (
BIT3
 | 
BIT2
 | 
BIT1
);

1023 
pD©a
 += 1;

1026 
mDes
->
a°LogicCñlInfo
[
i
].
u8EÀCñlNum
 = 
pD©a
[0];

1027 i‡(
mDes
->
a°LogicCñlInfo
[
i
].
u8EÀCñlNum
 > 
GOS_MAX_MOSAIC_ElE_CELL_NUM
)

1029 
mDes
->
a°LogicCñlInfo
[
i
].
u8EÀCñlNum
 = 
GOS_MAX_MOSAIC_ElE_CELL_NUM
;

1031 
pD©a
 += 1;

1033 
j
 = 0; j < 
mDes
->
a°LogicCñlInfo
[
i
].
u8EÀCñlNum
; j++)

1038 
mDes
->
a°LogicCñlInfo
[
i
].
a°EÀCñlId
[
j
] = 
pD©a
[0] & (
BIT6
 | 
BIT5
 | 
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

1039 
pD©a
 += 1;

1043 
lökAge
 = 
pD©a
[0];

1044 
mDes
->
a°LogicCñlInfo
[
i
].
u8CñlLökageInfo
 = 
lökAge
;

1045 
pD©a
 += 1;

1047 
lökAgeLí
 = 0;

1049 i‡(
lökAge
 == 0x01)

1052 
mDes
->
a°LogicCñlInfo
[
i
].
u16BouquëId
 = 
pD©a
[0]*256 +ÖData[1];

1053 
pD©a
 += 2;

1055 
lökAgeLí
 = 2;

1057 i‡((
lökAge
 == 0x02) || (linkAge == 0x03))

1060 
mDes
->
a°LogicCñlInfo
[
i
].
u16OrId
 = 
pD©a
[0]*256 +ÖData[1];

1061 
pD©a
 += 2;

1064 
mDes
->
a°LogicCñlInfo
[
i
].
u16TsId
 = 
pD©a
[0]*256 +ÖData[1];

1065 
pD©a
 += 2;

1068 
mDes
->
a°LogicCñlInfo
[
i
].
u16Sîvi˚Id
 = 
pD©a
[0]*256 +ÖData[1];

1069 
pD©a
 += 2;

1071 
lökAgeLí
 = 6;

1073 i‡(
lökAge
 == 0x04)

1076 
mDes
->
a°LogicCñlInfo
[
i
].
u16OrId
 = 
pD©a
[0]*256 +ÖData[1];

1077 
pD©a
 += 2;

1080 
mDes
->
a°LogicCñlInfo
[
i
].
u16TsId
 = 
pD©a
[0]*256 +ÖData[1];

1081 
pD©a
 += 2;

1084 
mDes
->
a°LogicCñlInfo
[
i
].
u16Sîvi˚Id
 = 
pD©a
[0]*256 +ÖData[1];

1085 
pD©a
 += 2;

1088 
mDes
->
a°LogicCñlInfo
[
i
].
u16EvítId
 = 
pD©a
[0]*256 +ÖData[1];

1089 
pD©a
 += 2;

1091 
lökAgeLí
 = 8;

1094 
ªmaöLí
 -
lökAgeLí
 + 
mDes
->
a°LogicCñlInfo
[
i
].
u8EÀCñlNum
 + 4;

1095 
i
++;

1097 
mDes
->
u8NumbîLogicCñls
 = (
GOSTSR_U8
)
i
;

1099 
pD©a
 = 
GOSTSR_NULL
;

1101  
GOSTSR_SUCCESS
;

1104 
GOSTSR_S32
 
GosT§_Des¸ùt‹_MaximumBôøã
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_MAXBITRATE_S
 *
mbDes
)

1106 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1108 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
mbDes
))

1110  
GOSTSR_FAILURE
;

1113 i‡(
GOS_PSISI_DESCRIPTOR_MAX_BITRATE
 !
§cDes
->
Tag
)

1115  
GOSTSR_FAILURE
;

1118 
mem£t
(
mbDes
, 0x00, (
GOS_DESC_MAXBITRATE_S
));

1119 
pD©a
 = 
§cDes
->
D©a
;

1124 
mbDes
->
u32MaxBôøã
 = ((
pD©a
[0] & (~(
BIT8
 | 
BIT7
)))<<16) + (pData[1]<<8) +ÖData[2];

1126 
pD©a
 = 
GOSTSR_NULL
;

1128  
GOSTSR_SUCCESS
;

1131 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Mu…ûöguÆBouquëName
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_MULT_BOUQUET_NAME_S
 *
mbnDes
)

1133 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1134 
GOSTSR_S32
 
ªmaöLí
 = 0;

1135 
GOSTSR_U16
 
i
 = 0;

1137 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
mbnDes
))

1139  
GOSTSR_FAILURE
;

1142 i‡(
GOS_PSISI_DESCRIPTOR_MULTILINGUAL_BOUQUET_NAME
 !
§cDes
->
Tag
)

1144  
GOSTSR_FAILURE
;

1147 
mem£t
(
mbnDes
, 0x00, (
GOS_DESC_MULT_BOUQUET_NAME_S
));

1148 
pD©a
 = 
§cDes
->
D©a
;

1150 
ªmaöLí
 = 
§cDes
->
u16Size
;

1152 
i
 = 0;

1153 
ªmaöLí
 > 0)

1156 
mbnDes
->
a°BouquëName
[
i
].
au8ISO639_L™guage_Code
[0] = 
pD©a
[0];

1157 
mbnDes
->
a°BouquëName
[
i
].
au8ISO639_L™guage_Code
[1] = 
pD©a
[1];

1158 
mbnDes
->
a°BouquëName
[
i
].
au8ISO639_L™guage_Code
[2] = 
pD©a
[2];

1159 
pD©a
 += 3;

1162 
mbnDes
->
a°BouquëName
[
i
].
u8NameLígth
 = 
pD©a
[0];

1163 
pD©a
 += 1;

1166 
mem˝y
(
mbnDes
->
a°BouquëName
[
i
].
au8Ch¨
, 
pD©a
, mbnDes->a°BouquëName[i].
u8NameLígth
);

1167 
mbnDes
->
a°BouquëName
[
i
].
au8Ch¨
[255] = '\0';

1168 
pD©a
 +
mbnDes
->
a°BouquëName
[
i
].
u8NameLígth
;

1170 
ªmaöLí
 -4 + 
mbnDes
->
a°BouquëName
[
i
].
u8NameLígth
;

1171 
i
++;

1173 
mbnDes
->
u8BouquëNameNum
 = (
GOSTSR_U8
)
i
;

1175 
pD©a
 = 
GOSTSR_NULL
;

1177  
GOSTSR_SUCCESS
;

1180 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Mu…ûöguÆComp⁄ít
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_MULT_COMPONENT_S
 *
mcDes
)

1182 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1183 
GOSTSR_S32
 
ªmaöLí
 = 0;

1184 
GOSTSR_U16
 
i
 = 0;

1186 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
mcDes
))

1188  
GOSTSR_FAILURE
;

1191 i‡(
GOS_PSISI_DESCRIPTOR_COMPONENT_SERVICE_NAME
 !
§cDes
->
Tag
)

1193  
GOSTSR_FAILURE
;

1196 
mem£t
(
mcDes
, 0x00, (
GOS_DESC_MULT_COMPONENT_S
));

1197 
pD©a
 = 
§cDes
->
D©a
;

1200 
mcDes
->
u8Comp⁄ítTag
 = 
pD©a
[0];

1201 
pD©a
 += 1;

1203 
ªmaöLí
 = 
§cDes
->
u16Size
 - 1;

1205 
i
 = 0;

1206 
ªmaöLí
 > 0)

1209 
mcDes
->
a°Comp⁄ít
[
i
].
au8ISO639_L™guage_Code
[0] = 
pD©a
[0];

1210 
mcDes
->
a°Comp⁄ít
[
i
].
au8ISO639_L™guage_Code
[1] = 
pD©a
[1];

1211 
mcDes
->
a°Comp⁄ít
[
i
].
au8ISO639_L™guage_Code
[2] = 
pD©a
[2];

1212 
pD©a
 += 3;

1215 
mcDes
->
a°Comp⁄ít
[
i
].
u8NameLígth
 = 
pD©a
[0];

1216 
pD©a
 += 1;

1219 
mem˝y
(
mcDes
->
a°Comp⁄ít
[
i
].
au8Ch¨
, 
pD©a
, mcDes->a°Comp⁄ít[i].
u8NameLígth
);

1220 
mcDes
->
a°Comp⁄ít
[
i
].
au8Ch¨
[(mcDes->astComponent[i].au8Char) - 1] = '\0';

1221 
pD©a
 +
mcDes
->
a°Comp⁄ít
[
i
].
u8NameLígth
;

1223 
ªmaöLí
 -4 + 
mcDes
->
a°Comp⁄ít
[
i
].
u8NameLígth
;

1224 
i
++;

1226 
mcDes
->
u8Comp⁄ítNum
 = (
GOSTSR_U8
)
i
;

1228 
pD©a
 = 
GOSTSR_NULL
;

1230  
GOSTSR_SUCCESS
;

1233 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Mu…ûöguÆNëw‹kName
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_MULT_NETWORK_NAME_S
 *
m¬Des
)

1235 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1236 
GOSTSR_S32
 
ªmaöLí
 = 0;

1237 
GOSTSR_U16
 
i
 = 0;

1239 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
m¬Des
))

1241  
GOSTSR_FAILURE
;

1244 i‡(
GOS_PSISI_DESCRIPTOR_MULTILINGUAL_NETWORK_NAME
 !
§cDes
->
Tag
)

1246  
GOSTSR_FAILURE
;

1249 
mem£t
(
m¬Des
, 0x00, (
GOS_DESC_MULT_NETWORK_NAME_S
));

1250 
pD©a
 = 
§cDes
->
D©a
;

1252 
ªmaöLí
 = 
§cDes
->
u16Size
;

1254 
i
 = 0;

1255 
ªmaöLí
 > 0)

1258 
m¬Des
->
a°Nëw‹kName
[
i
].
au8ISO639_L™guage_Code
[0] = 
pD©a
[0];

1259 
m¬Des
->
a°Nëw‹kName
[
i
].
au8ISO639_L™guage_Code
[1] = 
pD©a
[1];

1260 
m¬Des
->
a°Nëw‹kName
[
i
].
au8ISO639_L™guage_Code
[2] = 
pD©a
[2];

1261 
pD©a
 += 3;

1264 
m¬Des
->
a°Nëw‹kName
[
i
].
u8NameLígth
 = 
pD©a
[0];

1265 
pD©a
 += 1;

1268 
mem˝y
(
m¬Des
->
a°Nëw‹kName
[
i
].
au8Ch¨
, 
pD©a
, m¬Des->a°Nëw‹kName[i].
u8NameLígth
);

1269 
m¬Des
->
a°Nëw‹kName
[
i
].
au8Ch¨
[(mnnDes->astNetworkName[i].au8Char) - 1] = '\0';

1270 
pD©a
 +
m¬Des
->
a°Nëw‹kName
[
i
].
u8NameLígth
;

1272 
ªmaöLí
 -4 + 
m¬Des
->
a°Nëw‹kName
[
i
].
u8NameLígth
;

1273 
i
++;

1275 
m¬Des
->
u8Nëw‹kNameNum
 = (
GOSTSR_U8
)
i
;

1277 
pD©a
 = 
GOSTSR_NULL
;

1279  
GOSTSR_SUCCESS
;

1282 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Mu…ûöguÆSîvi˚Name
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_MULT_SERVICE_NAME_S
 *
m¢Des
)

1284 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1285 
GOSTSR_S32
 
ªmaöLí
 = 0;

1286 
GOSTSR_U16
 
i
 = 0;

1288 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
m¢Des
))

1290  
GOSTSR_FAILURE
;

1293 i‡(
GOS_PSISI_DESCRIPTOR_MULTILINGUAL_SERVICE_NAME
 !
§cDes
->
Tag
)

1295  
GOSTSR_FAILURE
;

1298 
mem£t
(
m¢Des
, 0x00, (
GOS_DESC_MULT_SERVICE_NAME_S
));

1299 
pD©a
 = 
§cDes
->
D©a
;

1301 
ªmaöLí
 = 
§cDes
->
u16Size
;

1303 
i
 = 0;

1304 
ªmaöLí
 > 0)

1307 
m¢Des
->
a°Sîvi˚ProvidîName
[
i
].
au8ISO639_L™guage_Code
[0] = 
pD©a
[0];

1308 
m¢Des
->
a°Sîvi˚ProvidîName
[
i
].
au8ISO639_L™guage_Code
[1] = 
pD©a
[1];

1309 
m¢Des
->
a°Sîvi˚ProvidîName
[
i
].
au8ISO639_L™guage_Code
[2] = 
pD©a
[2];

1310 
m¢Des
->
a°Sîvi˚Name
[
i
].
au8ISO639_L™guage_Code
[0] = 
pD©a
[0];

1311 
m¢Des
->
a°Sîvi˚Name
[
i
].
au8ISO639_L™guage_Code
[1] = 
pD©a
[1];

1312 
m¢Des
->
a°Sîvi˚Name
[
i
].
au8ISO639_L™guage_Code
[2] = 
pD©a
[2];

1313 
pD©a
 += 3;

1316 
m¢Des
->
a°Sîvi˚ProvidîName
[
i
].
u8NameLígth
 = 
pD©a
[0];

1317 
pD©a
 += 1;

1320 
mem˝y
(
m¢Des
->
a°Sîvi˚ProvidîName
[
i
].
au8Ch¨
, 
pD©a
, m¢Des->a°Sîvi˚ProvidîName[i].
u8NameLígth
);

1321 
m¢Des
->
a°Sîvi˚ProvidîName
[
i
].
au8Ch¨
[(msnDes->astServiceProviderName[i].au8Char) - 1] = '\0';

1322 
pD©a
 +
m¢Des
->
a°Sîvi˚ProvidîName
[
i
].
u8NameLígth
;

1325 
m¢Des
->
a°Sîvi˚Name
[
i
].
u8NameLígth
 = 
pD©a
[0];

1326 
pD©a
 += 1;

1329 
mem˝y
(
m¢Des
->
a°Sîvi˚Name
[
i
].
au8Ch¨
, 
pD©a
, m¢Des->a°Sîvi˚Name[i].
u8NameLígth
);

1330 
m¢Des
->
a°Sîvi˚Name
[
i
].
au8Ch¨
[(msnDes->astServiceName[i].au8Char) - 1] = '\0';

1331 
pD©a
 +
m¢Des
->
a°Sîvi˚Name
[
i
].
u8NameLígth
;

1333 
ªmaöLí
 -5 + 
m¢Des
->
a°Sîvi˚ProvidîName
[
i
].
u8NameLígth
 + m¢Des->
a°Sîvi˚Name
[i].u8NameLength;

1334 
i
++;

1336 
m¢Des
->
u8Sîvi˚NameNum
 = (
GOSTSR_U8
)
i
;

1337 
m¢Des
->
u8Sîvi˚ProvidîNameNum
 = (
GOSTSR_U8
)
i
;

1339 
pD©a
 = 
GOSTSR_NULL
;

1341  
GOSTSR_SUCCESS
;

1344 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Mu…ùÀxBuf„rUtûiz©i⁄
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_MULBUFFERUTILIZATION_S
 *
mbuDes
)

1346 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1348 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
mbuDes
))

1350  
GOSTSR_FAILURE
;

1353 i‡(
GOS_PSISI_DESCRIPTOR_MULTIPLEX_BUFFER
 !
§cDes
->
Tag
)

1355  
GOSTSR_FAILURE
;

1358 
mem£t
(
mbuDes
, 0x00, (
GOS_DESC_MULBUFFERUTILIZATION_S
));

1359 
pD©a
 = 
§cDes
->
D©a
;

1362 
mbuDes
->
u8MdvVÆidFœg
 = (
pD©a
[0] & 
BIT8
) / BIT8;

1365 
mbuDes
->
u16Mu…ùÀxDñayV¨üti⁄
 = (
pD©a
[0] & (~(
BIT8
)))*256 +ÖData[1];

1366 
pD©a
 += 2;

1369 
mbuDes
->
u8Mu…ùÀxSå©egy
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
 | 
BIT6
)) / BIT6;

1373 
pD©a
 = 
GOSTSR_NULL
;

1375  
GOSTSR_SUCCESS
;

1378 
GOSTSR_S32
 
GosT§_Des¸ùt‹_NVODRe„ªn˚
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_NVODREF_S
 *
ƒDes
)

1380 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1381 
GOSTSR_U16
 
i
 = 0;

1383 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
ƒDes
))

1385  
GOSTSR_FAILURE
;

1388 i‡(
GOS_PSISI_DESCRIPTOR_NVOD_REFERENCE
 !
§cDes
->
Tag
)

1390  
GOSTSR_FAILURE
;

1393 
mem£t
(
ƒDes
, 0x00, (
GOS_DESC_NVODREF_S
));

1394 
pD©a
 = 
§cDes
->
D©a
;

1396 
ƒDes
->
u8NbSîvi˚
 = 
§cDes
->
u16Size
 / 6;

1397 i‡(
ƒDes
->
u8NbSîvi˚
 > 
GOS_MAX_NVODSERVICE_NUM
)

1399 
ƒDes
->
u8NbSîvi˚
 = 
GOS_MAX_NVODSERVICE_NUM
;

1402 
i
 = 0; i < 
ƒDes
->
u8NbSîvi˚
; i++)

1405 
ƒDes
->
a°Sîvi˚Li°
[
i
].
u16TøsId
 = 
pD©a
[0]*256 +ÖData[1];

1406 
pD©a
 += 2;

1409 
ƒDes
->
a°Sîvi˚Li°
[
i
].
u16OrId
 = 
pD©a
[0]*256 +ÖData[1];

1410 
pD©a
 += 2;

1413 
ƒDes
->
a°Sîvi˚Li°
[
i
].
u16Sîvi˚Id
 = 
pD©a
[0]*256 +ÖData[1];

1414 
pD©a
 += 2;

1417 
pD©a
 = 
GOSTSR_NULL
;

1419  
GOSTSR_SUCCESS
;

1422 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Nëw‹kName
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_NETWORKNAME_S
 *
√äDes
)

1424 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
√äDes
))

1426  
GOSTSR_FAILURE
;

1429 i‡(
GOS_PSISI_DESCRIPTOR_NETWORK_NAME
 !
§cDes
->
Tag
)

1431  
GOSTSR_FAILURE
;

1434 
mem£t
(
√äDes
, 0x00, (
GOS_DESC_NETWORKNAME_S
));

1435 
√äDes
->
u8NameLí
 = (
§cDes
->
u16Size
 < 
GOS_MAX_BOUQUET_NAME_LEN
)? srcDes->u16Size : GOS_MAX_BOUQUET_NAME_LEN;

1436 
mem˝y
(
√äDes
->
au8Nëw‹kName
, 
§cDes
->
D©a
,ÇënDes->
u8NameLí
);

1438  
GOSTSR_SUCCESS
;

1441 
GOSTSR_S32
 
GosT§_Des¸ùt‹_P¨ítR©ög
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_PARENTRATING_S
 *
¥Des
)

1443 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1444 
GOSTSR_U16
 
i
 = 0;

1446 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
¥Des
))

1448  
GOSTSR_FAILURE
;

1451 i‡(
GOS_PSISI_DESCRIPTOR_PARENTAL_RATING
 !
§cDes
->
Tag
)

1453  
GOSTSR_FAILURE
;

1456 
mem£t
(
¥Des
, 0x00, (
GOS_DESC_PARENTRATING_S
));

1457 
pD©a
 = 
§cDes
->
D©a
;

1459 
¥Des
->
u32R©ögNum
 = 
§cDes
->
u16Size
 / 4;

1460 i‡(
¥Des
->
u32R©ögNum
 > 
GOS_MAX_PARENTALRATING_NUM
)

1462 
¥Des
->
u32R©ögNum
 = 
GOS_MAX_PARENTALRATING_NUM
;

1465 
i
 = 0; i < 
¥Des
->
u32R©ögNum
; i++)

1468 
¥Des
->
a°R©ög
[
i
].
u32Lag_Code
 = (
pD©a
[0]<<16) + (pData[1]<<8) +ÖData[2];

1469 
pD©a
 += 3;

1472 
¥Des
->
a°R©ög
[
i
].
u8R©ög
 = 
pD©a
[0];

1473 
pD©a
 += 1;

1476 
pD©a
 = 
GOSTSR_NULL
;

1478  
GOSTSR_SUCCESS
;

1481 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Priv©eD©aS≥cifõr
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_PRIVATE_DATA_SPECIFIER_S
 *
pdsDes
)

1483 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1485 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
pdsDes
))

1487  
GOSTSR_FAILURE
;

1490 i‡(
GOS_PSISI_DESCRIPTOR_PRIVATE_DATA_SPECIFIER
 !
§cDes
->
Tag
)

1492  
GOSTSR_FAILURE
;

1495 
mem£t
(
pdsDes
, 0x00, (
GOS_DESC_PRIVATE_DATA_SPECIFIER_S
));

1496 
pD©a
 = 
§cDes
->
D©a
;

1499 
pdsDes
->
u32Priv©eD©a
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[0]<<8) +ÖData[0];

1500 
pD©a
 += 4;

1502 
pD©a
 = 
GOSTSR_NULL
;

1504  
GOSTSR_SUCCESS
;

1507 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Priv©eD©aIndiˇt‹
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_PRIVATEDATAINDICATOR_S
 *
pdiDes
)

1509 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1511 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
pdiDes
))

1513  
GOSTSR_FAILURE
;

1516 i‡(
GOS_PSISI_DESCRIPTOR_PRIVATE_DATA_INDICATOR
 !
§cDes
->
Tag
)

1518  
GOSTSR_FAILURE
;

1521 
mem£t
(
pdiDes
, 0x00, (
GOS_DESC_PRIVATEDATAINDICATOR_S
));

1522 
pD©a
 = 
§cDes
->
D©a
;

1525 
pdiDes
->
u32Priv©eD©aIndiˇt‹
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[0]<<8) +ÖData[0];

1526 
pD©a
 += 4;

1528 
pD©a
 = 
GOSTSR_NULL
;

1530  
GOSTSR_SUCCESS
;

1533 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Regi°øti⁄
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_REGISTRATION_S
 *
rDes
)

1535 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1536 
GOSTSR_U16
 
ªmaöLí
 = 0;

1538 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
rDes
))

1540  
GOSTSR_FAILURE
;

1543 i‡(
GOS_PSISI_DESCRIPTOR_REGISTRATION
 !
§cDes
->
Tag
)

1545  
GOSTSR_FAILURE
;

1548 
mem£t
(
rDes
, 0x00, (
GOS_DESC_REGISTRATION_S
));

1549 
pD©a
 = 
§cDes
->
D©a
;

1552 
rDes
->
u32F‹m©Idítifõr
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

1553 
pD©a
 += 4;

1556 
ªmaöLí
 = 
§cDes
->
u16Size
 - 4;

1557 
rDes
->
u16AddIdítifiˇti⁄Lí
 = 
ªmaöLí
;

1560 
mem˝y
(
rDes
->
u8AddIdítifiˇti⁄Info
, 
pD©a
, 
ªmaöLí
);

1562 
pD©a
 = 
GOSTSR_NULL
;

1564  
GOSTSR_SUCCESS
;

1566 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Sh‹tSmoŸhögBuf„r
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SHORT_SMOOTHING_BUFFER_S
 *
ssbDes
)

1568 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1570 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
ssbDes
))

1572  
GOSTSR_FAILURE
;

1575 i‡(
GOS_PSISI_DESCRIPTOR_SHORT_SMOOTHING_BUFFER
 !
§cDes
->
Tag
)

1577  
GOSTSR_FAILURE
;

1580 
mem£t
(
ssbDes
, 0x00, (
GOS_DESC_SHORT_SMOOTHING_BUFFER_S
));

1581 
pD©a
 = 
§cDes
->
D©a
;

1584 
ssbDes
->
u8SbSize
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
)) / BIT7;

1587 
ssbDes
->
u8SbLókR©e
 = 
pD©a
[0] & (~(
BIT8
 | 
BIT7
));

1588 
pD©a
 += 1;

1591 i‡(
§cDes
->
u16Size
 > ((
ssbDes
->
u8DVBRe£rved
) + 1))

1593 
ssbDes
->
u16DVBRe£rvedLí
 = (ssbDes->
u8DVBRe£rved
);

1594 
mem˝y
(
ssbDes
->
u8DVBRe£rved
, 
pD©a
, (ssbDes->u8DVBReserved));

1598 
ssbDes
->
u16DVBRe£rvedLí
 = 
§cDes
->
u16Size
 - 1;

1599 
mem˝y
(
ssbDes
->
u8DVBRe£rved
, 
pD©a
, 
§cDes
->
u16Size
 - 1);

1602 
pD©a
 = 
GOSTSR_NULL
;

1604  
GOSTSR_SUCCESS
;

1607 
GOSTSR_S32
 
GosT§_Des¸ùt‹_SmoŸhögBuf„r
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SMOOTHING_BUFFER_S
 *
sbDes
)

1609 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1611 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
sbDes
))

1613  
GOSTSR_FAILURE
;

1616 i‡(
GOS_PSISI_DESCRIPTOR_SMOOTHING_BUFFER
 !
§cDes
->
Tag
)

1618  
GOSTSR_FAILURE
;

1621 
mem£t
(
sbDes
, 0x00, (
GOS_DESC_SMOOTHING_BUFFER_S
));

1622 
pD©a
 = 
§cDes
->
D©a
;

1623 
pD©a
 += 1;

1626 
sbDes
->
u32SbLókR©e
 = (
pD©a
[0] << 8)+pData[1];

1627 
pD©a
 += 3;

1630 
sbDes
->
u32SbSize
 = ((
pD©a
[0] & 0X0F) << 8) +ÖData[1];

1634 
pD©a
 = 
GOSTSR_NULL
;

1636  
GOSTSR_SUCCESS
;

1639 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Sîvi˚
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SERVICE_S
 *
sDes
)

1641 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1643 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
sDes
))

1645  
GOSTSR_FAILURE
;

1648 i‡(
GOS_PSISI_DESCRIPTOR_SERVICE
 !
§cDes
->
Tag
)

1650  
GOSTSR_FAILURE
;

1653 
mem£t
(
sDes
, 0x00, (
GOS_DESC_SERVICE_S
));

1654 
pD©a
 = 
§cDes
->
D©a
;

1657 
sDes
->
u8Sîvi˚Ty≥
 = 
pD©a
[0];

1658 
pD©a
 += 1;

1661 
sDes
->
u8Sîvi˚ProvidîNameLí
 = 
pD©a
[0];

1662 
pD©a
 += 1;

1665 
mem˝y
(
sDes
->
u8Sîvi˚ProvideName
, 
pD©a
, sDes->
u8Sîvi˚ProvidîNameLí
);

1666 
sDes
->
u8Sîvi˚ProvideName
[(sDes->u8ServiceProvideName) - 1] = '\0';

1667 
pD©a
 +
sDes
->
u8Sîvi˚ProvidîNameLí
;

1670 
sDes
->
u8Sîvi˚NameLí
 = 
pD©a
[0];

1671 
pD©a
 += 1;

1674 
mem˝y
(
sDes
->
u8Sîvi˚Name
, 
pD©a
, sDes->
u8Sîvi˚NameLí
);

1675 
sDes
->
u8Sîvi˚Name
[(sDes->u8ServiceName) - 1] = '\0';

1677 
pD©a
 = 
GOSTSR_NULL
;

1679  
GOSTSR_SUCCESS
;

1682 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Sîvi˚Li°
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SERVLIST_S
 *
£rLDes
)

1684 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1685 
GOSTSR_U16
 
i
 = 0;

1686 
GOSTSR_S32
 
desTŸÆLí
 = 0;

1688 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
£rLDes
))

1690  
GOSTSR_FAILURE
;

1693 i‡(
GOS_PSISI_DESCRIPTOR_SERVICE_LIST
 !
§cDes
->
Tag
)

1695  
GOSTSR_FAILURE
;

1698 
mem£t
(
£rLDes
, 0x00, (
GOS_DESC_SERVLIST_S
));

1700 
desTŸÆLí
 = 
§cDes
->
u16Size
;

1701 
pD©a
 = 
§cDes
->
D©a
;

1703 
i
 = 0;

1704 
desTŸÆLí
 > 0)

1707 
£rLDes
->
a°Sîvi˚Li°
[
i
].
U16Sîvi˚Id
 = 
pD©a
[0]*256 +ÖData[1];

1708 
pD©a
 += 2;

1711 
£rLDes
->
a°Sîvi˚Li°
[
i
].
U8Sîvi˚Ty≥
 = 
pD©a
[0];

1712 
pD©a
 += 1;

1714 
desTŸÆLí
 -= 3;

1715 
i
++;

1717 
£rLDes
->
u16NbSîvi˚
 = 
i
;

1719 
pD©a
 = 
GOSTSR_NULL
;

1721  
GOSTSR_SUCCESS
;

1724 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Sîvi˚Move
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SERVICE_MOVE_S
 *
smDes
)

1726 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1728 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
smDes
))

1730  
GOSTSR_FAILURE
;

1733 i‡(
GOS_PSISI_DESCRIPTOR_SERVICE_MOVE
 !
§cDes
->
Tag
)

1735  
GOSTSR_FAILURE
;

1738 
mem£t
(
smDes
, 0x00, (
GOS_DESC_SERVICE_MOVE_S
));

1739 
pD©a
 = 
§cDes
->
D©a
;

1742 
smDes
->
u16NewONID
 = 
pD©a
[0]*256 +ÖData[1];

1743 
pD©a
 += 2;

1746 
smDes
->
u16NewTSID
 = 
pD©a
[0]*256 +ÖData[1];

1747 
pD©a
 += 2;

1750 
smDes
->
u16NewSîvi˚ID
 = 
pD©a
[0]*256 +ÖData[1];

1752 
pD©a
 = 
GOSTSR_NULL
;

1754  
GOSTSR_SUCCESS
;

1757 
GOSTSR_S32
 
GosT§_Des¸ùt‹_S©ñlôeSy°em
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SATDELIVSYS_S
 *
ssdes
)

1759 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1761 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
ssdes
))

1763  
GOSTSR_FAILURE
;

1766 i‡(
GOS_PSISI_DESCRIPTOR_SATELLITE_DELIVERY_SYSTEM
 !
§cDes
->
Tag
)

1768  
GOSTSR_FAILURE
;

1771 
mem£t
(
ssdes
, 0x00, (
GOS_DESC_SATDELIVSYS_S
));

1772 
pD©a
 = 
§cDes
->
D©a
;

1775 
ssdes
->
u32Fªq
 =((
pD©a
[0] & 0xf0Ë/ 
BIT5
)*10000000 + (pData[1] & 0x0f)*1000000 + \

1776 ((
pD©a
[1] & 0xf0Ë/ 
BIT5
)*100000 + (pData[1] & 0x0f)*10000 + \

1777 ((
pD©a
[2] & 0xf0Ë/ 
BIT5
)*1000 + (pData[2] & 0x0f)*100 + \

1778 ((
pD©a
[3] & 0xf0Ë/ 
BIT5
)*10 + (pData[3] & 0x0f);

1779 
pD©a
 += 4;

1782 
ssdes
->
u160rbôÆ_Posôi⁄
 = ((
pD©a
[0] & 0xf0Ë/ 
BIT5
)*1000 + (pData[0] & 0x0f)*100 + \

1783 ((
pD©a
[1] & 0xf0Ë/ 
BIT5
)*10 + (pData[1] & 0x0f);

1784 
pD©a
 += 2;

1787 
ssdes
->
u8We°_Ea°_Fœg
 = (
pD©a
[0] & 
BIT8
) / BIT8;

1790 
ssdes
->
u8Pﬁ¨iz©i⁄
 = (
pD©a
[0] & (
BIT7
 | 
BIT6
)) / BIT6;

1793 
ssdes
->
u8Moduœti⁄
 = 
pD©a
[0] & (
BIT5
 | 
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

1794 
pD©a
 += 1;

1797 
ssdes
->
u32Symbﬁ_R©e
 = ((
pD©a
[0] & 0xf0Ë/ 
BIT5
)*1000000 + (pData[1] & 0x0f)*100000 + \

1798 ((
pD©a
[1] & 0xf0Ë/ 
BIT5
)*10000 + (pData[1] & 0x0f)*1000 + \

1799 ((
pD©a
[2] & 0xf0Ë/ 
BIT5
)*100 + (pData[2] & 0x0f)*10 + \

1800 ((
pD©a
[3] & 0xf0Ë/ 
BIT5
);

1801 
pD©a
 += 3;

1804 
ssdes
->
u8FEC_I¬î
 = 
pD©a
[0] & (
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
);

1806 
pD©a
 = 
GOSTSR_NULL
;

1808  
GOSTSR_SUCCESS
;

1812 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Sh‹tEvít
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SHORTEVT_S
 *
£Des
)

1814 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1816 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
£Des
))

1818  
GOSTSR_FAILURE
;

1821 i‡(
GOS_PSISI_DESCRIPTOR_SHORT_EVENT
 !
§cDes
->
Tag
)

1823  
GOSTSR_FAILURE
;

1826 
mem£t
(
£Des
, 0x00, (
GOS_DESC_SHORTEVT_S
));

1827 
pD©a
 = 
§cDes
->
D©a
;

1830 
£Des
->
u32L™gCode
 = (
pD©a
[0]<<16) + (pData[1]<<8) +ÖData[2];

1831 
pD©a
 += 3;

1834 
£Des
->
u16EvtNameLí
 = 
pD©a
[0];

1835 i‡(
£Des
->
u16EvtNameLí
 > 
GOS_MAX_EVENTNAME_LEN
)

1837 
£Des
->
u16EvtNameLí
 = 
GOS_MAX_EVENTNAME_LEN
;

1839 
pD©a
 += 1;

1842 
mem˝y
(
£Des
->
acEvtName
, 
pD©a
, seDes->
u16EvtNameLí
);

1843 
£Des
->
acEvtName
[(seDes->acEvtName) - 1] = '\0';

1844 
pD©a
 +
£Des
->
u16EvtNameLí
;

1847 
£Des
->
u16Sh‹tEvtDesLí
 = 
pD©a
[0];

1848 i‡(
£Des
->
u16Sh‹tEvtDesLí
 > 
GOS_MAX_EVENTSHORTEXTDES_LEN
)

1850 
£Des
->
u16Sh‹tEvtDesLí
 = 
GOS_MAX_EVENTSHORTEXTDES_LEN
;

1852 
pD©a
 += 1;

1855 
mem˝y
(
£Des
->
acSh‹tEvtDes
, 
pD©a
, seDes->
u16Sh‹tEvtDesLí
);

1856 
£Des
->
acSh‹tEvtDes
[(seDes->acShortEvtDes) - 1] = '\0';

1858 
pD©a
 = 
GOSTSR_NULL
;

1860  
GOSTSR_SUCCESS
;

1863 
GOSTSR_S32
 
GosT§_Des¸ùt‹_SåómIdítifõr
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_STREAM_IDENTIFIER_S
 *
siDes
)

1865 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1867 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
siDes
))

1869  
GOSTSR_FAILURE
;

1872 i‡(
GOS_PSISI_DESCRIPTOR_STREAM_IDENTIFIER
 !
§cDes
->
Tag
)

1874  
GOSTSR_FAILURE
;

1877 
mem£t
(
siDes
, 0x00, (
GOS_DESC_STREAM_IDENTIFIER_S
));

1878 
pD©a
 = 
§cDes
->
D©a
;

1881 
siDes
->
u8Comp⁄ít_èg
 = 
pD©a
[0];

1883 
pD©a
 = 
GOSTSR_NULL
;

1885  
GOSTSR_SUCCESS
;

1888 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Stuffög
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_STUFFING_S
 *
sDes
)

1890 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1892 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
sDes
))

1894  
GOSTSR_FAILURE
;

1897 i‡(
GOS_PSISI_DESCRIPTOR_STUFFING
 !
§cDes
->
Tag
)

1899  
GOSTSR_FAILURE
;

1902 
mem£t
(
sDes
, 0x00, (
GOS_DESC_STUFFING_S
));

1903 
pD©a
 = 
§cDes
->
D©a
;

1906 
sDes
->
u16°uffögLí
 = 
§cDes
->
u16Size
;

1909 
mem˝y
(
sDes
->
u8°uffögByã
, 
pD©a
, sDes->
u16°uffögLí
);

1911 
pD©a
 = 
GOSTSR_NULL
;

1913  
GOSTSR_SUCCESS
;

1916 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Subtôlög
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SUBT_S
 *
sDes
)

1918 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1919 
GOSTSR_U16
 
i
 = 0;

1921 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
sDes
))

1923  
GOSTSR_FAILURE
;

1926 i‡(
GOS_PSISI_DESCRIPTOR_SUBTITLING
 !
§cDes
->
Tag
)

1928  
GOSTSR_FAILURE
;

1931 
mem£t
(
sDes
, 0x00, (
GOS_DESC_SUBT_S
));

1932 
pD©a
 = 
§cDes
->
D©a
;

1935 
sDes
->
u32SubtôÀEÀNum
 = 
§cDes
->
u16Size
 / 8;

1936 i‡(
sDes
->
u32SubtôÀEÀNum
 > 
GOS_MAX_SUBTITLE_ELENUM
)

1938 
sDes
->
u32SubtôÀEÀNum
 = 
GOS_MAX_SUBTITLE_ELENUM
;

1941 
i
 = 0; i < 
sDes
->
u32SubtôÀEÀNum
; i++)

1944 
sDes
->
a°SubtôÀInfo
[
i
].
u32Cou¡ry_Code
 = (
pD©a
[0]<<16) + (pData[1]<<8) +ÖData[2];

1947 
pD©a
 += 3;

1950 
sDes
->
a°SubtôÀInfo
[
i
].
u8Sub°ôlög_Ty≥
 = 
pD©a
[0];

1951 
pD©a
 += 1;

1954 
sDes
->
a°SubtôÀInfo
[
i
].
u16Composôi⁄_Page_Id
 = 
pD©a
[0]*256 +ÖData[1];

1955 
pD©a
 += 2;

1958 
sDes
->
a°SubtôÀInfo
[
i
].
u16Ancûœry_Page_Id
 = 
pD©a
[0]*256 +ÖData[1];

1959 
pD©a
 += 2;

1962 
pD©a
 = 
GOSTSR_NULL
;

1964  
GOSTSR_SUCCESS
;

1967 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Sy°emClock
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_SYSTEMCLOCK_S
 *
scDes
)

1969 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

1971 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
scDes
))

1973  
GOSTSR_FAILURE
;

1976 i‡(
GOS_PSISI_DESCRIPTOR_SYSTEM_CLOCK
 !
§cDes
->
Tag
)

1978  
GOSTSR_FAILURE
;

1981 
mem£t
(
scDes
, 0x00, (
GOS_DESC_SYSTEMCLOCK_S
));

1982 
pD©a
 = 
§cDes
->
D©a
;

1985 
scDes
->
u8Exã∫ClockRefIndiˇt‹
 = (
pD©a
[0] & 
BIT8
) / BIT8;

1990 
scDes
->
u8ClockAccuøcyI¡egî
 = 
pD©a
[0] & (~(
BIT8
 | 
BIT7
));

1991 
pD©a
 += 1;

1994 
scDes
->
u8ClockAccuøcyExp⁄ít
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
 | 
BIT6
)) / BIT6;

1998 
pD©a
 = 
GOSTSR_NULL
;

2000  
GOSTSR_SUCCESS
;

2003 
GOSTSR_S32
 
GosT§_Des¸ùt‹_T¨gëBackgroundGrid
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_TARBACGRID_S
 *
tbgDes
)

2005 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2007 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
tbgDes
))

2009  
GOSTSR_FAILURE
;

2012 i‡(
GOS_PSISI_DESCRIPTOR_TARGET_BACKGROUND_GRID
 !
§cDes
->
Tag
)

2014  
GOSTSR_FAILURE
;

2017 
mem£t
(
tbgDes
, 0x00, (
GOS_DESC_TARBACGRID_S
));

2018 
pD©a
 = 
§cDes
->
D©a
;

2021 
tbgDes
->
u16H‹iz⁄èlSize
 = (
pD©a
[0]<<6) + (pData[1]>>2);

2022 
pD©a
 += 1;

2025 
tbgDes
->
u16VîtiˇlSize
 = ((
pD©a
[0] & (
BIT2
 | 
BIT1
))<<12Ë+ (pD©a[1]<<4Ë+ (pD©a[2] & (
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
)) / BIT5;

2026 
pD©a
 += 2;

2029 
tbgDes
->
u8Pña•e˘R©io
 = 
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

2031 
pD©a
 = 
GOSTSR_NULL
;

2033  
GOSTSR_SUCCESS
;

2036 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Tîª°rülSy°em
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_TERDELIVSYS_S
 *
tsdes
)

2038 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2040 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
tsdes
))

2042  
GOSTSR_FAILURE
;

2045 i‡(
GOS_PSISI_DESCRIPTOR_TERRESTRIAL_DELIVERY_SYSTEM
 !
§cDes
->
Tag
)

2047  
GOSTSR_FAILURE
;

2050 
mem£t
(
tsdes
, 0x00, (
GOS_DESC_TERDELIVSYS_S
));

2051 
pD©a
 = 
§cDes
->
D©a
;

2054 
tsdes
->
u32Cíåe_Fªq
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

2055 
pD©a
 += 4;

2058 
tsdes
->
u8B™dWidth
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
 | 
BIT6
)) / BIT6;

2061 
pD©a
 += 1;

2064 
tsdes
->
u8C⁄°ñœti⁄
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
)) / BIT7;

2067 
tsdes
->
u8Hõørchy_Inf‹
 = (
pD©a
[0] & (
BIT6
 | 
BIT5
 | 
BIT4
)) / BIT4;

2070 
tsdes
->
u8Code_øã_HP_°ªam
 = 
pD©a
[0] & (
BIT3
 | 
BIT2
 | 
BIT1
);

2071 
pD©a
 += 1;

2074 
tsdes
->
u8Code_øã_LP_°ªam
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
 | 
BIT6
)) / BIT6;

2077 
tsdes
->
u8Gu¨d_I¡îvÆ
 = (
pD©a
[0] & (
BIT5
 | 
BIT4
)) / BIT4;

2080 
tsdes
->
u8Tøns_Mode
 = (
pD©a
[0] & (
BIT3
 | 
BIT2
)) / BIT2;

2083 
tsdes
->
u8Othî_Fªq_Fœg
 = 
pD©a
[0] & 
BIT1
;

2085 
pD©a
 += 1;

2089 
pD©a
 = 
GOSTSR_NULL
;

2091  
GOSTSR_SUCCESS
;

2094 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Tñïh⁄e
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_TELEPHONE_S
 *
tDes
)

2096 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2098 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
tDes
))

2100  
GOSTSR_FAILURE
;

2103 i‡(
GOS_PSISI_DESCRIPTOR_TELEPHONE
 !
§cDes
->
Tag
)

2105  
GOSTSR_FAILURE
;

2108 
mem£t
(
tDes
, 0x00, (
GOS_DESC_TELEPHONE_S
));

2109 
pD©a
 = 
§cDes
->
D©a
;

2114 
tDes
->
u8F‹egöAvaûabûôy
 = (
pD©a
[0] & 
BIT6
) / BIT6;

2117 
tDes
->
u8C⁄√˘Ty≥
 = 
pD©a
[0] & (
BIT5
 | 
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

2118 
pD©a
 += 1;

2123 
tDes
->
u8Cou¡ryPªfixLí
 = (
pD©a
[0] & (
BIT7
 | 
BIT6
)) / BIT6;

2126 
tDes
->
u8I¡î«ti⁄ÆAªaCodeLí
 = (
pD©a
[0] & (
BIT5
 | 
BIT4
 | 
BIT3
)) / BIT3;

2129 
tDes
->
u8O≥øt‹CodeLí
 = 
pD©a
[0] & (
BIT2
 | 
BIT1
);

2130 
pD©a
 += 1;

2135 
tDes
->
u8N©i⁄AªaCodeLí
 = (
pD©a
[0] & (
BIT7
 | 
BIT6
 | 
BIT5
)) / BIT5;

2138 
tDes
->
u8C‹eNumbîCodeLí
 = 
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

2139 
pD©a
 += 1;

2142 
mem˝y
(
tDes
->
u8Cou¡ryPªfix
, 
pD©a
,ÅDes->
u8Cou¡ryPªfixLí
);

2143 
pD©a
 +
tDes
->
u8Cou¡ryPªfixLí
;

2146 
mem˝y
(
tDes
->
u8I¡î«ti⁄aAªaCode
, 
pD©a
,ÅDes->
u8I¡î«ti⁄ÆAªaCodeLí
);

2147 
pD©a
 +
tDes
->
u8I¡î«ti⁄ÆAªaCodeLí
;

2150 
mem˝y
(
tDes
->
u8O≥øt‹Code
, 
pD©a
,ÅDes->
u8O≥øt‹CodeLí
);

2151 
pD©a
 +
tDes
->
u8O≥øt‹CodeLí
;

2154 
mem˝y
(
tDes
->
u8I¡î«ti⁄aAªaCode
, 
pD©a
,ÅDes->
u8I¡î«ti⁄ÆAªaCodeLí
);

2155 
pD©a
 +
tDes
->
u8I¡î«ti⁄ÆAªaCodeLí
;

2158 
mem˝y
(
tDes
->
u8C‹eNumbîCode
, 
pD©a
,ÅDes->
u8C‹eNumbîCodeLí
);

2160 
pD©a
 = 
GOSTSR_NULL
;

2162  
GOSTSR_SUCCESS
;

2165 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Tñëex
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_TELETEXT_S
 *
tDes
)

2167 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2168 
GOSTSR_U16
 
i
 = 0;

2170 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
tDes
))

2172  
GOSTSR_FAILURE
;

2175 i‡(
GOS_PSISI_DESCRIPTOR_TELETEXT
 !
§cDes
->
Tag
)

2177  
GOSTSR_FAILURE
;

2180 
mem£t
(
tDes
, 0x00, (
GOS_DESC_TELETEXT_S
));

2181 
pD©a
 = 
§cDes
->
D©a
;

2184 
tDes
->
u32TñëextNum
 = 
§cDes
->
u16Size
 / 5;

2187 
i
 = 0; i < 
tDes
->
u32TñëextNum
; i++)

2190 
tDes
->
a°TñëextInfo
[
i
].
u32Lag_Code
 = (
pD©a
[0]<<16) + (pData[1]<<8) +ÖData[2];

2192 
pD©a
 += 3;

2195 
tDes
->
a°TñëextInfo
[
i
].
u8Tñëext_Ty≥
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
 | 
BIT4
)) / BIT4;

2198 
tDes
->
a°TñëextInfo
[
i
].
u8Tñëext_Magazöe_Numbî
 = 
pD©a
[0] & (
BIT3
 | 
BIT2
 | 
BIT1
);

2199 
pD©a
 += 1;

2202 
tDes
->
a°TñëextInfo
[
i
].
u8Tñëext_Page_Numbî
 = 
pD©a
[0];

2203 
pD©a
 += 1;

2206 
pD©a
 = 
GOSTSR_NULL
;

2208  
GOSTSR_SUCCESS
;

2211 
GOSTSR_S32
 
GosT§_Des¸ùt‹_TimeShi·edEvít
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_TMSHIFTEVT_S
 *
t£Des
)

2213 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2215 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
t£Des
))

2217  
GOSTSR_FAILURE
;

2220 i‡(
GOS_PSISI_DESCRIPTOR_TIME_SHIFTED_EVENT
 !
§cDes
->
Tag
)

2222  
GOSTSR_FAILURE
;

2225 
mem£t
(
t£Des
, 0x00, (
GOS_DESC_TMSHIFTEVT_S
));

2226 
pD©a
 = 
§cDes
->
D©a
;

2229 
t£Des
->
u16Ref_Sîvi˚_Id
 = 
pD©a
[0]*256 +ÖData[1];

2230 
pD©a
 += 2;

2233 
t£Des
->
u16Ref_Evt_Id
 = 
pD©a
[0]*256 +ÖData[1];

2235 
pD©a
 = 
GOSTSR_NULL
;

2237  
GOSTSR_SUCCESS
;

2240 
GOSTSR_S32
 
GosT§_Des¸ùt‹_TimeShi·edSîvi˚
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_TIMESHIFTSERV_S
 *
tssDes
)

2242 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2244 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
tssDes
))

2246  
GOSTSR_FAILURE
;

2249 i‡(
GOS_PSISI_DESCRIPTOR_TIME_SHIFTEDSERVICE
 !
§cDes
->
Tag
)

2251  
GOSTSR_FAILURE
;

2254 
mem£t
(
tssDes
, 0x00, (
GOS_DESC_TIMESHIFTSERV_S
));

2255 
pD©a
 = 
§cDes
->
D©a
;

2258 
tssDes
->
u16RefSîvi˚Id
 = 
pD©a
[0]*256 +ÖData[1];

2260 
pD©a
 = 
GOSTSR_NULL
;

2262  
GOSTSR_SUCCESS
;

2265 
GOSTSR_S32
 
GosT§_Des¸ùt‹_VideoSåóm
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_VIDEOSTREAM_S
 *
vsDes
)

2267 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2269 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
vsDes
))

2271  
GOSTSR_FAILURE
;

2274 i‡(
GOS_PSISI_DESCRIPTOR_VIDEO_STREAM
 !
§cDes
->
Tag
)

2276  
GOSTSR_FAILURE
;

2279 
mem£t
(
vsDes
, 0x00, (
GOS_DESC_VIDEOSTREAM_S
));

2280 
pD©a
 = 
§cDes
->
D©a
;

2283 
vsDes
->
u8Mu…ùÀFømeR©eFœg
 = (
pD©a
[0] & 
BIT8
) / BIT8;

2286 
vsDes
->
u8FømeR©eCode
 = (
pD©a
[0] & (
BIT7
 | 
BIT6
 | 
BIT5
 | 
BIT4
)) / BIT4;

2289 
vsDes
->
u8MPEG2Fœg
 = (
pD©a
[0] & 
BIT3
) / BIT3;

2292 
vsDes
->
u8C⁄°øöP¨amëîFœg
 = (
pD©a
[0] & 
BIT2
) / BIT2;

2295 
vsDes
->
u8StûlPi˘uªFœg
 = 
pD©a
[0] & 
BIT1
;

2296 
pD©a
 += 1;

2298 i‡(
vsDes
->
u8MPEG2Fœg
 == 0x01)

2301 
vsDes
->
u8ProfûeAndLevñIndiˇti⁄
 = 
pD©a
[0];

2302 
pD©a
 += 1;

2305 
vsDes
->
u8ChromaF‹m©
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
)) / BIT7;

2308 
vsDes
->
u8FømeR©eExãnsi⁄Fœg
 = (
pD©a
[0] & 
BIT6
) / BIT6;

2313 
pD©a
 = 
GOSTSR_NULL
;

2315  
GOSTSR_SUCCESS
;

2318 
GOSTSR_S32
 
GosT§_Des¸ùt‹_VideoWödow
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_VIDEOWINDOW_S
 *
vwDes
)

2320 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2322 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
vwDes
))

2324  
GOSTSR_FAILURE
;

2327 i‡(
GOS_PSISI_DESCRIPTOR_VIDEO_WINDOW
 !
§cDes
->
Tag
)

2329  
GOSTSR_FAILURE
;

2332 
mem£t
(
vwDes
, 0x00, (
GOS_DESC_VIDEOWINDOW_S
));

2333 
pD©a
 = 
§cDes
->
D©a
;

2336 
vwDes
->
u16H‹iz⁄èlZOff£t
 = (
pD©a
[0]<<6) + (pData[1]>>2);

2337 
pD©a
 += 1;

2340 
vwDes
->
u16VîtiˇlOff£t
 = ((
pD©a
[0] & (
BIT2
 | 
BIT1
))<<12Ë+ (pD©a[1]<<4Ë+ (pD©a[2] & (
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
)) / BIT5;

2341 
pD©a
 += 2;

2344 
vwDes
->
u8WödowPri‹ôy
 = 
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

2346 
pD©a
 = 
GOSTSR_NULL
;

2348  
GOSTSR_SUCCESS
;

2351 
GOSTSR_S32
 
GosT§_Des¸ùt‹_PDC
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_PDC_S
 *
pdcDes
)

2353 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2354 
GOSTSR_U8
 
ãmpD©a
 = 0;

2356 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
pdcDes
))

2358  
GOSTSR_FAILURE
;

2361 i‡(
GOS_PSISI_DESCRIPTOR_PDC
 !
§cDes
->
Tag
)

2363  
GOSTSR_FAILURE
;

2366 
mem£t
(
pdcDes
, 0x00, (
GOS_DESC_PDC_S
));

2367 
pD©a
 = 
§cDes
->
D©a
;

2370 
ãmpD©a
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
) ) / BIT5;

2373 
pdcDes
->
u32ProgømmeIdítifiˇti⁄
 = ((
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
)) << 16) + (pData[1] << 8) +ÖData[2];

2374 
pD©a
 += 3;

2376 
pD©a
 = 
GOSTSR_NULL
;

2378  
GOSTSR_SUCCESS
;

2382 
GOSTSR_S32
 
GosT§_Des¸ùt‹_STD
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_STD_S
 *
°dDes
)

2384 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2385 
GOSTSR_U8
 
ãmpD©a
 = 0;

2387 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
°dDes
))

2389  
GOSTSR_FAILURE
;

2392 i‡(
GOS_PSISI_DESCRIPTOR_STD
 !
§cDes
->
Tag
)

2394  
GOSTSR_FAILURE
;

2397 
mem£t
(
°dDes
, 0x00, (
GOS_DESC_STD_S
));

2398 
pD©a
 = 
§cDes
->
D©a
;

2401 
ãmpD©a
 = (
pD©a
[0] & (~
BIT1
)Ë/ 
BIT2
;

2404 
°dDes
->
u8RókVÆidFœg
 = 
pD©a
[0] & (
BIT1
);

2406 
pD©a
 += 1;

2408 
pD©a
 = 
GOSTSR_NULL
;

2410  
GOSTSR_SUCCESS
;

2413 
GOSTSR_S32
 
GosT§_Des¸ùt‹_IBP
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_IBP_S
 *
ibpDes
)

2415 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2417 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
ibpDes
))

2419  
GOSTSR_FAILURE
;

2422 i‡(
GOS_PSISI_DESCRIPTOR_IBP
 !
§cDes
->
Tag
)

2424  
GOSTSR_FAILURE
;

2427 
mem£t
(
ibpDes
, 0x00, (
GOS_DESC_IBP_S
));

2428 
pD©a
 = 
§cDes
->
D©a
;

2431 
ibpDes
->
u8Clo£dG›Fœg
(
pD©a
[0] & (
BIT8
)) / BIT8;

2434 
ibpDes
->
u8IdítiˇlG›Fœg
(
pD©a
[0] & (
BIT7
)) / BIT7;

2437 
ibpDes
->
u16MaxG›Lígth
 = (
pD©a
[0] & ((~ (
BIT8
 | 
BIT7
)) << 8)) +ÖData[1];

2439 
pD©a
 += 2;

2441 
pD©a
 = 
GOSTSR_NULL
;

2443  
GOSTSR_SUCCESS
;

2446 
GOSTSR_S32
 
GosT§_Des¸ùt‹_DSNG
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_DSNG_S
 *
dgDes
)

2448 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2449 
GOSTSR_U16
 
i
 = 0;

2451 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
dgDes
))

2453  
GOSTSR_FAILURE
;

2456 i‡(
GOS_PSISI_DESCRIPTOR_DSNG
 !
§cDes
->
Tag
)

2458  
GOSTSR_FAILURE
;

2461 
mem£t
(
dgDes
, 0x00, (
GOS_DESC_DSNG_S
));

2462 
pD©a
 = 
§cDes
->
D©a
;

2465 
dgDes
->
u16ByãLí
 = 
§cDes
->
u16Size
;

2467 
i
 = 0; i < 
dgDes
->
u16ByãLí
; i++)

2470 
dgDes
->
a°Byã
[
i
].
u8ByãD©a
 = 
pD©a
[0];

2474 
pD©a
 +
dgDes
->
u16ByãLí
;

2476 
pD©a
 = 
GOSTSR_NULL
;

2478  
GOSTSR_SUCCESS
;

2481 
GOSTSR_S32
 
GosT§_Des¸ùt‹_Tøn•‹tSåóm
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_TPSTREAM_S
 *
çsDes
)

2483 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2484 
GOSTSR_U16
 
i
 = 0;

2486 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
çsDes
))

2488  
GOSTSR_FAILURE
;

2491 i‡(
GOS_PSISI_DESCRIPTOR_TRANSPORT_STREAM
 !
§cDes
->
Tag
)

2493  
GOSTSR_FAILURE
;

2496 
mem£t
(
çsDes
, 0x00, (
GOS_DESC_TPSTREAM_S
));

2497 
pD©a
 = 
§cDes
->
D©a
;

2500 
çsDes
->
u16ByãLí
 = 
§cDes
->
u16Size
;

2503 
i
 = 0; i < 
çsDes
->
u16ByãLí
; i++)

2506 
çsDes
->
a°Byã
[
i
].
u8ByãD©a
 = 
pD©a
[0];

2509 
pD©a
 +
çsDes
->
u16ByãLí
;

2511 
pD©a
 = 
GOSTSR_NULL
;

2513  
GOSTSR_SUCCESS
;

2516 
GOSTSR_S32
 
GosT§_Des¸ùt‹_VBI_D©a
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_VBIDATA_S
 *
vbiDes
)

2518 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2519 
GOSTSR_U8
 
ãmpD©aI¡
 = 0;

2520 
GOSTSR_U8
 
ãmpD©aCh¨
[256] = {0};

2521 
GOSTSR_U16
 
i
 = 0;

2522 
GOSTSR_U16
 
j
 = 0;

2524 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
vbiDes
))

2526  
GOSTSR_FAILURE
;

2529 i‡(
GOS_PSISI_DESCRIPTOR_VBI_DATA
 !
§cDes
->
Tag
)

2531  
GOSTSR_FAILURE
;

2534 
mem£t
(
vbiDes
, 0x00, (
GOS_DESC_VBIDATA_S
));

2535 
pD©a
 = 
§cDes
->
D©a
;

2537 
vbiDes
->
u16VbiD©aLí

§cDes
->
u16Size
;

2539 
i
 = 0; i < 
vbiDes
->
u16VbiD©aLí
; i++)

2542 
vbiDes
->
a°D©aSîv
[
i
].
u8D©aSîvi˚Id

pD©a
[0];

2543 
pD©a
 += 1;

2546 
vbiDes
->
a°D©aSîv
[
i
].
u8D©aSîvDesLí
 = 
pD©a
[0];

2547 
pD©a
 += 1;

2549 i‡–
vbiDes
->
a°D©aSîv
[
i
].
u8D©aSîvi˚Id
 ==0x01 || \

2550 
vbiDes
->
a°D©aSîv
[
i
].
u8D©aSîvi˚Id
 ==0x02 || \

2551 
vbiDes
->
a°D©aSîv
[
i
].
u8D©aSîvi˚Id
 ==0x04 || \

2552 
vbiDes
->
a°D©aSîv
[
i
].
u8D©aSîvi˚Id
 ==0x05 || \

2553 
vbiDes
->
a°D©aSîv
[
i
].
u8D©aSîvi˚Id
 ==0x06 || \

2554 
vbiDes
->
a°D©aSîv
[
i
].
u8D©aSîvi˚Id
 ==0x07 )

2556 
j
 = 0; j < 
vbiDes
->
a°D©aSîv
[
i
].
u8D©aSîvDesLí
 ; j++)

2559 
ãmpD©aI¡
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
)) / BIT7;

2562 
vbiDes
->
a°D©aSîv
[
i
].
a°SîvDes
[
j
].
u8FõldP¨ôy
 = (
pD©a
[0] & 
BIT6
) / BIT6;

2565 
vbiDes
->
a°D©aSîv
[
i
].
a°SîvDes
[
j
].
u8LöeOff£t
 = 
pD©a
[0] & (~(
BIT8
 | 
BIT7
 | 
BIT6
));

2571 
mem˝y
(
ãmpD©aCh¨
, 
pD©a
, 
vbiDes
->
a°D©aSîv
[
i
].
u8D©aSîvDesLí
);

2576 
pD©a
 += 1;

2578 
pD©a
 = 
GOSTSR_NULL
;

2580  
GOSTSR_SUCCESS
;

2583 
GOSTSR_S32
 
GosT§_Des¸ùt‹_VBI_Tñëext
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_VBITELETEXT_S
 *
vâDes
)

2585 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2586 
GOSTSR_U16
 
i
 = 0;

2589 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
vâDes
))

2591  
GOSTSR_FAILURE
;

2594 i‡(
GOS_PSISI_DESCRIPTOR_VBI_TELETEXT
 !
§cDes
->
Tag
)

2596  
GOSTSR_FAILURE
;

2599 
mem£t
(
vâDes
, 0x00, (
GOS_DESC_VBITELETEXT_S
));

2600 
pD©a
 = 
§cDes
->
D©a
;

2603 
vâDes
->
u16VbiTñeTextLí

§cDes
->
u16Size
;

2605 
i
 = 0; i < 
vâDes
->
u16VbiTñeTextLí
; i++)

2608 
vâDes
->
a°TñeText
[
i
].
u32L™guageCode
 = (
pD©a
[0]<<16) + (pData[1]<<8) +ÖData[2];

2609 
pD©a
 += 3;

2612 
vâDes
->
a°TñeText
[
i
].
u8TñëextTy≥
 = (
pD©a
[0] & (~ (
BIT3
 | 
BIT2
 | 
BIT1
))Ë/ 
BIT4
;

2615 
vâDes
->
a°TñeText
[
i
].
u8TñëextMagNum
 = 
pD©a
[0] & (
BIT3
 | 
BIT2
 | 
BIT1
);

2616 
pD©a
 += 1;

2619 
vâDes
->
a°TñeText
[
i
].
u8TñëextPageNum
 = 
pD©a
[0];

2620 
pD©a
 += 1;

2623 
pD©a
 = 
GOSTSR_NULL
;

2625  
GOSTSR_SUCCESS
;

2628 
GOSTSR_S32
 
GosT§_Des¸ùt‹_P¨tülTønSåóm
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_PARTIAL_TRANSTREAM_S
 *
±sDes
)

2630 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2631 
GOSTSR_U8
 
ãmpD©a
 = 0;

2633 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
±sDes
))

2635  
GOSTSR_FAILURE
;

2638 i‡(
GOS_PSISI_DESCRIPTOR_PARTIAL_TRANSPORT_STREAM
 !
§cDes
->
Tag
)

2640  
GOSTSR_FAILURE
;

2643 
mem£t
(
±sDes
, 0x00, (
GOS_DESC_PARTIAL_TRANSTREAM_S
));

2644 
pD©a
 = 
§cDes
->
D©a
;

2647 
ãmpD©a
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
)) /BIT7;

2650 
±sDes
->
u32PókR©e
 = ((
pD©a
[0] & (~(
BIT8
 | 
BIT7
))) << 16) + (pData[1] << 8) +ÖData[2];

2651 
pD©a
 += 3;

2654 
ãmpD©a
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
)) /BIT7;

2657 
±sDes
->
u32MöiSmoŸhR©e
 = ((
pD©a
[0] & (~(
BIT8
 | 
BIT7
))) << 16) + (pData[1] << 8) +ÖData[2];

2658 
pD©a
 += 3;

2661 
ãmpD©a
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
)) /BIT7;

2664 
±sDes
->
u16MaxiOvîSmoŸhBuâe
 = ((
pD©a
[0] & (~(
BIT8
 | 
BIT7
))) << 8) +ÖData[1];

2666 
pD©a
 = 
GOSTSR_NULL
;

2668  
GOSTSR_SUCCESS
;

2671 
GOSTSR_S32
 
GosT§_Des¸ùt‹_AC3
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_AC3_S
 *
acDes
)

2673 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2674 
GOSTSR_U16
 
u16ãmpLí
= 0;

2675 
GOSTSR_U8
 
ãmpD©a
 = 0;

2676 
GOSTSR_U8
 
i
 = 0;

2678 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
acDes
))

2680  
GOSTSR_FAILURE
;

2683 i‡(
GOS_PSISI_DESCRIPTOR_AC3
 !
§cDes
->
Tag
)

2685  
GOSTSR_FAILURE
;

2688 
mem£t
(
acDes
, 0x00, (
GOS_DESC_AC3_S
));

2689 
pD©a
 = 
§cDes
->
D©a
;

2691 
u16ãmpLí
 = 
§cDes
->
u16Size
;

2694 
acDes
->
u8AC3Ty≥Fœg
 = (
pD©a
[0] & 
BIT8
) /BIT8;

2697 
acDes
->
u8AC3Ty≥Fœg
 = (
pD©a
[0] & 
BIT7
) /BIT7;

2700 
acDes
->
u8AC3Ty≥Fœg
 = (
pD©a
[0] & 
BIT6
) /BIT6;

2703 
acDes
->
u8AC3Ty≥Fœg
 = (
pD©a
[0] & 
BIT5
) /BIT5;

2706 
ãmpD©a
 = 
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

2707 
pD©a
 += 1;

2710 if(
acDes
->
u8AC3Ty≥Fœg
 == 0x01)

2712 
acDes
->
u8AC3Ty≥
 = 
pD©a
[0];

2713 
pD©a
 += 1;

2717 if(
acDes
->
u8BsidFœg
 == 0x01)

2719 
acDes
->
u8Bsid
 = 
pD©a
[0];

2720 
pD©a
 += 1;

2724 if(
acDes
->
u8MaöidFœg
 == 0x01)

2726 
acDes
->
u8Maöid
 = 
pD©a
[0];

2727 
pD©a
 += 1;

2731 if(
acDes
->
u8AsvcFœg
 == 0x01)

2733 
acDes
->
u8Asvc
 = 
pD©a
[0];

2734 
pD©a
 += 1;

2736 
i
 = 0; i < 
u16ãmpLí
; i++)

2739 
acDes
->
a°AddInfo
[
i
].
u32Addôi⁄ÆInfo
 = 
pD©a
[0] * 
u16ãmpLí
;

2743 
pD©a
 = 
GOSTSR_NULL
;

2745  
GOSTSR_SUCCESS
;

2748 
GOSTSR_S32
 
GosT§_Des¸ùt‹_AncûœryD©a
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_ANCILLARRYDATA_S
 *
™Des
)

2750 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2752 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
™Des
))

2754  
GOSTSR_FAILURE
;

2757 i‡(
GOS_PSISI_DESCRIPTOR_ANCILLARY_DATA
 !
§cDes
->
Tag
)

2759  
GOSTSR_FAILURE
;

2762 
mem£t
(
™Des
, 0x00, (
GOS_DESC_ANCILLARRYDATA_S
));

2763 
pD©a
 = 
§cDes
->
D©a
;

2766 
™Des
->
u8AncûœryD©aIdítifõr
 = 
pD©a
[0];

2767 
pD©a
 += 1;

2769 
pD©a
 = 
GOSTSR_NULL
;

2771  
GOSTSR_SUCCESS
;

2774 
GOSTSR_S32
 
GosT§_Des¸ùt‹_CñlLi°
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_CELLLIST_S
 *
˛Des
)

2776 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2777 
GOSTSR_U16
 
i
 = 0;

2778 
GOSTSR_U16
 
j
 = 0;

2780 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
˛Des
))

2782  
GOSTSR_FAILURE
;

2785 i‡(
GOS_PSISI_DESCRIPTOR_CELL_LIST
 !
§cDes
->
Tag
)

2787  
GOSTSR_FAILURE
;

2790 
mem£t
(
˛Des
, 0x00, (
GOS_DESC_CELLLIST_S
));

2791 
pD©a
 = 
§cDes
->
D©a
;

2793 
˛Des
->
u16CñlLi°Lí
 = 
§cDes
->
u16Size
;

2794 
i
 = 0; i < 
˛Des
->
u16CñlLi°Lí
; i++)

2797 
˛Des
->
a°CñlInfo
[
i
].
u16CñlId
 = (
pD©a
[0] << 8) +ÖData[1];

2798 
pD©a
 += 2;

2801 
˛Des
->
a°CñlInfo
[
i
].
u16CñlL©ôude
 = (
pD©a
[0] << 8) +ÖData[1];

2802 
pD©a
 += 2;

2805 
˛Des
->
a°CñlInfo
[
i
].
u16CñlL⁄gtôude
 = (
pD©a
[0] << 8) +ÖData[1];

2806 
pD©a
 += 2;

2809 
˛Des
->
a°CñlInfo
[
i
].
u16CñlExL©ôude
 = (
pD©a
[0] << 8Ë+ (pD©a[1] & (
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
) / BIT5);

2810 
pD©a
 += 1;

2813 
˛Des
->
a°CñlInfo
[
i
].
u16CñlExL⁄gtôude
 = ((
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
)) << 8) +ÖData[1];

2814 
pD©a
 += 2;

2817 
˛Des
->
a°CñlInfo
[
i
].
u8SubCñlInfoLí
 = 
pD©a
[0] ;

2818 
pD©a
 += 1;

2820 
j
 = 0; j < 
˛Des
->
a°CñlInfo
[
i
].
u8SubCñlInfoLí
; j++)

2823 
˛Des
->
a°CñlInfo
[
i
].
a°SubCñlInfo
[
j
].
u8CñlIdExãnsi⁄
 = 
pD©a
[0];

2824 
pD©a
 += 1;

2827 
˛Des
->
a°CñlInfo
[
i
].
a°SubCñlInfo
[
j
].
u16SubCñlL©ôude
 = (
pD©a
[0] << 8) +ÖData[1];

2828 
pD©a
 += 2;

2831 
˛Des
->
a°CñlInfo
[
i
].
a°SubCñlInfo
[
j
].
u16SubCñlL⁄gtôude
 = (
pD©a
[0] << 8) +ÖData[1];

2832 
pD©a
 += 2;

2835 
˛Des
->
a°CñlInfo
[
i
].
a°SubCñlInfo
[
j
].
u16SubCñlExL©ôude
 = (
pD©a
[0] << 8Ë+ (pD©a[1] & (
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
) / BIT5);

2836 
pD©a
 += 1;

2839 
˛Des
->
a°CñlInfo
[
i
].
a°SubCñlInfo
[
j
].
u16SubCñlExL⁄gtôude
 = ((
pD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
)) << 8) +ÖData[1];

2840 
pD©a
 += 2;

2844 
pD©a
 = 
GOSTSR_NULL
;

2846  
GOSTSR_SUCCESS
;

2849 
GOSTSR_S32
 
GosT§_Des¸ùt‹_CñlFªLök
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_CELLFRELINK_S
 *
cÊDes
)

2851 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2852 
GOSTSR_U16
 
i
 = 0;

2853 
GOSTSR_U16
 
j
 = 0;

2855 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
cÊDes
))

2857  
GOSTSR_FAILURE
;

2860 i‡(
GOS_PSISI_DESCRIPTOR_CELL_FREQUENCY_LINK
 !
§cDes
->
Tag
)

2862  
GOSTSR_FAILURE
;

2865 
mem£t
(
cÊDes
, 0x00, (
GOS_DESC_CELLFRELINK_S
));

2866 
pD©a
 = 
§cDes
->
D©a
;

2868 
cÊDes
->
u16CñlFªLí
 = 
§cDes
->
u16Size
;

2869 
i
 = 0; i < 
cÊDes
->
u16CñlFªLí
; i++)

2872 
cÊDes
->
a°CñlFªInfo
[
i
].
u16CñlId
 = (
pD©a
[0] << 8) +ÖData[1];

2873 
pD©a
 += 2;

2876 
cÊDes
->
a°CñlFªInfo
[
i
].
u32Fªquícy
 =((
pD©a
[0] & 0xf0Ë/ 
BIT5
)*10000000 + (pData[0] & 0x0f)*1000000 + \

2877 ((
pD©a
[1] & 0xf0Ë/ 
BIT5
)*100000 + (pData[1] & 0x0f)*10000 + \

2878 ((
pD©a
[2] & 0xf0Ë/ 
BIT5
)*1000 + (pData[2] & 0x0f)*100 + \

2879 ((
pD©a
[3] & 0xf0Ë/ 
BIT5
)*10 + (pData[3] & 0x0f);

2880 
pD©a
 += 3;

2883 
cÊDes
->
a°CñlFªInfo
[
i
].
u8SubCñlFªInfoLí
 = 
pD©a
[0] ;

2884 
pD©a
 += 1;

2886 
j
 = 0; j < 
cÊDes
->
a°CñlFªInfo
[
i
].
u8SubCñlFªInfoLí
; j++)

2889 
cÊDes
->
a°CñlFªInfo
[
i
].
a°SubCñlFªInfo
[
j
].
u8CñlIdExãn
 = 
pD©a
[0];

2890 
pD©a
 += 1;

2893 
cÊDes
->
a°CñlFªInfo
[
i
].
a°SubCñlFªInfo
[
j
].
u32TønsFªquícy
 = ((
pD©a
[0] & 0xf0Ë/ 
BIT5
)*10000000 + (pData[0] & 0x0f)*1000000 + \

2894 ((
pD©a
[1] & 0xf0Ë/ 
BIT5
)*100000 + (pData[1] & 0x0f)*10000 + \

2895 ((
pD©a
[2] & 0xf0Ë/ 
BIT5
)*1000 + (pData[2] & 0x0f)*100 + \

2896 ((
pD©a
[3] & 0xf0Ë/ 
BIT5
)*10 + (pData[3] & 0x0f);

2897 
pD©a
 += 3;

2901 
pD©a
 = 
GOSTSR_NULL
;

2903  
GOSTSR_SUCCESS
;

2906 
GOSTSR_S32
 
GosT§_Des¸ùt‹_A¬oun˚Suµ‹t
(
GOS_PSISI_Des¸ùt‹_S
 *
§cDes
, 
GOS_DESC_ANNOUNCE_S
 *
™Des
)

2908 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

2909 
GOSTSR_U8
 
tmpD©a
 = 0;

2910 
GOSTSR_U16
 
i
 = 0;

2912 i‡((
GOSTSR_NULL
 =
§cDes
Ë|| (GOSTSR_NULL =
™Des
))

2914  
GOSTSR_FAILURE
;

2917 i‡(
GOS_PSISI_DESCRIPTOR_ANNOUNCEMENT_SUPPORT
 !
§cDes
->
Tag
)

2919  
GOSTSR_FAILURE
;

2922 
mem£t
(
™Des
, 0x00, (
GOS_DESC_ANNOUNCE_S
));

2923 
pD©a
 = 
§cDes
->
D©a
;

2925 
™Des
->
u16A¬oun˚Lí
 = 
§cDes
->
u16Size
;

2928 
™Des
->
u16AnSuµ‹tIndiˇt‹
 = (
pD©a
[0] << 8) +ÖData[1];

2929 
pD©a
 += 2;

2931 
i
 = 0; i < 
™Des
->
u16A¬oun˚Lí
; i++)

2934 
™Des
->
a°AddInfo
[
i
].
u8A¬oun˚Ty≥
 = (
pD©a
[0] & (
BIT8
 | 
BIT7
 |
BIT6
 | 
BIT5
)) / BIT5;

2937 
tmpD©a
 = (
pD©a
[0] & 
BIT4
) / BIT4;

2940 
™Des
->
a°AddInfo
[
i
].
u8Re„ªn˚Ty≥
 = 
pD©a
[0] & (
BIT3
 | 
BIT2
 | 
BIT1
);

2941 
pD©a
 += 1;

2943 i‡(
™Des
->
a°AddInfo
[
i
].
u8Re„ªn˚Ty≥
 == 0x01 \

2944 || 
™Des
->
a°AddInfo
[
i
].
u8Re„ªn˚Ty≥
 ==0x02 \

2945 || 
™Des
->
a°AddInfo
[
i
].
u8Re„ªn˚Ty≥
 ==0x03)

2948 
™Des
->
a°AddInfo
[
i
].
u8OrigöÆNëw‹kId
 = (
pD©a
[0] << 8) +ÖData[1];

2949 
pD©a
 += 2;

2952 
™Des
->
a°AddInfo
[
i
].
u8Tøn•‹tSåómId
 = (
pD©a
[0] << 8) +ÖData[1];

2953 
pD©a
 += 2;

2956 
™Des
->
a°AddInfo
[
i
].
u8Sîvi˚Id
 = (
pD©a
[0] << 8) +ÖData[1];

2957 
pD©a
 += 2;

2960 
™Des
->
a°AddInfo
[
i
].
u8Comp⁄ítTag
 = 
pD©a
[0];

2961 
pD©a
 += 1;

2965 
pD©a
 = 
GOSTSR_NULL
;

2967  
GOSTSR_SUCCESS
;

2970 #ifde‡
__˝lu•lus


2971 #i‡
__˝lu•lus


	@porting/src/tsparse/TsErrorCheck_OneLevel.c

1 #ifde‡
__˝lu•lus


2 #i‡
__˝lu•lus


7 
	~"TsEº‹Check_O√Levñ.h
"

8 
	~"TsEº‹Check_TwoLevñ.h
"

10 
	~"£¨ch.h
"

12 
GOSTSR_U32
 
gu32ByãPos_P©Bak
 = 0;

13 
CONTINUTY_COUNT_INFO
 
°C⁄töutyCou¡
[
PID_NUMBER_MAX
];

15 
PMTPID_TIMEOUT_INFO
 
pmtPid_timeout_öfo
;

16 
PESPID_TIMEOUT_INFO
 
≥sPid_timeout_öfo
;

17 
TSERROR_ONELEVEL_RECORD
 
⁄eLevñEº‹_ªc‹d
 = {0};

19 
GOSTSR_BOOL
 
Gëts_checkE«bÀ
()

21  
TsEº‹Check_TwoLevñ_gëE«bÀCheckFœg
();

24 
GOSTSR_U32
 
Gëts_S≥ed_Ms
()

26  
TsEº‹Check_TwoLevñ_gëAvTøn•‹tR©e
();

29 
GOSTSR_U32
 
Gëts_TimeMs_byByãDiff
(GOSTSR_U32 
u32ByãDiff
)

31 
GOSTSR_U32
 
timeMs
 = 0;

32 
GOSTSR_F32
 
f32timeMs
 = 0;

33 
GOSTSR_U32
 
u32AvTøn•‹tR©e
 = 0;

35 
u32AvTøn•‹tR©e
 = 
TsEº‹Check_TwoLevñ_gëAvTøn•‹tR©e
();

37 
f32timeMs
 = (1.0*
u32ByãDiff
 * 8 / 
u32AvTøn•‹tR©e
) *1000;

39 
timeMs
 = 
f32timeMs
;

41  
timeMs
;

44 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_£tPmtPid
(
SEARCH_INFO_S
 *
°ProgInfo
)

46 
GOSTSR_S32
 
i
 = 0;

48 if(
°ProgInfo
 =
GOSTSR_NULL
)

50  
GOSTSR_FAILURE
;

53 
pmtPid_timeout_öfo
.
NbPmtInfo
 = 
°ProgInfo
->
u16NbProg
;

54 
i
 = 0 ; i < 
°ProgInfo
->
u16NbProg
 ; i++)

56 
pmtPid_timeout_öfo
.
pmtInfo
[
i
].
pid
 = 
°ProgInfo
->°ProgInfo[i].
PmtPid
;

59  
GOSTSR_SUCCESS
;

62 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_£tPesPid
(
SEARCH_INFO_S
 *
°ProgInfo
)

64 
GOSTSR_S32
 
i
 = 0, 
j
 =0, 
k
 = 0;

66 if(
°ProgInfo
 =
GOSTSR_NULL
)

68  
GOSTSR_FAILURE
;

71 
i
 = 0; i < 
°ProgInfo
->
u16NbProg
;i++)

73 
j
 =0; j < 
°ProgInfo
->°ProgInfo[
i
].
u8NbPes
; j++)

75 
≥sPid_timeout_öfo
.
≥sInfo
[
k
++].
pid
 = 
°ProgInfo
->°ProgInfo[
i
].
PesPid
[
j
];

78 
≥sPid_timeout_öfo
.
NbPesInfo
 = 
k
;

80  
GOSTSR_SUCCESS
;

83 
GOSTSR_BOOL
 
TsEº‹Check_O√Levñ_checkisPesPid
(
GOSTSR_U16
 
Pid
,
GOSTSR_U32
 *
ödex
)

85 
GOSTSR_S32
 
i
 = 0;

87 
i
 = 0; i < 
≥sPid_timeout_öfo
.
NbPesInfo
; i++)

89 if(
≥sPid_timeout_öfo
.
≥sInfo
[
i
].
pid
 =
Pid
)

91 *
ödex
 = 
i
;

92  
GOSTSR_TRUE
;

95  
GOSTSR_FALSE
;

97 
GOSTSR_BOOL
 
TsEº‹Check_O√Levñ_checkisPmtPid
(
GOSTSR_U16
 
Pid
,
GOSTSR_U32
 *
ödex
)

99 
GOSTSR_S32
 
i
 = 0;

101 
i
 = 0; i < 
pmtPid_timeout_öfo
.
NbPmtInfo
; i++)

103 if(
pmtPid_timeout_öfo
.
pmtInfo
[
i
].
pid
 =
Pid
)

105 *
ödex
 = 
i
;

106  
GOSTSR_TRUE
;

109  
GOSTSR_FALSE
;

113 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_£tPid
(
SEARCH_INFO_S
 *
°ProgInfo
)

115 
TsEº‹Check_O√Levñ_£tPmtPid
(
°ProgInfo
);

116 
TsEº‹Check_O√Levñ_£tPesPid
(
°ProgInfo
);

117  
GOSTSR_SUCCESS
;

123 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_SyncLossEº‹
(
GOSTSR_U32
 
tmpSyncOff£t
)

125 
⁄eLevñEº‹_ªc‹d
.
tsSyncLossEº‹
++;

127  
GOSTSR_SUCCESS
;

131 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_SyncByãEº‹
(
GOSTSR_U32
 
tmpSyncOff£t
)

133 
⁄eLevñEº‹_ªc‹d
.
tsSyncByãEº‹
++;

135  
GOSTSR_SUCCESS
;

138 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_C⁄töuôyCou¡îEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U32
 
pid
,
GOSTSR_U8
 
C⁄töuôy
,GOSTSR_U8 
ad≠ãr_c⁄åﬁ
,GOSTSR_U8 
disC⁄töuôyIndiˇt‹
)

140 
GOSTSR_S32
 
i
 = 0, 
j
 = 0;

142 
GOSTSR_BOOL
 
bRïót
 = 
GOSTSR_FALSE
;

144 if((
pid
 == 0x1fff) || (0xff ==Öid))

146  
GOSTSR_FAILURE
;

150 if(!
TsEº‹Check_O√Levñ_checkisPesPid
(
pid
,&
ödex
))

152  
GOSTSR_FAILURE
;

156 
i
 = 0; i < 
PID_NUMBER_MAX
; i++)

158 if((
°C⁄töutyCou¡
[
i
].
pid
 =pidË&& (°C⁄töutyCou¡[i].
bU£d
))

163 if(
i
 =
PID_NUMBER_MAX
)

165 
j
 = 0; j < 
PID_NUMBER_MAX
; j++)

167 if(!
°C⁄töutyCou¡
[
j
].
bU£d
)

169 
°C⁄töutyCou¡
[
j
].
bU£d
 = 
GOSTSR_TRUE
;

170 
°C⁄töutyCou¡
[
j
].
pid
 =Öid;

171 
°C⁄töutyCou¡
[
j
].
c⁄töutycou¡
 = 
C⁄töuôy
;

172 
°C⁄töutyCou¡
[
j
].
¥edisC⁄töuôyIndiˇt‹

disC⁄töuôyIndiˇt‹
;

176  
GOSTSR_FAILURE
;

179 if((
°C⁄töutyCou¡
[
i
].
c⁄töutycou¡
 =
C⁄töuôy
) && (Continuity!=0))

181 
bRïót
 = 
GOSTSR_TRUE
;

184 if(
C⁄töuôy
 != 0)

186 if(
ad≠ãr_c⁄åﬁ
 == 0)

188 if(
°C⁄töutyCou¡
[
i
].
c⁄töutycou¡
 !
C⁄töuôy
)

190 
⁄eLevñEº‹_ªc‹d
.
tsC⁄töuôyCou¡îEº‹
++;

193 if(
ad≠ãr_c⁄åﬁ
 == 1)

195 if(
°C⁄töutyCou¡
[
i
].
c⁄töutycou¡
 !
C⁄töuôy
 - 1)

197 
⁄eLevñEº‹_ªc‹d
.
tsC⁄töuôyCou¡îEº‹
++;

200 if(
ad≠ãr_c⁄åﬁ
 == 2)

202 if(
disC⁄töuôyIndiˇt‹
 == 0)

204 if(
°C⁄töutyCou¡
[
i
].
c⁄töutycou¡
 !
C⁄töuôy
)

206 
⁄eLevñEº‹_ªc‹d
.
tsC⁄töuôyCou¡îEº‹
++;

210 if(
ad≠ãr_c⁄åﬁ
 == 3)

212 if(
disC⁄töuôyIndiˇt‹
 == 0)

214 if(
°C⁄töutyCou¡
[
i
].
¥edisC⁄töuôyIndiˇt‹
 == 0)

216 if(
°C⁄töutyCou¡
[
i
].
c⁄töutycou¡
 !
C⁄töuôy
 -1)

218 
⁄eLevñEº‹_ªc‹d
.
tsC⁄töuôyCou¡îEº‹
++;

227 if(
ad≠ãr_c⁄åﬁ
 == 0)

229 if(
°C⁄töutyCou¡
[
i
].
c⁄töutycou¡
 !
C⁄töuôy
)

231 
⁄eLevñEº‹_ªc‹d
.
tsC⁄töuôyCou¡îEº‹
++;

234 if(
ad≠ãr_c⁄åﬁ
 == 1)

236 if(
°C⁄töutyCou¡
[
i
].
c⁄töutycou¡
 != 0xf)

238 
⁄eLevñEº‹_ªc‹d
.
tsC⁄töuôyCou¡îEº‹
++;

241 if(
ad≠ãr_c⁄åﬁ
 == 2)

243 if(
disC⁄töuôyIndiˇt‹
 == 0)

245 if(
°C⁄töutyCou¡
[
i
].
c⁄töutycou¡
 !
C⁄töuôy
)

247 
⁄eLevñEº‹_ªc‹d
.
tsC⁄töuôyCou¡îEº‹
++;

251 if(
ad≠ãr_c⁄åﬁ
 == 3)

253 if(
disC⁄töuôyIndiˇt‹
 == 0)

255 if(
°C⁄töutyCou¡
[
i
].
¥edisC⁄töuôyIndiˇt‹
 == 0)

257 if(
°C⁄töutyCou¡
[
i
].
c⁄töutycou¡
 != 0xf)

259 
⁄eLevñEº‹_ªc‹d
.
tsC⁄töuôyCou¡îEº‹
++;

265 
°C⁄töutyCou¡
[
i
].
c⁄töutycou¡
 = 
C⁄töuôy
;

266 
°C⁄töutyCou¡
[
i
].
¥edisC⁄töuôyIndiˇt‹

disC⁄töuôyIndiˇt‹
;

268  
GOSTSR_FAILURE
;

272 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_P©Eº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U32
 
pid
,GOSTSR_U32 
èbÀId
,
GOSTSR_U8
 
s¸ambÀ_c⁄åﬁ
)

274 
GOSTSR_U32
 
u32byãPosDiff
 = 0;

276 if((
pid
 !
PAT_PID
))

278  
GOSTSR_FAILURE
;

282 if(
gu32ByãPos_P©Bak
 != 0)

284 if(
p°Eº‹Info
->
bC¨ryFœg
)

286 
u32byãPosDiff
 = 
ONELEVEL_BYTEPOS_MAX
+
p°Eº‹Info
->
byãPos
 -
gu32ByãPos_P©Bak
;

290 if(
p°Eº‹Info
->
byãPos
 >
gu32ByãPos_P©Bak
)

292 
u32byãPosDiff
 = 
p°Eº‹Info
->
byãPos
 -
gu32ByãPos_P©Bak
;

296 
u32byãPosDiff
 = 
gu32ByãPos_P©Bak
 - 
p°Eº‹Info
->
byãPos
;

300 
gu32ByãPos_P©Bak
 = 
p°Eº‹Info
->
byãPos
;

302 if(
Gëts_S≥ed_Ms
() > 0)

304 if(
Gëts_TimeMs_byByãDiff
(
u32byãPosDiff
) > 500)

306 
⁄eLevñEº‹_ªc‹d
.
tsP©Eº‹
.
timeout_îr‹
++;

307 
⁄eLevñEº‹_ªc‹d
.
tsP©Eº‹
.
tŸÆ_îr‹
++;

308  
GOSTSR_SUCCESS
;

315 
gu32ByãPos_P©Bak
 = 
p°Eº‹Info
->
byãPos
;

318 if(
pid
 =
PAT_PID
)

320 if(
èbÀId
 !
PAT_TABLE_ID
)

322 
⁄eLevñEº‹_ªc‹d
.
tsP©Eº‹
.
èbÀid_îr‹
++;

323 
⁄eLevñEº‹_ªc‹d
.
tsP©Eº‹
.
tŸÆ_îr‹
++;

325 if(
s¸ambÀ_c⁄åﬁ
 != 0)

327 
⁄eLevñEº‹_ªc‹d
.
tsP©Eº‹
.
s¸ambÀ_îr‹
++;

328 
⁄eLevñEº‹_ªc‹d
.
tsP©Eº‹
.
tŸÆ_îr‹
++;

332  
GOSTSR_SUCCESS
;

336 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_PmtEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U16
 
pid
,
GOSTSR_U8
 
s¸ambÀ_c⁄åﬁ
)

338 
GOSTSR_S32
 
i
 = 0;

339 
GOSTSR_U32
 
ödex
 = 0;

340 
GOSTSR_U32
 
u32ByãPosDiff
= 0;

342 if(!
Gëts_checkE«bÀ
())

344  
GOSTSR_FAILURE
;

348 if(!
TsEº‹Check_O√Levñ_checkisPmtPid
(
pid
,&
ödex
))

350  
GOSTSR_FAILURE
;

353 if(
s¸ambÀ_c⁄åﬁ
 != 0)

355 
⁄eLevñEº‹_ªc‹d
.
tsPmtEº‹
.
s¸ambÀ_îr‹
++;

356 
⁄eLevñEº‹_ªc‹d
.
tsPmtEº‹
.
tŸÆ_îr‹
++;

359 if(
pmtPid_timeout_öfo
.
pmtInfo
[
ödex
].
byãPos
 != 0)

361 if(
p°Eº‹Info
->
bC¨ryFœg
)

363 
u32ByãPosDiff
 = 
ONELEVEL_BYTEPOS_MAX
+
p°Eº‹Info
->
byãPos
 -
pmtPid_timeout_öfo
.
pmtInfo
[
i
].bytePos;

367 if(
p°Eº‹Info
->
byãPos
 >
pmtPid_timeout_öfo
.
pmtInfo
[
i
].bytePos)

369 
u32ByãPosDiff
 = 
p°Eº‹Info
->
byãPos
 -
pmtPid_timeout_öfo
.
pmtInfo
[
i
].bytePos;

373 
u32ByãPosDiff
 = 
pmtPid_timeout_öfo
.
pmtInfo
[
i
].
byãPos
 - 
p°Eº‹Info
->bytePos;

377 
pmtPid_timeout_öfo
.
pmtInfo
[
i
].
byãPos
 = 
p°Eº‹Info
->bytePos;

382 if(
Gëts_S≥ed_Ms
() > 0)

384 if(
Gëts_TimeMs_byByãDiff
(
u32ByãPosDiff
) > 500)

387 
⁄eLevñEº‹_ªc‹d
.
tsPmtEº‹
.
timeout_îr‹
 ++;

388 
⁄eLevñEº‹_ªc‹d
.
tsPmtEº‹
.
tŸÆ_îr‹
 ++;

395 
pmtPid_timeout_öfo
.
pmtInfo
[
ödex
].
byãPos
 = 
p°Eº‹Info
->bytePos;

398  
GOSTSR_FAILURE
;

402 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_pidMissEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U16
 
pid
)

404 
GOSTSR_U32
 
u32ByãPosDiff
 = 0;

405 
GOSTSR_U32
 
ödex
 = 0;

407 if(!
Gëts_checkE«bÀ
())

409  
GOSTSR_FAILURE
;

412 if(!
TsEº‹Check_O√Levñ_checkisPesPid
(
pid
,&
ödex
))

414  
GOSTSR_FAILURE
;

417 if(
≥sPid_timeout_öfo
.
≥sInfo
[
ödex
].
byãPos
 != 0)

419 if(
p°Eº‹Info
->
bC¨ryFœg
)

421 
u32ByãPosDiff
 = 
ONELEVEL_BYTEPOS_MAX
+
p°Eº‹Info
->
byãPos
 -
≥sPid_timeout_öfo
.
≥sInfo
[
ödex
].bytePos;

425 if(
p°Eº‹Info
->
byãPos
 >
≥sPid_timeout_öfo
.
≥sInfo
[
ödex
].bytePos)

427 
u32ByãPosDiff
 = 
p°Eº‹Info
->
byãPos
 -
≥sPid_timeout_öfo
.
≥sInfo
[
ödex
].bytePos;

431 
u32ByãPosDiff
 = 
≥sPid_timeout_öfo
.
≥sInfo
[
ödex
].
byãPos
 - 
p°Eº‹Info
->bytePos;

435 
≥sPid_timeout_öfo
.
≥sInfo
[
ödex
].
byãPos
 = 
p°Eº‹Info
->bytePos;

437 if(
Gëts_S≥ed_Ms
() > 0)

439 if(
Gëts_TimeMs_byByãDiff
(
u32ByãPosDiff
) > 5000)

441 
⁄eLevñEº‹_ªc‹d
.
tsPIDMissEº‹
++;

442  
GOSTSR_SUCCESS
;

448 
≥sPid_timeout_öfo
.
≥sInfo
[
ödex
].
ªcvFœg
 = 
GOSTSR_TRUE
;

449 
≥sPid_timeout_öfo
.
≥sInfo
[
ödex
].
byãPos
 = 
p°Eº‹Info
->bytePos;

450  
GOSTSR_FAILURE
;

453  
GOSTSR_FAILURE
;

456 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_pidMissNŸRóch
()

458 
GOSTSR_S32
 
i
 = 0;

459 
i
 = 0 ; i < 
≥sPid_timeout_öfo
.
NbPesInfo
;i++)

461 if(!
≥sPid_timeout_öfo
.
≥sInfo
[
i
].
ªcvFœg
)

463 
⁄eLevñEº‹_ªc‹d
.
tsPIDMissEº‹
++;

466  
GOSTSR_SUCCESS
;

469 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_GëEº‹Info
(
TSERROR_ONELEVEL_RECORD
 *
⁄eLevñEº‹Info
)

471 if(
⁄eLevñEº‹Info
 =
NULL
)

472  
GOSTSR_FAILURE
;

474 
mem˝y
(
⁄eLevñEº‹Info
,&
⁄eLevñEº‹_ªc‹d
,(
TSERROR_ONELEVEL_RECORD
));

476  
GOSTSR_SUCCESS
;

479 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_Inô
()

481 
GOSTSR_S32
 
i
 = 0;

483 
mem£t
(&
⁄eLevñEº‹_ªc‹d
, 0x00, (
TSERROR_ONELEVEL_RECORD
));

484 
mem£t
(&
pmtPid_timeout_öfo
, 0x00, (
PMTPID_TIMEOUT_INFO
));

485 
mem£t
(&
≥sPid_timeout_öfo
, 0x00, (
PESPID_TIMEOUT_INFO
));

487 
i
 = 0; i < 
MAX_PMT_NUMS
; i++)

489 
pmtPid_timeout_öfo
.
pmtInfo
[
i
].
pid
 = 0xffff;

490 
pmtPid_timeout_öfo
.
pmtInfo
[
i
].
ªcvFœg
 = 
GOSTSR_FALSE
;

493 
i
 = 0; i < 
MAX_PES_NUMS
; i++)

495 
≥sPid_timeout_öfo
.
≥sInfo
[
i
].
pid
 = 0xffff;

496 
≥sPid_timeout_öfo
.
≥sInfo
[
i
].
ªcvFœg
 = 
GOSTSR_FALSE
;

499 
i
 = 0; i < 
PID_NUMBER_MAX
; i++)

501 
°C⁄töutyCou¡
[
i
].
bU£d
 = 
GOSTSR_FALSE
;

502 
°C⁄töutyCou¡
[
i
].
pid
 = 0xffff;

505 
gu32ByãPos_P©Bak
 = 0;

507  
GOSTSR_SUCCESS
;

510 
GOSTSR_S32
 
TsEº‹Check_O√Levñ_DeInô
()

512 
GOSTSR_S32
 
i
 = 0;

514 
mem£t
(&
⁄eLevñEº‹_ªc‹d
, 0x00, (
TSERROR_ONELEVEL_RECORD
));

515 
mem£t
(&
pmtPid_timeout_öfo
, 0x00, (
PMTPID_TIMEOUT_INFO
));

516 
mem£t
(&
≥sPid_timeout_öfo
, 0x00, (
PESPID_TIMEOUT_INFO
));

518 
i
 = 0; i < 
MAX_PMT_NUMS
; i++)

520 
pmtPid_timeout_öfo
.
pmtInfo
[
i
].
pid
 = 0xffff;

521 
pmtPid_timeout_öfo
.
pmtInfo
[
i
].
ªcvFœg
 = 
GOSTSR_FALSE
;

524 
i
 = 0; i < 
MAX_PES_NUMS
; i++)

526 
≥sPid_timeout_öfo
.
≥sInfo
[
i
].
pid
 = 0xffff;

527 
≥sPid_timeout_öfo
.
≥sInfo
[
i
].
ªcvFœg
 = 
GOSTSR_FALSE
;

530 
i
 = 0; i < 
PID_NUMBER_MAX
; i++)

532 
°C⁄töutyCou¡
[
i
].
bU£d
 = 
GOSTSR_FALSE
;

533 
°C⁄töutyCou¡
[
i
].
pid
 = 0xffff;

536 
gu32ByãPos_P©Bak
 = 0;

537  
GOSTSR_SUCCESS
;

540 #ifde‡
__˝lu•lus


541 #i‡
__˝lu•lus


	@porting/src/tsparse/TsErrorCheck_ThreeLevel.c

1 #ifde‡
__˝lu•lus


2 #i‡
__˝lu•lus


7 
	~"TsEº‹Check_ThªeLevñ.h
"

9 
	~"£¨ch.h
"

12 
TsThªeLevñEº‹Check_Info
 
îr‹Info
;

14 
GOSTSR_U32
 
nôPªTime
;

15 
GOSTSR_U32
 
nôA˘uÆPªTime
;

16 
GOSTSR_U32
 
nôOthîPªTime
;

18 
GOSTSR_U32
 
sdtPªTime
;

19 
GOSTSR_U32
 
sdtA˘uÆPªTime
;

20 
GOSTSR_U32
 
sdtOthîPªTime
[256];

22 
GOSTSR_U32
 
eôPªTime
;

23 
GOSTSR_U32
 
eôA˘uÆPªTime
;

24 
GOSTSR_U32
 
eôA˘uÆSec0PªTime
;

25 
GOSTSR_U32
 
eôA˘uÆSec1PªTime
;

26 
GOSTSR_U32
 
eôOthîSec0PªTime
;

27 
GOSTSR_U32
 
eôOthîSec1PªTime
;

28 
GOSTSR_U8
 
eôA˘uÆPaúFœg
;

29 
GOSTSR_U8
 
eôOthîPaúFœg
;

31 
GOSTSR_U32
 
r°PªTime
;

32 
GOSTSR_U32
 
r°Se˘i⁄PªTime
;

34 
GOSTSR_U32
 
tdtPªTime
;

35 
GOSTSR_U32
 
tdtSe˘i⁄PªTime
;

37 
SiRïëR©eSe˘i⁄s_Info
 
nôA˘uÆSe˘i⁄Info
;

38 
SiRïëR©eSe˘i⁄s_Info
 
nôOthîSe˘i⁄Info
;

39 
SiRïëR©eSe˘i⁄s_Info
 
b©Se˘i⁄Info
;

40 
SiRïëR©eSe˘i⁄s_Info
 
sdtA˘uÆSe˘i⁄Info
;

41 
SiRïëR©eSe˘i⁄s_Info
 
sdtOthîSe˘i⁄Info
;

42 
SiRïëR©eSe˘i⁄s_Info
 
eôA˘uÆSe˘i⁄Info
;

43 
SiRïëR©eSe˘i⁄s_Info
 
eôOthîSe˘i⁄Info
;

44 
SiRïëR©eSe˘i⁄s_Info
 
eôA˘uÆScheduÀSe˘i⁄Info
;

45 
SiRïëR©eSe˘i⁄s_Info
 
eôOthîScheduÀSe˘i⁄Info
;

46 
SiRïëR©eSe˘i⁄s_Info
 
tdtSe˘i⁄Info
;

47 
SiRïëR©eSe˘i⁄s_Info
 
tŸSe˘i⁄Info
;

49 
Uƒe„ªn˚dPid_Info
 
uƒe„rPidInfo
[
MAX_UNREFERPID_NUM
];

50 
SEARCH_INFO_S
 
g°ProgInfo
;

53 
GOSTSR_S32
 
TsCheck_NôSe˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
);

56 
GOSTSR_S32
 
TsCheck_SiSe˘i⁄Rïëôi⁄R©eEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
);

59 
GOSTSR_S32
 
TsCheck_Buf„rEº‹
(
GOSTSR_U8
 *
d©a
, 
GOSTSR_U16
 
d©aLí
, 
GOSTSR_U32
 
time
);

62 
GOSTSR_S32
 
TsCheck_Uƒe„ªn˚dPidEº‹
(
TS_HEAD_INFO
 
tsHódInfo
);

65 
GOSTSR_S32
 
TsCheck_SdtA˘uÆSe˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
);

66 
GOSTSR_S32
 
TsCheck_SdtOthîSe˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
);

69 
GOSTSR_S32
 
TsCheck_EôA˘uÆSe˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
);

70 
GOSTSR_S32
 
TsCheck_EôOthîSe˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
);

73 
GOSTSR_S32
 
TsCheck_R°Se˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
);

76 
GOSTSR_S32
 
TsCheck_TdtSe˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
);

79 
GOSTSR_S32
 
TsCheck_Em±yBuf„rEº‹
(
GOSTSR_U8
 *
d©a
, 
GOSTSR_U16
 
d©aLí
, 
GOSTSR_U32
 
time
);

82 
GOSTSR_S32
 
TsCheck_D©aDñayEº‹
(
GOSTSR_U8
 *
d©a
, 
GOSTSR_U16
 
d©aLí
, 
GOSTSR_U32
 
time
);

84 
GOSTSR_S32
 
TsCheck_GëCuºítSe˘i⁄Info
(
TS_SECTION_INFO
 
£˘i⁄Info
, 
GOSTSR_U8
 *
£˘i⁄Num
, GOSTSR_U8 *
œ°Se˘i⁄Num
)

86 
GOSTSR_U8
 *
pD©a
 = 
GOSTSR_NULL
;

88 i‡((
GOSTSR_NULL
 =
£˘i⁄Info
.
£˘i⁄D©a
Ë|| (GOSTSR_NULL =
£˘i⁄Num
Ë|| (GOSTSR_NULL =
œ°Se˘i⁄Num
))

90  
GOSTSR_SUCCESS
;

93 
pD©a
 = 
£˘i⁄Info
.
£˘i⁄D©a
;

95 
pD©a
 += 6;

98 *
£˘i⁄Num
 = 
pD©a
[0];

99 
pD©a
 += 1;

102 *
œ°Se˘i⁄Num
 = 
pD©a
[0];

104  
GOSTSR_SUCCESS
;

107 
GOSTSR_S32
 
TsCheck_TabÀOvîTime
(
TS_SECTION_INFO
 
£˘i⁄Info_Cur
, 
SiRïëR©eSe˘i⁄s_Info
 *
£˘i⁄Info_Pª
, 
GOSTSR_U32
 
ovîTime
)

109 
GOSTSR_U8
 
£˘i⁄Num
 = 0;

110 
GOSTSR_U8
 
œ°Se˘i⁄Num
 = 0;

111 
GOSTSR_U32
 
timeOff£t
 = 0;

112 
GOSTSR_S32
 
ªtVÆ
 = 
GOSTSR_FAILURE
;

113 
GOSTSR_U8
 
maxNumbî
 = 0;

115 i‡(
GOSTSR_NULL
 =
£˘i⁄Info_Pª
)

117  
GOSTSR_FAILURE
;

120 i‡(
GOSTSR_SUCCESS
 !
TsCheck_GëCuºítSe˘i⁄Info
(
£˘i⁄Info_Cur
, &
£˘i⁄Num
, &
œ°Se˘i⁄Num
))

122  
GOSTSR_FAILURE
;

125 i‡(
œ°Se˘i⁄Num
 == 0)

127  
GOSTSR_FAILURE
;

130 i‡(
£˘i⁄Info_Pª
->
numbî
 == 0)

132 
£˘i⁄Info_Pª
->
°¨tTime
 = 
£˘i⁄Info_Cur
.
°Eº‹Info
.startTime;

133 
£˘i⁄Info_Pª
->
œ°Se˘i⁄Num
 =ÜastSectionNum;

136 i‡(
£˘i⁄Info_Pª
->
£˘i⁄Fœg
[
£˘i⁄Num
] == 0x01)

138  
GOSTSR_FAILURE
;

142 
£˘i⁄Info_Pª
->
£˘i⁄Fœg
[
£˘i⁄Num
] = 0x01;

143 
£˘i⁄Info_Pª
->
numbî
++;

146 i‡((
£˘i⁄Info_Cur
.
èbÀID
 =
EIT_TABLE_ID_ACTUAL_SHEDULE
Ë|| (£˘i⁄Info_Cur.èbÀID =
EIT_TABLE_ID_OTHER_SHEDULE
))

148 
maxNumbî
 = 
£˘i⁄Info_Pª
->
œ°Se˘i⁄Num
 / 8;

152 
maxNumbî
 = 
£˘i⁄Info_Pª
->
œ°Se˘i⁄Num
;

155 i‡(
£˘i⁄Info_Pª
->
numbî
 > 
maxNumbî
)

157 if(
£˘i⁄Info_Cur
.
°Eº‹Info
.
bC¨ryFœg
)

159 
timeOff£t
 = 0xffffffff+
£˘i⁄Info_Cur
.
°Eº‹Info
.
°¨tTime
 - 
£˘i⁄Info_Pª
->startTime;

163 if(
£˘i⁄Info_Cur
.
°Eº‹Info
.
°¨tTime
 >
£˘i⁄Info_Pª
->startTime)

165 
timeOff£t
 = 
£˘i⁄Info_Cur
.
°Eº‹Info
.
°¨tTime
 - 
£˘i⁄Info_Pª
->startTime;

169 
timeOff£t
 = 
£˘i⁄Info_Pª
->
°¨tTime
 - 
£˘i⁄Info_Cur
.
°Eº‹Info
.startTime;

173 i‡(
timeOff£t
 <= 25000)

175 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
siSe˘i⁄LimôTimeEº‹
++;

176 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
tŸÆEº‹
++;

179 i‡(
timeOff£t
 > 
ovîTime
)

181 
ªtVÆ
 = 
GOSTSR_SUCCESS
;

184 
£˘i⁄Info_Pª
->
°¨tTime
 = 0;

185 
£˘i⁄Info_Pª
->
œ°Se˘i⁄Num
 = 0;

186 
£˘i⁄Info_Pª
->
numbî
 = 0;

187 
mem£t
(
£˘i⁄Info_Pª
->
£˘i⁄Fœg
,0,(sectionInfo_Pre->sectionFlag));

190  
ªtVÆ
;

193 
GOSTSR_S32
 
TsCheck_NôSe˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
)

195 
GOSTSR_U32
 
timeOff£t
 = 0;

197 i‡((
NIT_PID
 !
£˘i⁄Info
.
PID
Ë|| (
GOSTSR_NULL
 =£˘i⁄Info.
£˘i⁄D©a
))

199  
GOSTSR_FAILURE
;

203 i‡((
NIT_TABLE_ID_ACTUAL
 !
£˘i⁄Info
.
èbÀID
Ë&& (
NIT_TABLE_ID_OTHER
 !£˘i⁄Info.èbÀIDË&& (
SI_TABLE_ID
 != sectionInfo.tableID))

205 
îr‹Info
.
nôEº‹Info
.
èbÀIDEº‹
++;

206 
îr‹Info
.
nôEº‹Info
.
tŸÆEº‹
++;

210 i‡(
NIT_TABLE_ID_ACTUAL
 =
£˘i⁄Info
.
èbÀID
)

212 i‡(
nôA˘uÆPªTime
 != 0)

214 if(
£˘i⁄Info
.
°Eº‹Info
.
bC¨ryFœg
)

216 
timeOff£t
 = 0xffffffff+
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
nôA˘uÆPªTime
;

220 if(
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 >
nôA˘uÆPªTime
)

222 
timeOff£t
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
nôA˘uÆPªTime
;

226 
timeOff£t
 = 
nôA˘uÆPªTime
 - 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

231 i‡(
timeOff£t
 > 10000000)

233 
îr‹Info
.
nôEº‹Info
.
a˘uÆOvîTimeEº‹
++;

234 
îr‹Info
.
nôEº‹Info
.
tŸÆEº‹
++;

237 i‡(
timeOff£t
 <= 25000)

239 
îr‹Info
.
nôEº‹Info
.
a˘uÆLimôTimeEº‹
++;

240 
îr‹Info
.
nôEº‹Info
.
tŸÆEº‹
++;

245 i‡(
NIT_TABLE_ID_OTHER
 =
£˘i⁄Info
.
èbÀID
)

247 i‡(
nôOthîPªTime
 != 0)

249 if(
£˘i⁄Info
.
°Eº‹Info
.
bC¨ryFœg
)

251 
timeOff£t
 = 0xffffffff+
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
nôOthîPªTime
;

255 if(
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 >
nôOthîPªTime
)

257 
timeOff£t
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
nôOthîPªTime
;

261 
timeOff£t
 = 
nôOthîPªTime
 - 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

266 i‡(
timeOff£t
 > 10000000)

268 
îr‹Info
.
nôEº‹Info
.
ŸhîOvîTimeEº‹
++;

269 
îr‹Info
.
nôEº‹Info
.
tŸÆEº‹
++;

272 i‡(
timeOff£t
 <= 25000)

274 
îr‹Info
.
nôEº‹Info
.
ŸhîLimôTimeEº‹
++;

275 
îr‹Info
.
nôEº‹Info
.
tŸÆEº‹
++;

279 
nôOthîPªTime
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

281  
GOSTSR_SUCCESS
;

284 
GOSTSR_S32
 
TsCheck_SiSe˘i⁄Rïëôi⁄R©eEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
)

286 
GOSTSR_U32
 
timeOff£t
 = 0;

287 
GOSTSR_U8
 
£˘i⁄Num
 = 0;

288 
GOSTSR_U8
 
œ°Se˘i⁄Num
 = 0;

290 i‡((
GOSTSR_NULL
 =
£˘i⁄Info
.
£˘i⁄D©a
Ë|| (£˘i⁄Info.
PID
 < 
SI_PID_MIN
Ë|| (£˘i⁄Info.PID > 
SI_PID_MAX
))

292  
GOSTSR_FAILURE
;

295 
£˘i⁄Info
.
PID
)

297 
NIT_PID
:

298 i‡(
GOSTSR_SUCCESS
 =
TsCheck_GëCuºítSe˘i⁄Info
(
£˘i⁄Info
, &
£˘i⁄Num
, &
œ°Se˘i⁄Num
))

300 
GOSTSR_U32
 
nôTime
 = 0x00;

302 i‡(
NIT_TABLE_ID_ACTUAL
 =
£˘i⁄Info
.
èbÀID
)

304 i‡(
œ°Se˘i⁄Num
 == 0)

309 i‡(
nôA˘uÆSe˘i⁄Info
.
numbî
 == 0)

311 i‡(
nôOthîSe˘i⁄Info
.
numbî
 == 0)

313 
nôA˘uÆSe˘i⁄Info
.
°¨tTime
 = 
£˘i⁄Info
.
°Eº‹Info
.startTime;

315 
nôA˘uÆSe˘i⁄Info
.
œ°Se˘i⁄Num
 =ÜastSectionNum;

318 i‡(
nôA˘uÆSe˘i⁄Info
.
£˘i⁄Fœg
[
£˘i⁄Num
] == 0x01)

324 
nôA˘uÆSe˘i⁄Info
.
£˘i⁄Fœg
[
£˘i⁄Num
] = 0x01;

325 
nôA˘uÆSe˘i⁄Info
.
numbî
++;

328 i‡(
NIT_TABLE_ID_OTHER
 =
£˘i⁄Info
.
èbÀID
)

330 i‡(
œ°Se˘i⁄Num
 == 0)

335 i‡(
nôOthîSe˘i⁄Info
.
numbî
 == 0)

337 i‡(
nôA˘uÆSe˘i⁄Info
.
numbî
 == 0)

339 
nôOthîSe˘i⁄Info
.
°¨tTime
 = 
£˘i⁄Info
.
°Eº‹Info
.startTime;

341 
nôOthîSe˘i⁄Info
.
œ°Se˘i⁄Num
 =ÜastSectionNum;

344 i‡(
nôOthîSe˘i⁄Info
.
£˘i⁄Fœg
[
£˘i⁄Num
] == 0x01)

350 
nôOthîSe˘i⁄Info
.
£˘i⁄Fœg
[
£˘i⁄Num
] = 0x01;

351 
nôOthîSe˘i⁄Info
.
numbî
++;

356 i‡(((
nôA˘uÆSe˘i⁄Info
.
numbî
 >ÇôA˘uÆSe˘i⁄Info.
œ°Se˘i⁄Num
Ë&& (
nôOthîSe˘i⁄Info
.number >ÇitOtherSectionInfo.lastSectionNum)) ||

357 ((
nôA˘uÆSe˘i⁄Info
.
numbî
 =0Ë&& (
nôOthîSe˘i⁄Info
.numbî >ÇôOthîSe˘i⁄Info.
œ°Se˘i⁄Num
)) ||

358 ((
nôA˘uÆSe˘i⁄Info
.
numbî
 >ÇôA˘uÆSe˘i⁄Info.
œ°Se˘i⁄Num
Ë&& (
nôOthîSe˘i⁄Info
.number == 0)))

360 i‡(
nôOthîSe˘i⁄Info
.
°¨tTime
 != 0)

362 
nôTime
 = 
nôOthîSe˘i⁄Info
.
°¨tTime
;

366 
nôTime
 = 
nôA˘uÆSe˘i⁄Info
.
°¨tTime
;

369 if(
£˘i⁄Info
.
°Eº‹Info
.
bC¨ryFœg
)

371 
timeOff£t
 = 0xffffffff+
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
nôTime
;

375 if(
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 >
nôTime
)

377 
timeOff£t
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
nôTime
;

381 
timeOff£t
 = 
nôTime
 - 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

385 i‡(
timeOff£t
 <= 25000)

387 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
siSe˘i⁄LimôTimeEº‹
++;

388 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
tŸÆEº‹
++;

390 i‡(
timeOff£t
 >= 10000000)

392 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
nôOvîTimeEº‹
++;

393 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
tŸÆEº‹
++;

396 
mem£t
(&
nôOthîSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

397 
mem£t
(&
nôA˘uÆSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

402 
BAT_SDT_PID
:

403 i‡(
BAT_TABLE_ID
 =
£˘i⁄Info
.
èbÀID
)

406 i‡(
GOSTSR_SUCCESS
 =
TsCheck_TabÀOvîTime
(
£˘i⁄Info
, &
b©Se˘i⁄Info
, 10000000))

408 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
b©OvîTimeEº‹
++;

409 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
tŸÆEº‹
++;

412 i‡(
SDT_TABLE_ID_ACTUAL
 =
£˘i⁄Info
.
èbÀID
)

415 i‡(
GOSTSR_SUCCESS
 =
TsCheck_TabÀOvîTime
(
£˘i⁄Info
, &
sdtA˘uÆSe˘i⁄Info
, 2000000))

417 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
sdtA˘uÆOvîTimeEº‹
++;

418 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
tŸÆEº‹
++;

421 i‡(
SDT_TABLE_ID_OTEHR
 =
£˘i⁄Info
.
èbÀID
)

424 i‡(
GOSTSR_SUCCESS
 =
TsCheck_TabÀOvîTime
(
£˘i⁄Info
, &
sdtOthîSe˘i⁄Info
, 10000000))

426 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
sdtOthîOvîTimeEº‹
++;

427 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
tŸÆEº‹
++;

432 
EIT_PID
:

433 i‡(
EIT_TABLE_ID_ACTUAL
 =
£˘i⁄Info
.
èbÀID
)

436 i‡(
GOSTSR_SUCCESS
 =
TsCheck_TabÀOvîTime
(
£˘i⁄Info
, &
b©Se˘i⁄Info
, 2000000))

438 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
eôA˘uÆOvîTimeEº‹
++;

439 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
tŸÆEº‹
++;

442 i‡(
EIT_TABLE_ID_OTHER
 =
£˘i⁄Info
.
èbÀID
)

445 i‡(
GOSTSR_SUCCESS
 =
TsCheck_TabÀOvîTime
(
£˘i⁄Info
, &
eôOthîSe˘i⁄Info
, 10000000))

447 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
eôOthîOvîTimeEº‹
++;

448 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
tŸÆEº‹
++;

451 i‡(
EIT_TABLE_ID_ACTUAL_SHEDULE
 =
£˘i⁄Info
.
èbÀID
)

454 i‡(
GOSTSR_SUCCESS
 =
TsCheck_TabÀOvîTime
(
£˘i⁄Info
, &
eôA˘uÆScheduÀSe˘i⁄Info
, 10000000))

456 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
eôA˘uÆScheduÀOvîTimeEº‹
++;

457 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
tŸÆEº‹
++;

460 i‡(
EIT_TABLE_ID_OTHER_SHEDULE
 =
£˘i⁄Info
.
èbÀID
)

463 i‡(
GOSTSR_SUCCESS
 =
TsCheck_TabÀOvîTime
(
£˘i⁄Info
, &
eôOthîScheduÀSe˘i⁄Info
, 30000000))

465 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
eôOthîScheduÀOvîTimeEº‹
++;

466 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
tŸÆEº‹
++;

471 
TDT_TOT_PID
:

472 i‡(
TDT_TABLE_ID
 =
£˘i⁄Info
.
èbÀID
)

475 i‡(
GOSTSR_SUCCESS
 =
TsCheck_TabÀOvîTime
(
£˘i⁄Info
, &
tdtSe˘i⁄Info
, 30000000))

477 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
tdtOvîTimeEº‹
++;

478 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
tŸÆEº‹
++;

481 i‡(
TOT_TABLE_ID
 =
£˘i⁄Info
.
èbÀID
)

484 i‡(
GOSTSR_SUCCESS
 =
TsCheck_TabÀOvîTime
(
£˘i⁄Info
, &
tŸSe˘i⁄Info
, 30000000))

486 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
tŸOvîTimeEº‹
++;

487 
îr‹Info
.
siRïëôi⁄R©eEº‹Info
.
tŸÆEº‹
++;

496  
GOSTSR_SUCCESS
;

499 
GOSTSR_S32
 
TsCheck_Buf„rEº‹
(
GOSTSR_U8
 *
d©a
, 
GOSTSR_U16
 
d©aLí
, 
GOSTSR_U32
 
time
)

501 i‡((
GOSTSR_NULL
 =
d©a
Ë|| (
d©aLí
 == 0))

503  
GOSTSR_FAILURE
;

508  
GOSTSR_SUCCESS
;

511 
GOSTSR_S32
 
TsCheck_Uƒe„ªn˚dPidEº‹
(
TS_HEAD_INFO
 
tsHódInfo
)

513 
GOSTSR_U16
 
ödex
 = 0x00;

514 
GOSTSR_U32
 
timeOff£t
 = 0;

515 
GOSTSR_S32
 
i
 = 0,
j
 = 0;

517 i‡–(
tsHódInfo
.
ts_pid
 >= 0x20) && (tsHeadInfo.ts_pid != 0x1fff))

520 
i
 = 0; i < 
g°ProgInfo
.
u16NbProg
; i++)

522 if((
tsHódInfo
.
ts_pid
 =
g°ProgInfo
.
°ProgInfo
[
i
].
PmtPid
Ë|| (—sHódInfo.ts_pid =g°ProgInfo.°ProgInfo[i].
P¸Pid
)))

524  
GOSTSR_FAILURE
;

526 
j
 = 0; j < 
g°ProgInfo
.
°ProgInfo
[
i
].
u8NbPes
; j++)

528 if(
tsHódInfo
.
ts_pid
 =
g°ProgInfo
.
°ProgInfo
[
i
].
PesPid
[
j
])

530  
GOSTSR_FAILURE
;

536 
i
 = 0; i < 
g°ProgInfo
.
u16NbCa
; i++)

538 if(
tsHódInfo
.
ts_pid
 =
g°ProgInfo
.
°CaInfo
[
i
].
CaPid
)

540  
GOSTSR_FAILURE
;

545 
i
 = 0; i < 
MAX_UNREFERPID_NUM
; i++)

547 i‡((!
uƒe„rPidInfo
[
i
].
Êag
Ë&& (uƒe„rPidInfo[i].
pid
 !
tsHódInfo
.
ts_pid
 ))

551 if(
tsHódInfo
.
°Eº‹Info
.
bC¨ryFœg
)

553 
timeOff£t
 = 0xffffffff+
tsHódInfo
.
°Eº‹Info
.
°¨tTime
 - 
uƒe„rPidInfo
[
i
].startTime;

557 if(
tsHódInfo
.
°Eº‹Info
.
°¨tTime
 >
uƒe„rPidInfo
[
i
].startTime)

559 
timeOff£t
 = 
tsHódInfo
.
°Eº‹Info
.
°¨tTime
 - 
uƒe„rPidInfo
[
i
].startTime;

563 
timeOff£t
 = 
uƒe„rPidInfo
[
i
].
°¨tTime
 - 
tsHódInfo
.
°Eº‹Info
.startTime;

568 i‡(
timeOff£t
 > 500000)

571 
îr‹Info
.
uƒe„ªn˚dPidEº‹Info
.
tŸÆEº‹
++;

573 
uƒe„rPidInfo
[
i
].
°¨tTime
 = 
tsHódInfo
.
°Eº‹Info
.startTime;

574  
GOSTSR_SUCCESS
;

577 if(
i
 =
MAX_UNREFERPID_NUM
)

580 
ödex
 = 0; index < 
MAX_UNREFERPID_NUM
; index++)

582 i‡(!
uƒe„rPidInfo
[
ödex
].
Êag
)

588 i‡(
ödex
 !
MAX_UNREFERPID_NUM
)

590 
uƒe„rPidInfo
[
ödex
].
Êag
 = 0x01;

591 
uƒe„rPidInfo
[
ödex
].
pid
 = 
tsHódInfo
.
ts_pid
 ;

592 
uƒe„rPidInfo
[
ödex
].
°¨tTime
 = 
tsHódInfo
.
°Eº‹Info
.startTime;

597  
GOSTSR_FAILURE
;

600 
GOSTSR_S32
 
TsCheck_SdtA˘uÆSe˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
)

602 
GOSTSR_U32
 
timeOff£t
 = 0;

604 i‡((
BAT_SDT_PID
 !
£˘i⁄Info
.
PID
Ë|| (
GOSTSR_NULL
 =£˘i⁄Info.
£˘i⁄D©a
))

606  
GOSTSR_FAILURE
;

609 i‡((
SDT_TABLE_ID_ACTUAL
 !
£˘i⁄Info
.
èbÀID
Ë&& (
SDT_TABLE_ID_OTEHR
 != sectionInfo.tableID) && \

610 (
BAT_TABLE_ID
 !
£˘i⁄Info
.
èbÀID
Ë&& (
SI_TABLE_ID
 != sectionInfo.tableID))

612 
îr‹Info
.
sdtEº‹Info
.
èbÀIDEº‹
++;

613 
îr‹Info
.
sdtEº‹Info
.
tŸÆEº‹
++;

616 i‡(
SDT_TABLE_ID_ACTUAL
 =
£˘i⁄Info
.
èbÀID
)

619 i‡(
sdtA˘uÆPªTime
 != 0)

621 if(
£˘i⁄Info
.
°Eº‹Info
.
bC¨ryFœg
)

623 
timeOff£t
 = 0xffffffff+
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
sdtA˘uÆPªTime
;

627 if(
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 >
sdtA˘uÆPªTime
)

629 
timeOff£t
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
sdtA˘uÆPªTime
;

633 
timeOff£t
 = 
sdtA˘uÆPªTime
 - 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

638 i‡(
timeOff£t
 >= 2000000)

640 
îr‹Info
.
sdtEº‹Info
.
a˘uÆOvîTimeEº‹
++;

641 
îr‹Info
.
sdtEº‹Info
.
tŸÆEº‹
++;

644 i‡(
timeOff£t
 <= 25000)

646 
îr‹Info
.
sdtEº‹Info
.
a˘uÆLimôTimeEº‹
++;

647 
îr‹Info
.
sdtEº‹Info
.
tŸÆEº‹
++;

651 
sdtA˘uÆPªTime
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

654  
GOSTSR_SUCCESS
;

657 
GOSTSR_S32
 
TsCheck_SdtOthîSe˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
)

659 
GOSTSR_U32
 
timeOff£t
 = 0;

660 
GOSTSR_U8
 
£˘i⁄Num
 = 0;

661 
GOSTSR_U8
 
œ°Se˘i⁄Num
 = 0;

663 i‡((
BAT_SDT_PID
 !
£˘i⁄Info
.
PID
Ë|| (
GOSTSR_NULL
 =£˘i⁄Info.
£˘i⁄D©a
))

665  
GOSTSR_FAILURE
;

668 i‡(
SDT_TABLE_ID_OTEHR
 =
£˘i⁄Info
.
èbÀID
)

671 i‡(
GOSTSR_SUCCESS
 =
TsCheck_GëCuºítSe˘i⁄Info
(
£˘i⁄Info
, &
£˘i⁄Num
, &
œ°Se˘i⁄Num
))

674 i‡(
sdtOthîPªTime
[
£˘i⁄Num
] != 0)

676 if(
£˘i⁄Info
.
°Eº‹Info
.
bC¨ryFœg
)

678 
timeOff£t
 = 0xffffffff+
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
sdtOthîPªTime
[
£˘i⁄Num
];

682 if(
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 >
sdtOthîPªTime
[
£˘i⁄Num
])

684 
timeOff£t
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
sdtOthîPªTime
[
£˘i⁄Num
];

688 
timeOff£t
 = 
sdtOthîPªTime
[
£˘i⁄Num
] - 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

693 i‡(
timeOff£t
 > 10000000)

695 
îr‹Info
.
sdtEº‹Info
.
ŸhîOvîTimeEº‹
++;

696 
îr‹Info
.
sdtEº‹Info
.
tŸÆEº‹
++;

700 
sdtOthîPªTime
[
£˘i⁄Num
] = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

704  
GOSTSR_SUCCESS
;

707 
GOSTSR_S32
 
TsCheck_EôA˘uÆSe˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
)

709 
GOSTSR_U32
 
timeOff£t
 = 0;

710 
GOSTSR_U8
 
£˘i⁄Num
 = 0;

711 
GOSTSR_U8
 
œ°Se˘i⁄Num
 = 0;

713 i‡((
EIT_PID
 !
£˘i⁄Info
.
PID
Ë|| (
GOSTSR_NULL
 =£˘i⁄Info.
£˘i⁄D©a
))

715  
GOSTSR_FAILURE
;

718 i‡((
£˘i⁄Info
.
èbÀID
 < 0x4E) || ((sectionInfo.tableID > 0x6f) && (sectionInfo.tableID != 0x72)))

720 
îr‹Info
.
eôEº‹Info
.
èbÀIDEº‹
++;

721 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
++;

724 i‡(
EIT_TABLE_ID_ACTUAL
 =
£˘i⁄Info
.
èbÀID
)

727 i‡(
eôA˘uÆPªTime
 != 0)

729 if(
£˘i⁄Info
.
°Eº‹Info
.
bC¨ryFœg
)

731 
timeOff£t
 = 0xffffffff+
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
eôA˘uÆPªTime
;

735 if(
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 >
eôA˘uÆPªTime
)

737 
timeOff£t
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
eôA˘uÆPªTime
;

741 
timeOff£t
 = 
eôA˘uÆPªTime
 - 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

746 i‡(
timeOff£t
 > 2000000)

748 
îr‹Info
.
eôEº‹Info
.
a˘uÆOvîTimeEº‹
++;

749 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
++;

752 i‡(
timeOff£t
 <= 25000)

754 
îr‹Info
.
eôEº‹Info
.
a˘uÆLimtTimeEº‹
++;

755 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
++;

758 
eôA˘uÆPªTime
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

760 i‡(
GOSTSR_SUCCESS
 =
TsCheck_GëCuºítSe˘i⁄Info
(
£˘i⁄Info
, &
£˘i⁄Num
, &
œ°Se˘i⁄Num
))

763 i‡(
£˘i⁄Num
 == 0)

765 i‡(
eôA˘uÆSec0PªTime
 != 0)

767 if(
£˘i⁄Info
.
°Eº‹Info
.
bC¨ryFœg
)

769 
timeOff£t
 = 0xffffffff+
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
eôA˘uÆSec0PªTime
;

773 if(
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 >
eôA˘uÆSec0PªTime
)

775 
timeOff£t
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
eôA˘uÆSec0PªTime
;

779 
timeOff£t
 = 
eôA˘uÆSec0PªTime
 - 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

784 i‡(
timeOff£t
 > 2000000)

787 
îr‹Info
.
eôEº‹Info
.
a˘uÆSec0OvîTimeEº‹
++;

788 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
++;

793 i‡(
eôA˘uÆPaúFœg
 != 3)

795 
eôA˘uÆPaúFœg
++;

796 i‡(
eôA˘uÆPaúFœg
 == 2)

798 
eôA˘uÆPaúFœg
 = 1;

799 i‡(
îr‹Info
.
eôEº‹Info
.
a˘uÆPFPaúEº‹
 == 0)

801 
îr‹Info
.
eôEº‹Info
.
a˘uÆPFPaúEº‹
 = 1;

802 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
++;

808 i‡(
îr‹Info
.
eôEº‹Info
.
a˘uÆPFPaúEº‹
 == 1)

810 
îr‹Info
.
eôEº‹Info
.
a˘uÆPFPaúEº‹
 = 0;

811 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
--;

815 
eôA˘uÆSec0PªTime
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

818 i‡(
£˘i⁄Num
 == 1)

820 i‡(
eôA˘uÆSec1PªTime
 != 0)

822 if(
£˘i⁄Info
.
°Eº‹Info
.
bC¨ryFœg
)

824 
timeOff£t
 = 0xffffffff+
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
eôA˘uÆSec1PªTime
;

828 if(
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 >
eôA˘uÆSec1PªTime
)

830 
timeOff£t
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
eôA˘uÆSec1PªTime
;

834 
timeOff£t
 = 
eôA˘uÆSec1PªTime
 - 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

839 i‡(
timeOff£t
 >= 2000000)

841 
îr‹Info
.
eôEº‹Info
.
a˘uÆSec1OvîTimeEº‹
++;

842 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
++;

847 i‡(
eôA˘uÆPaúFœg
 != 3)

849 
eôA˘uÆPaúFœg
 += 2;

850 i‡(
eôA˘uÆPaúFœg
 == 4)

852 
eôA˘uÆPaúFœg
 = 1;

853 i‡(
îr‹Info
.
eôEº‹Info
.
a˘uÆPFPaúEº‹
 == 0)

855 
îr‹Info
.
eôEº‹Info
.
a˘uÆPFPaúEº‹
 = 1;

856 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
++;

862 i‡(
îr‹Info
.
eôEº‹Info
.
a˘uÆPFPaúEº‹
 == 1)

864 
îr‹Info
.
eôEº‹Info
.
a˘uÆPFPaúEº‹
 = 0;

865 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
--;

869 
eôA˘uÆSec1PªTime
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

874  
GOSTSR_SUCCESS
;

877 
GOSTSR_S32
 
TsCheck_EôOthîSe˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
)

879 
GOSTSR_U32
 
timeOff£t
 = 0;

880 
GOSTSR_U8
 
£˘i⁄Num
 = 0;

881 
GOSTSR_U8
 
œ°Se˘i⁄Num
 = 0;

883 i‡((
EIT_PID
 !
£˘i⁄Info
.
PID
Ë|| (
GOSTSR_NULL
 =£˘i⁄Info.
£˘i⁄D©a
))

885  
GOSTSR_FAILURE
;

888 i‡(
EIT_TABLE_ID_OTHER
 =
£˘i⁄Info
.
èbÀID
)

890 i‡(
GOSTSR_SUCCESS
 =
TsCheck_GëCuºítSe˘i⁄Info
(
£˘i⁄Info
, &
£˘i⁄Num
, &
œ°Se˘i⁄Num
))

893 i‡(
£˘i⁄Num
 == 0)

895 i‡(
eôOthîSec0PªTime
 != 0)

897 if(
£˘i⁄Info
.
°Eº‹Info
.
bC¨ryFœg
)

899 
timeOff£t
 = 0xffffffff+
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
eôOthîSec0PªTime
;

903 if(
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 >
eôOthîSec0PªTime
)

905 
timeOff£t
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
eôOthîSec0PªTime
;

909 
timeOff£t
 = 
eôOthîSec0PªTime
 - 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

914 i‡(
timeOff£t
 >= 10000000)

916 
îr‹Info
.
eôEº‹Info
.
ŸhîSec0OvîTimeEº‹
++;

917 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
++;

922 i‡(
eôOthîPaúFœg
 != 3)

924 
eôOthîPaúFœg
++;

925 i‡(
eôOthîPaúFœg
 == 2)

927 
eôOthîPaúFœg
 = 1;

928 i‡(
îr‹Info
.
eôEº‹Info
.
ŸhîPFPaúEº‹
 == 0)

930 
îr‹Info
.
eôEº‹Info
.
ŸhîPFPaúEº‹
 = 1;

931 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
++;

937 i‡(
îr‹Info
.
eôEº‹Info
.
ŸhîPFPaúEº‹
 == 1)

939 
îr‹Info
.
eôEº‹Info
.
ŸhîPFPaúEº‹
 = 0;

940 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
--;

944 
eôOthîSec0PªTime
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

947 i‡(
£˘i⁄Num
 == 1)

949 i‡(
eôOthîSec1PªTime
 != 0)

951 if(
£˘i⁄Info
.
°Eº‹Info
.
bC¨ryFœg
)

953 
timeOff£t
 = 0xffffffff+
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
eôOthîSec1PªTime
;

957 if(
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 >
eôOthîSec1PªTime
)

959 
timeOff£t
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
eôOthîSec1PªTime
;

963 
timeOff£t
 = 
eôOthîSec1PªTime
 - 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

968 i‡(
timeOff£t
 >= 10000000)

970 
îr‹Info
.
eôEº‹Info
.
ŸhîSec1OvîTimeEº‹
++;

971 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
++;

976 i‡(
eôOthîPaúFœg
 != 3)

978 
eôOthîPaúFœg
 += 2;

979 i‡(
eôOthîPaúFœg
 == 4)

981 
eôOthîPaúFœg
 = 1;

982 i‡(
îr‹Info
.
eôEº‹Info
.
ŸhîPFPaúEº‹
 == 0)

984 
îr‹Info
.
eôEº‹Info
.
ŸhîPFPaúEº‹
 = 1;

985 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
++;

991 i‡(
îr‹Info
.
eôEº‹Info
.
ŸhîPFPaúEº‹
 == 1)

993 
îr‹Info
.
eôEº‹Info
.
ŸhîPFPaúEº‹
 = 0;

994 
îr‹Info
.
eôEº‹Info
.
tŸÆEº‹
--;

998 
eôOthîSec1PªTime
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

1003  
GOSTSR_SUCCESS
;

1006 
GOSTSR_S32
 
TsCheck_R°Se˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
)

1008 
GOSTSR_U32
 
timeOff£t
 = 0;

1010 i‡((
RST_PID
 !
£˘i⁄Info
.
PID
Ë|| (
GOSTSR_NULL
 =£˘i⁄Info.
£˘i⁄D©a
))

1012  
GOSTSR_FAILURE
;

1015 i‡((
RST_TABLE_ID
 !
£˘i⁄Info
.
èbÀID
Ë&& (
SI_TABLE_ID
 != sectionInfo.tableID))

1017 
îr‹Info
.
r°Eº‹Info
.
èbÀIDEº‹
++;

1018 
îr‹Info
.
r°Eº‹Info
.
tŸÆEº‹
++;

1020 i‡(
RST_TABLE_ID
 =
£˘i⁄Info
.
èbÀID
)

1022 i‡(
r°Se˘i⁄PªTime
 != 0)

1024 if(
£˘i⁄Info
.
°Eº‹Info
.
bC¨ryFœg
)

1026 
timeOff£t
 = 0xffffffff+
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
r°Se˘i⁄PªTime
;

1030 if(
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 >
r°Se˘i⁄PªTime
)

1032 
timeOff£t
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
r°Se˘i⁄PªTime
;

1036 
timeOff£t
 = 
r°Se˘i⁄PªTime
 - 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

1041 i‡(
timeOff£t
 <= 25000)

1043 
îr‹Info
.
r°Eº‹Info
.
limtTimeEº‹
++;

1044 
îr‹Info
.
r°Eº‹Info
.
tŸÆEº‹
++;

1048 
r°Se˘i⁄PªTime
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

1051  
GOSTSR_SUCCESS
;

1054 
GOSTSR_S32
 
TsCheck_TdtSe˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
)

1056 
GOSTSR_U32
 
timeOff£t
 = 0;

1058 i‡((
TDT_TOT_PID
 !
£˘i⁄Info
.
PID
Ë|| (
GOSTSR_NULL
 =£˘i⁄Info.
£˘i⁄D©a
))

1060  
GOSTSR_FAILURE
;

1063 i‡((
TDT_TABLE_ID
 !
£˘i⁄Info
.
èbÀID
Ë&& (
SI_TABLE_ID
 !£˘i⁄Info.èbÀIDË&& (
TOT_TABLE_ID
 != sectionInfo.tableID))

1065 
îr‹Info
.
tdtEº‹Info
.
èbÀIDEº‹
++;

1066 
îr‹Info
.
tdtEº‹Info
.
tŸÆEº‹
++;

1068 i‡(
TDT_TABLE_ID
 =
£˘i⁄Info
.
èbÀID
)

1071 i‡(
tdtSe˘i⁄PªTime
 != 0)

1073 if(
£˘i⁄Info
.
°Eº‹Info
.
bC¨ryFœg
)

1075 
timeOff£t
 = 0xffffffff+
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
tdtSe˘i⁄PªTime
;

1079 if(
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 >
tdtSe˘i⁄PªTime
)

1081 
timeOff£t
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
 - 
tdtSe˘i⁄PªTime
;

1085 
timeOff£t
 = 
tdtSe˘i⁄PªTime
 - 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

1090 i‡(
timeOff£t
 >= 30000000)

1092 
îr‹Info
.
tdtEº‹Info
.
ovîTimeEº‹
++;

1093 
îr‹Info
.
tdtEº‹Info
.
tŸÆEº‹
++;

1096 i‡(
timeOff£t
 <= 25000)

1098 
îr‹Info
.
tdtEº‹Info
.
limôTimeEº‹
++;

1099 
îr‹Info
.
tdtEº‹Info
.
tŸÆEº‹
++;

1103 
tdtSe˘i⁄PªTime
 = 
£˘i⁄Info
.
°Eº‹Info
.
°¨tTime
;

1106  
GOSTSR_SUCCESS
;

1109 
GOSTSR_S32
 
TsCheck_Em±yBuf„rEº‹
(
GOSTSR_U8
 *
d©a
, 
GOSTSR_U16
 
d©aLí
, 
GOSTSR_U32
 
time
)

1111 i‡((
GOSTSR_NULL
 =
d©a
Ë|| (
d©aLí
 == 0))

1113  
GOSTSR_FAILURE
;

1118  
GOSTSR_SUCCESS
;

1121 
GOSTSR_S32
 
TsCheck_D©aDñayEº‹
(
GOSTSR_U8
 *
d©a
, 
GOSTSR_U16
 
d©aLí
, 
GOSTSR_U32
 
time
)

1123 i‡((
GOSTSR_NULL
 =
d©a
Ë|| (
d©aLí
 == 0))

1125  
GOSTSR_FAILURE
;

1130  
GOSTSR_SUCCESS
;

1133 
GOSTSR_S32
 
TsEº‹Check_ThªeLevñ_Inô
()

1135 
mem£t
(&
îr‹Info
, 0x00, (
TsThªeLevñEº‹Check_Info
));

1138 
nôPªTime
 = 0x00;

1139 
nôA˘uÆPªTime
 = 0x00;

1140 
nôOthîPªTime
 = 0x00;

1143 
mem£t
(&
nôA˘uÆSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1144 
mem£t
(&
nôOthîSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1145 
mem£t
(&
b©Se˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1146 
mem£t
(&
sdtA˘uÆSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1147 
mem£t
(&
sdtOthîSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1148 
mem£t
(&
eôA˘uÆSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1149 
mem£t
(&
eôOthîSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1150 
mem£t
(&
eôA˘uÆScheduÀSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1151 
mem£t
(&
eôOthîScheduÀSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1152 
mem£t
(&
tdtSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1153 
mem£t
(&
tŸSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1156 
mem£t
(
uƒe„rPidInfo
, 0x00, (
Uƒe„ªn˚dPid_Info
)*
MAX_UNREFERPID_NUM
);

1157 
mem£t
(&
g°ProgInfo
,0x00,(
SEARCH_INFO_S
 ));

1160 
sdtPªTime
 = 0x00;

1161 
sdtA˘uÆPªTime
 = 0x00;

1162 
mem£t
(
sdtOthîPªTime
, 0x00, (sdtOtherPreTime));

1165 
eôPªTime
 = 0x00;

1166 
eôA˘uÆPªTime
 = 0x00;

1167 
eôA˘uÆSec0PªTime
 = 0x00;

1168 
eôA˘uÆSec1PªTime
 = 0x00;

1169 
eôOthîSec0PªTime
 = 0x00;

1170 
eôOthîSec1PªTime
 = 0x00;

1171 
eôA˘uÆPaúFœg
 = 0x00;

1172 
eôOthîPaúFœg
 = 0x00;

1175 
r°PªTime
 = 0x00;

1176 
r°Se˘i⁄PªTime
 = 0x00;

1179 
tdtPªTime
 = 0x00;

1180 
tdtSe˘i⁄PªTime
 = 0x00;

1182  
GOSTSR_SUCCESS
;

1185 
GOSTSR_S32
 
TsEº‹Check_ThªeLevñ_DeInô
()

1187 
mem£t
(&
îr‹Info
, 0x00, (
TsThªeLevñEº‹Check_Info
));

1190 
nôPªTime
 = 0x00;

1191 
nôA˘uÆPªTime
 = 0x00;

1192 
nôOthîPªTime
 = 0x00;

1195 
mem£t
(&
nôA˘uÆSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1196 
mem£t
(&
nôOthîSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1197 
mem£t
(&
b©Se˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1198 
mem£t
(&
sdtA˘uÆSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1199 
mem£t
(&
sdtOthîSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1200 
mem£t
(&
eôA˘uÆSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1201 
mem£t
(&
eôOthîSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1202 
mem£t
(&
eôA˘uÆScheduÀSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1203 
mem£t
(&
eôOthîScheduÀSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1204 
mem£t
(&
tdtSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1205 
mem£t
(&
tŸSe˘i⁄Info
, 0x00, (
SiRïëR©eSe˘i⁄s_Info
));

1208 
mem£t
(
uƒe„rPidInfo
, 0x00, (
Uƒe„ªn˚dPid_Info
)*
MAX_UNREFERPID_NUM
);

1209 
mem£t
(&
g°ProgInfo
,0x00,(
SEARCH_INFO_S
 ));

1212 
sdtPªTime
 = 0x00;

1213 
sdtA˘uÆPªTime
 = 0x00;

1214 
mem£t
(
sdtOthîPªTime
, 0x00, (sdtOtherPreTime));

1217 
eôPªTime
 = 0x00;

1218 
eôA˘uÆPªTime
 = 0x00;

1219 
eôA˘uÆSec0PªTime
 = 0x00;

1220 
eôA˘uÆSec1PªTime
 = 0x00;

1221 
eôOthîSec0PªTime
 = 0x00;

1222 
eôOthîSec1PªTime
 = 0x00;

1223 
eôA˘uÆPaúFœg
 = 0x00;

1224 
eôOthîPaúFœg
 = 0x00;

1227 
r°PªTime
 = 0x00;

1228 
r°Se˘i⁄PªTime
 = 0x00;

1231 
tdtPªTime
 = 0x00;

1232 
tdtSe˘i⁄PªTime
 = 0x00;

1233  
GOSTSR_SUCCESS
;

1235 
GOSTSR_S32
 
TsEº‹Check_ThªeLevñ_GëEº‹Info
(
TsThªeLevñEº‹Check_Info
 *
öfo
)

1237 i‡(
GOSTSR_NULL
 =
öfo
)

1239  
GOSTSR_FAILURE
;

1242 
mem£t
(
öfo
, 0x00, (
TsThªeLevñEº‹Check_Info
));

1243 
mem˝y
(
öfo
, &
îr‹Info
, (
TsThªeLevñEº‹Check_Info
));

1245  
GOSTSR_SUCCESS
;

1247 
GOSTSR_S32
 
TsEº‹Check_ThªeLevñ_£tPid
(
SEARCH_INFO_S
 *
p°ProgInfo
)

1249 i‡(
GOSTSR_NULL
 =
p°ProgInfo
)

1251  
GOSTSR_FAILURE
;

1253 
mem£t
(&
g°ProgInfo
, 0x00, (
SEARCH_INFO_S
));

1254 
mem˝y
(&
g°ProgInfo
,
p°ProgInfo
,(
SEARCH_INFO_S
));

1256  
GOSTSR_SUCCESS
;

1258 
GOSTSR_S32
 
TsEº‹Check_ThªeLevñ_Uƒe„ªn˚dPidEº‹
(
TS_HEAD_INFO
 
tsHódInfo
)

1260 
TsCheck_Uƒe„ªn˚dPidEº‹
(
tsHódInfo
);

1261  
GOSTSR_SUCCESS
;

1263 
GOSTSR_S32
 
TsEº‹Check_ThªeLevñ_Se˘i⁄sTimeEº‹
(
TS_SECTION_INFO
 
£˘i⁄Info
)

1266 
TsCheck_NôSe˘i⁄sTimeEº‹
(
£˘i⁄Info
);

1267 
TsCheck_SiSe˘i⁄Rïëôi⁄R©eEº‹
(
£˘i⁄Info
);

1268 
TsCheck_SdtA˘uÆSe˘i⁄sTimeEº‹
(
£˘i⁄Info
);

1269 
TsCheck_SdtOthîSe˘i⁄sTimeEº‹
(
£˘i⁄Info
);

1270 
TsCheck_EôA˘uÆSe˘i⁄sTimeEº‹
(
£˘i⁄Info
);

1271 
TsCheck_EôOthîSe˘i⁄sTimeEº‹
(
£˘i⁄Info
);

1272 
TsCheck_R°Se˘i⁄sTimeEº‹
(
£˘i⁄Info
);

1273 
TsCheck_TdtSe˘i⁄sTimeEº‹
(
£˘i⁄Info
);

1275  
GOSTSR_SUCCESS
;

1278 
GOSTSR_S32
 
TsEº‹Check_ThªeLevñ_Buf„rEº‹
(
GOSTSR_U8
 *
d©a
, 
GOSTSR_U16
 
d©aLí
, 
GOSTSR_U32
 
time
)

1280 
TsCheck_Buf„rEº‹
(
d©a
, 
d©aLí
, 
time
);

1281 
TsCheck_Em±yBuf„rEº‹
(
d©a
, 
d©aLí
, 
time
);

1282 
TsCheck_D©aDñayEº‹
(
d©a
, 
d©aLí
, 
time
);

1284  
GOSTSR_SUCCESS
;

1287 #ifde‡
__˝lu•lus


1288 #i‡
__˝lu•lus


	@porting/src/tsparse/TsErrorCheck_TwoLevel.c

1 
	~"TsEº‹Check_TwoLevñ.h
"

2 
	~"GosT§_A«lysisD©a.h
"

3 
	~"£¨ch.h
"

6 
GOSTSR_BOOL
 
	ggbTsR©eisRecved
 = 
GOSTSR_FALSE
;

8 
TSERROR_TWOLEVEL_S
 
	g°TwoLevñ
;

9 
TwoLevñ_TsR©eDis_Info
 
	g°TsR©eInfo
[
PCRPID_NUM_MAX
];

10 
TwoLevñ_P¸Dis_Info
 
	g°P¸Info
[
PCRPID_NUM_MAX
];

11 
TwoLevñ_PesDis_Info
 
	g°PesInfo
[
PESPID_NUM_MAX
];

13 
GOSTSR_BOOL
 
	$TsEº‹Check_TwoLevñ_gëE«bÀCheckFœg
()

15  
gbTsR©eisRecved
;

16 
	}
}

19 
GOSTSR_U32
 
	$TsEº‹Check_TwoLevñ_gëAvTøn•‹tR©e
()

21 
GOSTSR_U64
 
u64Tøn•‹tR©e_AŒ
 = 0;

22 
GOSTSR_U32
 
u32AvTøn•‹tR©e
 = 0;

23 
GOSTSR_U32
 
u32Tøn•‹tR©e_Max
 = 0;

24 
GOSTSR_U32
 
u32Tøn•‹tR©e_Mö
= 0;

25 
GOSTSR_U32
 
i
 = 0;

26 
GOSTSR_U16
 
u16Cou¡
 = 0;

27 
GOSTSR_U8
 
u8C¨ryBô
 = 0;

33 
i
 = 0; i < 
PCRPID_NUM_MAX
; i++)

35 if(
°TsR©eInfo
[
i
].
u32Tøn•‹tR©e
 != 0)

37 
u32Tøn•‹tR©e_Max
 = 
°TsR©eInfo
[
i
].
u32Tøn•‹tR©e
;

38 
u32Tøn•‹tR©e_Mö
 = 
u32Tøn•‹tR©e_Max
;

43 
i
 = 0; i < 
PCRPID_NUM_MAX
; i++)

45 if((
°TsR©eInfo
[
i
].
u32Tøn•‹tR©e
 =0Ë|| (°TsR©eInfo[i].
bFú°U£d
))

48 if(
u32Tøn•‹tR©e_Max
 < 
°TsR©eInfo
[
i
].
u32Tøn•‹tR©e
)

50 
u32Tøn•‹tR©e_Max
 = 
°TsR©eInfo
[
i
].
u32Tøn•‹tR©e
;

52 if(
u32Tøn•‹tR©e_Mö
 > 
°TsR©eInfo
[
i
].
u32Tøn•‹tR©e
)

54 
u32Tøn•‹tR©e_Mö
 = 
°TsR©eInfo
[
i
].
u32Tøn•‹tR©e
;

57 if((
u64Tøn•‹tR©e_AŒ
+
°TsR©eInfo
[
i
].
u32Tøn•‹tR©e
Ë>
TWOLEVEL_INVALID_U32
)

59 
u64Tøn•‹tR©e_AŒ
 = 
°TsR©eInfo
[
i
].
u32Tøn•‹tR©e
-(
TWOLEVEL_INVALID_U32
-u64TransportRate_All);

60 
u8C¨ryBô
++;

64 
u64Tøn•‹tR©e_AŒ
 +
°TsR©eInfo
[
i
].
u32Tøn•‹tR©e
;

67 
u16Cou¡
++;

71 if(
u16Cou¡
 != 0)

73 if(
u16Cou¡
 > 2)

76 
u32AvTøn•‹tR©e
 = (
u8C¨ryBô
*
TWOLEVEL_INVALID_U32
 + 
u64Tøn•‹tR©e_AŒ
-
u32Tøn•‹tR©e_Mö
-
u32Tøn•‹tR©e_Max
Ë/ (
u16Cou¡
-2);

81 
u32AvTøn•‹tR©e
 = (
u8C¨ryBô
*
TWOLEVEL_INVALID_U32
 + 
u64Tøn•‹tR©e_AŒ
Ë/ (
u16Cou¡
);

87  
u32AvTøn•‹tR©e
;

88 
	}
}

90 
GOSTSR_S32
 
	$TsEº‹Check_TwoLevñ_gëTwoLevñEº‹
(
TSERROR_TWOLEVEL_S
 *
pTwoLevñ
)

92 if(
pTwoLevñ
 =
GOSTSR_NULL
)

94  
GOSTSR_FAILURE
;

96 
	`mem˝y
(
pTwoLevñ
, &
°TwoLevñ
, (
TSERROR_TWOLEVEL_S
));

98  
GOSTSR_SUCCESS
;

99 
	}
}

101 
GOSTSR_S32
 
	$TsEº‹Check_TwoLevñ_£tP¸Pid
(
SEARCH_INFO_S
 *
°ProgInfo
)

103 
GOSTSR_S32
 
i
 = 0,
k
 = 0, 
cou¡
 = 0;

105 
i
 = 0; i < 
°ProgInfo
->
u16NbProg
;i++)

107 
k
 = 0; k < 
i
; k++)

109 if(
°P¸Info
[
k
].
u16P¸Pid
 =
°ProgInfo
->°ProgInfo[
i
].
P¸Pid
)

115 if(
k
 =
i
)

117 
°P¸Info
[
cou¡
++].
u16P¸Pid
 = 
°ProgInfo
->°ProgInfo[
i
].
P¸Pid
;

122  
GOSTSR_SUCCESS
;

123 
	}
}

125 
GOSTSR_S32
 
	$TsEº‹Check_TwoLevñ_£tPesPid
(
SEARCH_INFO_S
 *
°ProgInfo
)

127 
GOSTSR_S32
 
i
 = 0, 
j
 =0, 
k
 = 0;

129 
i
 = 0; i < 
°ProgInfo
->
u16NbProg
;i++)

131 
j
 =0; j < 
°ProgInfo
->°ProgInfo[
i
].
u8NbPes
;j++)

133 
°PesInfo
[
k
++].
u16PesPid
 = 
°ProgInfo
->°ProgInfo[
i
].
PesPid
[
j
];

138  
GOSTSR_SUCCESS
;

139 
	}
}

141 
GOSTSR_BOOL
 
	$TwoLevñ_checkisP¸Pid
(
GOSTSR_U16
 
Pid
,
GOSTSR_U32
 *
ödex
)

143 
GOSTSR_S32
 
i
 = 0;

145 
i
 = 0; i < 
PCRPID_NUM_MAX
; i++)

147 if(
Pid
 =
°P¸Info
[
i
].
u16P¸Pid
)

149 *
ödex
 = 
i
;

150  
GOSTSR_TRUE
;

154  
GOSTSR_FALSE
;

155 
	}
}

157 
GOSTSR_BOOL
 
	$TwoLevñ_checkisPesPid
(
GOSTSR_U16
 
Pid
,
GOSTSR_U32
 *
ödex
)

159 
GOSTSR_S32
 
i
 = 0;

161 
i
 = 0; i < 
PESPID_NUM_MAX
; i++)

163 if(
Pid
 =
°PesInfo
[
i
].
u16PesPid
)

165 *
ödex
 = 
i
;

166  
GOSTSR_TRUE
;

170  
GOSTSR_FALSE
;

171 
	}
}

173 
GOSTSR_F32
 
	$TwoLevñ_gëTsR©eMs
()

175 
GOSTSR_F32
 
f32AvTøn•‹tR©e
 = 0.0;

177 if(!
gbTsR©eisRecved
)

180 
f32AvTøn•‹tR©e
 = 1.0 * 
	`TsEº‹Check_TwoLevñ_gëAvTøn•‹tR©e
() / 1000;

182  
f32AvTøn•‹tR©e
;

183 
	}
}

184 
GOSTSR_F32
 
	$TwoLevñ_gëTsR©eUs
()

186 
GOSTSR_F32
 
f32AvTøn•‹tR©e
 = 0.0;

188 if(!
gbTsR©eisRecved
)

191 
f32AvTøn•‹tR©e
 = 1.0 * 
	`TsEº‹Check_TwoLevñ_gëAvTøn•‹tR©e
() / 1000 / 1000;

193  
f32AvTøn•‹tR©e
;

194 
	}
}

196 
GOSTSR_S32
 
	$TsEº‹Check_TwoLevñ_£tPid
(
SEARCH_INFO_S
 *
°ProgInfo
)

198 
	`TsEº‹Check_TwoLevñ_£tP¸Pid
(
°ProgInfo
);

199 
	`TsEº‹Check_TwoLevñ_£tPesPid
(
°ProgInfo
);

200  
GOSTSR_SUCCESS
;

201 
	}
}

205 
GOSTSR_U32
 
	$TsEº‹Check_TwoLevñ_gëTimeUs_byByãPos
(
GOSTSR_U32
 
u32ByãPos
)

207 
GOSTSR_F32
 
f32TsR©eUs
= 0.0;

208 
GOSTSR_U32
 
u32TimeUsCur
 = 0;

210 if(!
gbTsR©eisRecved
)

212  
u32TimeUsCur
;

215 
f32TsR©eUs
 = 
	`TwoLevñ_gëTsR©eUs
();

216 
u32TimeUsCur
 = (1.0 * 
u32ByãPos
 * 8Ë/ 
f32TsR©eUs
;

218  
u32TimeUsCur
;

219 
	}
}

220 
GOSTSR_S32
 
	$TsEº‹Check_TwoLevñ_£tTøn•‹tR©e
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U32
 
ödex
,
GOSTSR_U64
 
u64P¸_Ba£
, 
GOSTSR_U16
 
u64P¸_Ext
)

222 
GOSTSR_U32
 
u32PªPos
 = 0;

223 
GOSTSR_U32
 
u32CurPos
 = 0;

224 
GOSTSR_U32
 
u32AvTøn•‹tR©e
 = 0;

225 
GOSTSR_U64
 
u64PªP¸Ba£VÆue
 = 0;

226 
GOSTSR_U64
 
u64CurP¸Ba£VÆue
 = 0;

227 
GOSTSR_U16
 
u16PªP¸ExãnVÆue
 = 0;

228 
GOSTSR_U16
 
u16CurP¸ExãnVÆue
 = 0;

230 if(
°TsR©eInfo
[
ödex
].
bFú°U£d
)

232 
°TsR©eInfo
[
ödex
].
bFú°U£d
 = 
GOSTSR_FALSE
;

233 
°TsR©eInfo
[
ödex
].
u32ByãPos

p°Eº‹Info
->
byãPos
;

234 
°TsR©eInfo
[
ödex
].
u64P¸Ba£
 = 
u64P¸_Ba£
;

235 
°TsR©eInfo
[
ödex
].
u16P¸Ext
 = 
u64P¸_Ext
;

236  
GOSTSR_FAILURE
;

239 
u32PªPos
 = 
°TsR©eInfo
[
ödex
].
u32ByãPos
;

240 
u64PªP¸Ba£VÆue
 = 
°TsR©eInfo
[
ödex
].
u64P¸Ba£
;

241 
u16PªP¸ExãnVÆue
 = 
°TsR©eInfo
[
ödex
].
u16P¸Ext
;

243 
u32CurPos
 = 
p°Eº‹Info
->
byãPos
;

244 
u64CurP¸Ba£VÆue
 = 
u64P¸_Ba£
;

245 
u16CurP¸ExãnVÆue
 = 
u64P¸_Ext
;

247 i‡(
u64CurP¸Ba£VÆue
 < 
u64PªP¸Ba£VÆue
)

249 if(
u32CurPos
 < 
u32PªPos
)

251 
u32AvTøn•‹tR©e
 = (
TWOLEVEL_BYTEPOS_MAX
 - 
u32PªPos
 + 
u32CurPos
)*8*27000000.0/((0x1ffffffffULL - 
u64PªP¸Ba£VÆue
 + 
u64CurP¸Ba£VÆue
)*300 + 
u16CurP¸ExãnVÆue
 - 
u16PªP¸ExãnVÆue
);

255 
u32AvTøn•‹tR©e
 = (
u32CurPos
 - 
u32PªPos
)*8*27000000.0/((0x1ffffffffULL - 
u64PªP¸Ba£VÆue
 + 
u64CurP¸Ba£VÆue
)*300 + 
u16CurP¸ExãnVÆue
 - 
u16PªP¸ExãnVÆue
);

260 if(
u32CurPos
 < 
u32PªPos
)

262 
u32AvTøn•‹tR©e
 = (
GOSTSR_U32
)((
TWOLEVEL_BYTEPOS_MAX
 - 
u32PªPos
 + 
u32CurPos
)*8*27000000.0/((
u64CurP¸Ba£VÆue
 - 
u64PªP¸Ba£VÆue
)*300 + 
u16CurP¸ExãnVÆue
 - 
u16PªP¸ExãnVÆue
));

266 
u32AvTøn•‹tR©e
 = (
u32CurPos
 - 
u32PªPos
)*8*27000000.0/((
u64CurP¸Ba£VÆue
 -
u64PªP¸Ba£VÆue
)*300 + 
u16CurP¸ExãnVÆue
 - 
u16PªP¸ExãnVÆue
);

270 i‡((
°TsR©eInfo
[
ödex
].
u32Tøn•‹tR©e
 !0Ë&& (
	`abs
(°TsR©eInfo[ödex].u32Tøn•‹tR©ê- 
u32AvTøn•‹tR©e
) > 1000000))

273  
GOSTSR_FAILURE
;

276 
°TsR©eInfo
[
ödex
].
u32Tøn•‹tR©e
 = 
u32AvTøn•‹tR©e
;

277 
°TsR©eInfo
[
ödex
].
u32ByãPos
 = 
p°Eº‹Info
->
byãPos
;

278 
°TsR©eInfo
[
ödex
].
u64P¸Ba£
 = 
u64P¸_Ba£
;

279 
°TsR©eInfo
[
ödex
].
u16P¸Ext
 = 
u64P¸_Ext
;

281 
gbTsR©eisRecved
 = 
GOSTSR_TRUE
;

283  
GOSTSR_SUCCESS
;

284 
	}
}

287 
GOSTSR_S32
 
	$TsEº‹Check_TwoLevñ_checkTøn•‹tEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U8
 
u8Eº‹_ödiˇãr
)

289 if(
u8Eº‹_ödiˇãr
 == 0)

291  
GOSTSR_FAILURE
;

293 
°TwoLevñ
.
u32TsEº‹Cou¡
++;

294  
GOSTSR_SUCCESS
;

295 
	}
}

297 
GOSTSR_S32
 
	$TsEº‹Check_TwoLevñ_checkCrcEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U8
 
u8TabÀID
,
GOSTSR_U32
 
u32TabÀCrc
,GOSTSR_U32 
u32CÆCrc
)

299 if(
u32TabÀCrc
 =
u32CÆCrc
)

301  
GOSTSR_FAILURE
;

303 
u8TabÀID
)

305 
PAT_TABLE_ID
:

306 
°TwoLevñ
.
°CrcEº‹Info
.
∑tCrcEº‹Cou¡
++;

307 
°TwoLevñ
.
°CrcEº‹Info
.
tŸÆCrcEº‹Cou¡
++;

309 
PMT_TABLE_ID
:

310 
°TwoLevñ
.
°CrcEº‹Info
.
pmCr˘Eº‹Cou¡
++;

311 
°TwoLevñ
.
°CrcEº‹Info
.
tŸÆCrcEº‹Cou¡
++;

313 
CAT_TABLE_ID
:

314 
°TwoLevñ
.
°CrcEº‹Info
.
ˇtCrcEº‹Cou¡
++;

315 
°TwoLevñ
.
°CrcEº‹Info
.
tŸÆCrcEº‹Cou¡
++;

317 
NIT_TABLE_ID_ACTUAL
:

318 
NIT_TABLE_ID_OTHER
:

319 
°TwoLevñ
.
°CrcEº‹Info
.
nôCrcEº‹Cou¡
++;

320 
°TwoLevñ
.
°CrcEº‹Info
.
tŸÆCrcEº‹Cou¡
++;

322 
BAT_TABLE_ID
:

323 
°TwoLevñ
.
°CrcEº‹Info
.
b©CrcEº‹Cou¡
++;

324 
°TwoLevñ
.
°CrcEº‹Info
.
tŸÆCrcEº‹Cou¡
++;

326 
SDT_TABLE_ID_ACTUAL
:

327 
SDT_TABLE_ID_OTEHR
:

328 
°TwoLevñ
.
°CrcEº‹Info
.
sdtCrcEº‹Cou¡
++;

329 
°TwoLevñ
.
°CrcEº‹Info
.
tŸÆCrcEº‹Cou¡
++;

331 
EIT_TABLE_ID_ACTUAL
:

332 
EIT_TABLE_ID_ACTUAL_SHEDULE
:

333 
EIT_TABLE_ID_OTHER
:

334 
EIT_TABLE_ID_OTHER_SHEDULE
:

335 
°TwoLevñ
.
°CrcEº‹Info
.
eôCrcEº‹Cou¡
++;

336 
°TwoLevñ
.
°CrcEº‹Info
.
tŸÆCrcEº‹Cou¡
++;

338 
TDT_TABLE_ID
:

339 
TOT_TABLE_ID
:

340 
RST_TABLE_ID
:

341 
SI_TABLE_ID
:

346  
GOSTSR_SUCCESS
;

347 
	}
}

349 
GOSTSR_S32
 
	$TsEº‹Check_TwoLevñ_checkP¸Disc⁄tEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U32
 
ödex
,
GOSTSR_U64
 
u64P¸_Ba£
, 
GOSTSR_U16
 
u16P¸_Ext
,
GOSTSR_BOOL
 *
bEº‹Fœg
)

351 
GOSTSR_U32
 
u32P¸VÆueNs_Diff
 = 0;

352 
GOSTSR_U32
 
u32P¸VÆueMs_Diff
 = 0;

355 if(
°P¸Info
[
ödex
].
bFú°U£d
)

357 
°P¸Info
[
ödex
].
bFú°U£d
 = 
GOSTSR_FALSE
;

358 
°P¸Info
[
ödex
].
u64P¸Ba£
 = 
u64P¸_Ba£
;

359 
°P¸Info
[
ödex
].
u16P¸Ext
 = 
u16P¸_Ext
;

360 
°P¸Info
[
ödex
].
u32P¸VÆueNs
 = 
TWOLEVEL_INVALID_U32
;

361 *
bEº‹Fœg
 = 
GOSTSR_FALSE
;

362  
GOSTSR_FAILURE
;

366 if(
u64P¸_Ba£
 >
°P¸Info
[
ödex
].
u64P¸Ba£
)

368 if(
u16P¸_Ext
 >
°P¸Info
[
ödex
].
u16P¸Ext
)

370 
u32P¸VÆueNs_Diff
 = ((
u64P¸_Ba£
-
°P¸Info
[
ödex
].
u64P¸Ba£
)*300+(
u16P¸_Ext
-°P¸Info[ödex].
u16P¸Ext
))*1000/27;

374 
u32P¸VÆueNs_Diff
 = ((
u64P¸_Ba£
-1-
°P¸Info
[
ödex
].
u64P¸Ba£
)*300+(0x1ff+
u16P¸_Ext
-°P¸Info[ödex].
u16P¸Ext
))*1000/27;

379 if(
u16P¸_Ext
 >
°P¸Info
[
ödex
].
u16P¸Ext
)

381 
u32P¸VÆueNs_Diff
 = ((0x1ffffffffULL - 
°P¸Info
[
ödex
].
u64P¸Ba£
+
u64P¸_Ba£
)*300+(
u16P¸_Ext
-°P¸Info[ödex].
u16P¸Ext
))*1000/27;

385 
u32P¸VÆueNs_Diff
 = ((0x1ffffffffULL - 
°P¸Info
[
ödex
].
u64P¸Ba£
+(
u64P¸_Ba£
-1))*300+(0x1ff+
u16P¸_Ext
-°P¸Info[ödex].
u16P¸Ext
))*1000/27;

389 
°P¸Info
[
ödex
].
u32P¸VÆueNs
 = 
u32P¸VÆueNs_Diff
;

390 
°P¸Info
[
ödex
].
u64P¸Ba£
 = 
u64P¸_Ba£
;

391 
°P¸Info
[
ödex
].
u16P¸Ext
 = 
u16P¸_Ext
;

394 
u32P¸VÆueMs_Diff
 = 
u32P¸VÆueNs_Diff
 / 1000 /1000;

395 if(
u32P¸VÆueMs_Diff
 > 40)

399 
°TwoLevñ
.
u32P¸DisEº‹Cou¡
++;

400 *
bEº‹Fœg
 = 
GOSTSR_TRUE
;

404  
GOSTSR_SUCCESS
;

405 
	}
}

408 
GOSTSR_S32
 
	$TsEº‹Check_TwoLevñ_checkP¸JôãrEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U32
 
ödex
,
GOSTSR_U64
 
u64P¸_Ba£
, 
GOSTSR_U16
 
u64P¸_Ext
)

410 
GOSTSR_U32
 
u32P¸VÆueP¸_Ns
 = 0;

411 
GOSTSR_U32
 
u32P¸VÆueBô_Ns
 = 0;

412 
GOSTSR_U32
 
u32byãOff£t
 = 0;

413 
GOSTSR_F32
 
f32TsR©eUs
 = 0.0;

416 if((
°P¸Info
[
ödex
].
u32ByãPos
 =0Ë|| (°P¸Info[ödex].
u32P¸VÆueNs
 =
TWOLEVEL_INVALID_U32
))

418 
°P¸Info
[
ödex
].
u32ByãPos
 = 
p°Eº‹Info
->
byãPos
;

419  
GOSTSR_FAILURE
;

424 
u32P¸VÆueP¸_Ns
 =
°P¸Info
[
ödex
].
u32P¸VÆueNs
;

426 
f32TsR©eUs
 = 
	`TwoLevñ_gëTsR©eUs
();

427 if(
f32TsR©eUs
 == 0.0)

429  
GOSTSR_FAILURE
;

432 if(
p°Eº‹Info
->
bC¨ryFœg
)

434 
u32byãOff£t
 = 
TWOLEVEL_BYTEPOS_MAX
+
p°Eº‹Info
->
byãPos
 - 
°P¸Info
[
ödex
].
u32ByãPos
;

438 if(
p°Eº‹Info
->
byãPos
 >
°P¸Info
[
ödex
].
u32ByãPos
)

440 
u32byãOff£t
 = 
p°Eº‹Info
->
byãPos
 - 
°P¸Info
[
ödex
].
u32ByãPos
;

444 
u32byãOff£t
 = 
°P¸Info
[
ödex
].
u32ByãPos
 - 
p°Eº‹Info
->
byãPos
;

447 
°P¸Info
[
ödex
].
u32ByãPos
 = 
p°Eº‹Info
->
byãPos
;

449 
u32P¸VÆueBô_Ns
 = (
GOSTSR_U32
)(1.0*
u32byãOff£t
*8*1000/
f32TsR©eUs
);

451 if(
	`abs
(
u32P¸VÆueBô_Ns
 - 
u32P¸VÆueP¸_Ns
) > 500)

453 
°TwoLevñ
.
u32P¸JôEº‹Cou¡
++;

457  
GOSTSR_SUCCESS
;

458 
	}
}

460 
GOSTSR_S32
 
	$TsEº‹Check_TwoLevñ_checkP¸Eº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U16
 
u16P¸Pid
,
GOSTSR_U64
 
u64P¸_Ba£
, GOSTSR_U16 
u64P¸_Ext
, 
GOSTSR_BOOL
 
Êag
)

462 
GOSTSR_U32
 
ödex
 = 0;

463 
GOSTSR_BOOL
 
bEº‹Fœg
 = 
GOSTSR_FALSE
;

465 i‡(!
Êag
)

470 if(!
	`TwoLevñ_checkisP¸Pid
(
u16P¸Pid
, &
ödex
))

472  
GOSTSR_FAILURE
;

476 i‡(!
Êag
)

478 
°TsR©eInfo
[
ödex
].
bFú°U£d
 = 
GOSTSR_TRUE
;

479 
°TsR©eInfo
[
ödex
].
u32Tøn•‹tR©e
 = 0;

480 
°P¸Info
[
ödex
].
bFú°U£d
 = 
GOSTSR_TRUE
;

481 
°P¸Info
[
ödex
].
u32ByãPos
 = 0;

482  
GOSTSR_FAILURE
;

486 
	`TsEº‹Check_TwoLevñ_checkP¸Disc⁄tEº‹
(
p°Eº‹Info
,
ödex
,
u64P¸_Ba£
,
u64P¸_Ext
,&
bEº‹Fœg
);

489 
	`TsEº‹Check_TwoLevñ_checkP¸JôãrEº‹
(
p°Eº‹Info
,
ödex
,
u64P¸_Ba£
,
u64P¸_Ext
);

491 if(!
bEº‹Fœg
)

494 
°TsR©eInfo
[
ödex
].
u16P¸Pid
 = u16PcrPid;

495 
	`TsEº‹Check_TwoLevñ_£tTøn•‹tR©e
(
p°Eº‹Info
,
ödex
,
u64P¸_Ba£
,
u64P¸_Ext
);

498  
GOSTSR_SUCCESS
;

499 
	}
}

501 
GOSTSR_S32
 
	$TsEº‹Check_TwoLevñ_checkPtsEº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U16
 
u16PesPid
)

503 
GOSTSR_U32
 
u32PtsTime
 = 0;

504 
GOSTSR_F32
 
f32P¸MsR©e
 = 0;

505 
GOSTSR_U32
 
ödex
 = 0;

506 
GOSTSR_U32
 
u32byãOff£t
 = 0;

508 if(!
gbTsR©eisRecved
)

513 if(!
	`TwoLevñ_checkisPesPid
(
u16PesPid
, &
ödex
))

515  
GOSTSR_FAILURE
;

518 if((
°PesInfo
[
ödex
].
bFú°U£d
Ë|| (°PesInfo[ödex].
u32ByãPos
 == 0))

520 
°PesInfo
[
ödex
].
bFú°U£d
 = 
GOSTSR_FALSE
;

521 
°PesInfo
[
ödex
].
u32ByãPos
 = 
p°Eº‹Info
->
byãPos
;

522  
GOSTSR_FAILURE
;

525 
f32P¸MsR©e
 = 
	`TwoLevñ_gëTsR©eMs
();

526 if(
f32P¸MsR©e
 == 0.0)

528  
GOSTSR_FAILURE
;

532 if(
p°Eº‹Info
->
bC¨ryFœg
)

534 
u32byãOff£t
 = 
TWOLEVEL_BYTEPOS_MAX
+
p°Eº‹Info
->
byãPos
 - 
°PesInfo
[
ödex
].
u32ByãPos
;

538 if(
p°Eº‹Info
->
byãPos
 >
°PesInfo
[
ödex
].
u32ByãPos
)

540 
u32byãOff£t
 = 
p°Eº‹Info
->
byãPos
 - 
°PesInfo
[
ödex
].
u32ByãPos
;

544 
u32byãOff£t
 = 
°PesInfo
[
ödex
].
u32ByãPos
 - 
p°Eº‹Info
->
byãPos
;

547 
°PesInfo
[
ödex
].
u32ByãPos
 = 
p°Eº‹Info
->
byãPos
;

549 
u32PtsTime
 =(
GOSTSR_U32
)(1.0 * 
u32byãOff£t
 * 8 / 
f32P¸MsR©e
);

550 if(
u32PtsTime
 > 700)

553 
°TwoLevñ
.
u32PtsEº‹Cou¡
++;

554  
GOSTSR_SUCCESS
;

556  
GOSTSR_FAILURE
;

557 
	}
}

559 
GOSTSR_S32
 
	$TsEº‹Check_TwoLevñ_checkC©Eº‹
(
TR101290_ERROR_S
 *
p°Eº‹Info
,
GOSTSR_U16
 
u16Pid
, 
GOSTSR_U8
 
u8TabÀID
, GOSTSR_U8 
u8S¸ambÀ
)

561 if(
u16Pid
 !
CAT_PID
)

563  
GOSTSR_FAILURE
;

565 if(
u8TabÀID
 !
CAT_TABLE_ID
)

567 
°TwoLevñ
.
°C©Eº‹Info
.
èbÀIDEº‹Cou¡
++;

568 
°TwoLevñ
.
°C©Eº‹Info
.
tŸÆC©Eº‹Cou¡
++;

571 if(
u8S¸ambÀ
 != 0)

573 
°TwoLevñ
.
°C©Eº‹Info
.
sˇmbÀEº‹Cou¡
++;

574 
°TwoLevñ
.
°C©Eº‹Info
.
tŸÆC©Eº‹Cou¡
++;

577  
GOSTSR_SUCCESS
;

578 
	}
}

580 
GOSTSR_S32
 
	$TsEº‹Check_TwoLevñ_Inô
()

582 
GOSTSR_S32
 
i
 = 0;

584 
	`mem£t
(&
°TwoLevñ
,0 , (
TSERROR_TWOLEVEL_S
));

585 
	`mem£t
(&
°TsR©eInfo
,0 , (
TwoLevñ_TsR©eDis_Info
Ë* 
PCRPID_NUM_MAX
);

586 
	`mem£t
(&
°P¸Info
,0 , (
TwoLevñ_P¸Dis_Info
Ë* 
PCRPID_NUM_MAX
);

587 
	`mem£t
(&
°PesInfo
,0 , (
TwoLevñ_PesDis_Info
Ë* 
PESPID_NUM_MAX
);

589 
i
 = 0 ; i < 
PCRPID_NUM_MAX
; i++)

591 
°P¸Info
[
i
].
bFú°U£d
 = 
GOSTSR_TRUE
;

592 
°P¸Info
[
i
].
u16P¸Pid
 = 
TWOLEVEL_INVALID_U16
;

594 
°TsR©eInfo
[
i
].
bFú°U£d
 = 
GOSTSR_TRUE
;

595 
°TsR©eInfo
[
i
].
u16P¸Pid
 = 
TWOLEVEL_INVALID_U16
;

597 
i
 = 0 ; i < 
PESPID_NUM_MAX
; i++)

599 
°PesInfo
[
i
].
bFú°U£d
 = 
GOSTSR_TRUE
;

600 
°PesInfo
[
i
].
u16PesPid
 = 
TWOLEVEL_INVALID_U16
;

602 
gbTsR©eisRecved
 = 
GOSTSR_FALSE
;

604  
GOSTSR_SUCCESS
;

605 
	}
}

607 
GOSTSR_S32
 
	$TsEº‹Check_TwoLevñ_DeInô
()

609 
GOSTSR_S32
 
i
 = 0;

611 
	`mem£t
(&
°TwoLevñ
,0 , (
TSERROR_TWOLEVEL_S
));

612 
	`mem£t
(&
°TsR©eInfo
,0 , (
TwoLevñ_TsR©eDis_Info
Ë* 
PCRPID_NUM_MAX
);

613 
	`mem£t
(&
°P¸Info
,0 , (
TwoLevñ_P¸Dis_Info
Ë* 
PCRPID_NUM_MAX
);

614 
	`mem£t
(&
°PesInfo
,0 , (
TwoLevñ_PesDis_Info
Ë* 
PESPID_NUM_MAX
);

616 
i
 = 0 ; i < 
PCRPID_NUM_MAX
; i++)

618 
°P¸Info
[
i
].
bFú°U£d
 = 
GOSTSR_TRUE
;

619 
°P¸Info
[
i
].
u16P¸Pid
 = 
TWOLEVEL_INVALID_U16
;

621 
°TsR©eInfo
[
i
].
bFú°U£d
 = 
GOSTSR_TRUE
;

622 
°TsR©eInfo
[
i
].
u16P¸Pid
 = 
TWOLEVEL_INVALID_U16
;

624 
i
 = 0 ; i < 
PESPID_NUM_MAX
; i++)

626 
°PesInfo
[
i
].
bFú°U£d
 = 
GOSTSR_TRUE
;

627 
°PesInfo
[
i
].
u16PesPid
 = 
TWOLEVEL_INVALID_U16
;

629 
gbTsR©eisRecved
 = 
GOSTSR_FALSE
;

630  
GOSTSR_SUCCESS
;

631 
	}
}

	@porting/src/tsparse/tsparse_api.c

1 
	~<dúít.h
>

3 
	~"u£r_deföe.h
"

4 
	~"t•¨£_≠i.h
"

5 
	~"t•¨£_£¨ch.h
"

6 
	~"t•¨£_upd©e.h
"

8 
	~"GosT§_Crc.h
"

9 
	~"GosT§_A«lysisD©a.h
"

11 
	~"TsEº‹Check_O√Levñ.h
"

12 
	~"TsEº‹Check_TwoLevñ.h
"

13 
	~"TsEº‹Check_ThªeLevñ.h
"

15 
	~"udp_uniˇ°_≠i.h
"

16 
	~"udp_mu…iˇ°_≠i.h
"

17 
	~"πp_uniˇ°_≠i.h
"

18 
	~"πp_mu…iˇ°_≠i.h
"

20 
	~"web.h
"

21 
	~"usbdesk.h
"

22 
	~"thªadpoﬁ.h
"

23 
	~"u£r_deföe.h
"

24 
	~"t•¨£_fûe.h
"

28 
	mGOS_UDP_MULTICAST
 = 0,

29 
	mGOS_UDP_UNICAST
,

30 
	mGOS_RTP_MULTICAST
,

31 
	mGOS_RTP_UNICAST
,

33 
	mGOS_UDPRTP_BUTT


38 
	mfûï©h
[256];

39 
	maddr
[32];

41 
GOSTSR_U8
 
	mu£Êag
;

42 
GOSTSR_U8
 
	m¥Ÿocﬁ
;

44 
GOSTSR_U32
 
	mp‹t
;

45 
GOSTSR_U32
 
	mbôøã
;

46 }
	tTHREAD_POOL_PARA
;

50 
	mu£d
;

51 
	mfd
;

52 
	mÊag
;

53 
GOSTSR_U64
 
	mdi°™˚
;

54 
sockaddr_ö
 
	mde°_addr
;

56 }
	tSOCKET_PARA
;

59 
THREAD_POOL_PARA
 
	gg°Task_P¨a
[
MAX_THREAD_NUM
];

60 
SOCKET_PARA
 
	gg°sockë
[
MAX_THREAD_NUM
];

61 
GOSTSR_U32
 
	ggPackëNumbî
 = 0;

63 
GOSTSR_BOOL
 
	ggb_°¨tÊag
 = 
GOSTSR_FALSE
;

64 
GOS_SVC_TsP¨£_BôR©e_t
 
	gg°_bôøã
;

66 
ölöe
 
GOSTSR_U32
 
	$t•¨£_time_gëtimíow
()

68 
GOSTSR_U32
 
timeVÆue
 = 0;

69 
timevÆ
 
time_vÆue
;

70 
	`gëtimeofday
(&
time_vÆue
, 
NULL
);

71 
timeVÆue
 = 
time_vÆue
.
tv_£c
 * 1000 +Åime_vÆue.
tv_u£c
 / 1000;

73  (
timeVÆue
);

74 
	}
}

76 
ölöe
 
GOSTSR_S32
 
	$t•¨£_time_waôtime
(
h™dÀ
, 
GOSTSR_U64
 
vÆue
)

78 
GOSTSR_U32
 
nWaô
 = 0;

79 
GOSTSR_U64
 
¡ime
 = 
	`t•¨£_time_gëtimíow
();

81 
GOSTSR_U64
 
nSy°ime
 = 27*1000*
¡ime
;

83 if(
g°sockë
[
h™dÀ
].
Êag
 == 0)

85 
g°sockë
[
h™dÀ
].
di°™˚
 = 
	`abs
(
nSy°ime
 - 
vÆue
);

86 
g°sockë
[
h™dÀ
].
Êag
 = 1;

90 
nWaô
 = (
vÆue
 - (
nSy°ime
 - 
g°sockë
[
h™dÀ
].
di°™˚
))/ (27*1000);

91 if(
nWaô
 < 0)

93 
g°sockë
[
h™dÀ
].
di°™˚
 = 
nSy°ime
 - 
vÆue
;

94  
GOSTSR_SUCCESS
;

96 if(
nWaô
 <= 5000)

98 
	`u¶ìp
(
nWaô
*1000);

102 
g°sockë
[
h™dÀ
].
di°™˚
 = 
nSy°ime
 - 
vÆue
;

106  
GOSTSR_SUCCESS
;

107 
	}
}

114 
GOSTSR_S32
 
	$t•¨£_sockë_gëty≥_byùaddr
(*
mode
, 
GOSTSR_U8
 
¥Ÿocﬁ
, *
∑ddr
)

116 if((
GOSTSR_NULL
 =
mode
Ë|| (GOSTSR_NULL =
∑ddr
))

118  
GOSTSR_FAILURE
;

121 
GOSTSR_S32
 
s32Rë
 = 
GOSTSR_FAILURE
;

122 
GOSTSR_U32
 
ù_vÆue
 = 
	`öë_addr
(
∑ddr
);

124 if((
ù_vÆue
 > 0xe00000ff) || (ip_value <= 0xefffffff))

126 if(
¥Ÿocﬁ
 == 0)

128 *
mode
 = 
GOS_UDP_MULTICAST
;

130 if(
¥Ÿocﬁ
 == 1)

132 *
mode
 = 
GOS_RTP_MULTICAST
;

134 
s32Rë
 = 
GOSTSR_SUCCESS
;

138 if(
¥Ÿocﬁ
 == 0)

140 *
mode
 = 
GOS_UDP_UNICAST
;

142 if(
¥Ÿocﬁ
 == 1)

144 *
mode
 = 
GOS_RTP_UNICAST
;

146 
s32Rë
 = 
GOSTSR_SUCCESS
;

149  
s32Rë
;

150 
	}
}

152 
GOSTSR_S32
 
	$t•¨£_sockë_¸ótsock
(
mode
, 
p‹t
, *
∑ddr
, *
h™dÀ
)

154 
s32Rë
 = -1;

156 
cmd
[256];

157 
	`•rötf
(
cmd
, "rouãádd -√à%†√tmask 255.255.255.255Éth1", 
∑ddr
);

158 
	`sy°em
(
cmd
);

160 
mode
)

162 
GOS_UDP_MULTICAST
:

163 
s32Rë
 = 
	`udp_mu…iˇ°_¸óã
(
UDP_MULTICAST_SEND
, 
p‹t
, 
∑ddr
, 
h™dÀ
);

166 
GOS_UDP_UNICAST
:

170 
GOS_RTP_MULTICAST
:

171 
s32Rë
 = 
	`πp_mu…iˇ°_¸óã
(
RTP_MULTICAST_SEND
,33, 
p‹t
, 
∑ddr
, 
h™dÀ
);

174 
GOS_RTP_UNICAST
:

181  
GOSTSR_SUCCESS
;

182 
	}
}

184 
GOSTSR_S32
 
	$t•¨£_sockë_£ndd©a
(
mode
, 
h™dÀ
, *
d©a
, 
d©Æí
)

186 
s32Rë
 = -1;

188 
mode
)

190 
GOS_UDP_MULTICAST
:

191 
s32Rë
 = 
	`udp_mu…iˇ°_£ndmsg
(
h™dÀ
, (c⁄° *)
d©a
, 
d©Æí
);

194 
GOS_UDP_UNICAST
:

198 
GOS_RTP_MULTICAST
:

199 
s32Rë
 = 
	`πp_mu…iˇ°_£ndmsg
(
h™dÀ
, (c⁄° *)
d©a
, 
d©Æí
, 33);

202 
GOS_RTP_UNICAST
:

209  
s32Rë
;

210 
	}
}

212 
GOSTSR_S32
 
	$t•¨£_≠i_£ndt•ackë
(*
pfûeP©h
, 
t§©e
, 
mode
, 
p‹t
, *
addr
)

214 
FILE
 *
sFp
 = 
GOSTSR_NULL
;

215 
GOSTSR_U32
 
∑ckageLí
 = 0;

216 
GOSTSR_U8
 *
tsD©a
 = 
GOSTSR_NULL
;

218 if((
GOSTSR_NULL
 =
pfûeP©h
Ë|| (GOSTSR_NULL =
addr
))

222 
p‹t_udp
 = 
p‹t
;

223 
bôøã
 = 
t§©e
;

224 
fûeP©h
[256];

225 
∑ddr
[32];

227 i‡(
GOSTSR_NULL
 =
pfûeP©h
)

229 
	`¥ötf
("Ñëu∫ faûuª %d \n", 
__LINE__
);

230  
GOSTSR_FAILURE
;

233 
	`°r˝y
(
fûeP©h
, 
pfûeP©h
);

234 
	`°r˝y
(
∑ddr
, 
addr
);

236 
h™dÀ
 = -1;

237 if(0 !
	`t•¨£_sockë_¸ótsock
(
mode
, 
p‹t_udp
, 
∑ddr
, &
h™dÀ
))

239 
	`¥ötf
("creat Socket Failed\n");

242 
	`¥ötf
("Fûe:%s--bôøã:%.4f--h™dÀ:%d--p‹t:%d--addr:%s\n", 
fûeP©h
, ()
bôøã
/1000/1000,
h™dÀ
, 
p‹t_udp
, 
∑ddr
);

244 if(
GOSTSR_FAILURE
 =
	`GosT§_A«lysisD©a_PackëTy≥
(&
∑ckageLí
,
fûeP©h
))

246 
	`¥ötf
("Ñëu∫ faûuª %d \n", 
__LINE__
);

247  
GOSTSR_FAILURE
;

250 
sFp
 = 
	`f›í
(
fûeP©h
, "rb");

251 i‡(
GOSTSR_NULL
 =
sFp
)

253 
	`¥ötf
("Ñëu∫ faûuª %d \n", 
__LINE__
);

254  
GOSTSR_FAILURE
;

257 
	`f£ek
(
sFp
, 0, 
SEEK_SET
);

259 
GOSTSR_U64
 
nCou¡TŸÆ
 = 0;

260 
GOSTSR_U64
 
nSídTŸÆ
 = 0;

261 
GOSTSR_U64
 
nPCRBa£
 = 0;

262 
nD©aLí
 = 100 * 
TS_OVER_IP_SIZE
;

263 
nSídLí
 = 0;

264 
nLí
 = 0;

266 
tsD©a
 = (
GOSTSR_U8
 *)
	`mÆloc
(
nD©aLí
);

267 i‡(
GOSTSR_NULL
 =
tsD©a
)

269 
	`f˛o£
(
sFp
);

270 
sFp
 = 
GOSTSR_NULL
;

271 
	`¥ötf
("Áûuª %d \n", 
__LINE__
);

272  
GOSTSR_FAILURE
;

275 
GOSTSR_U64
 
dwTime
 = 
	`t•¨£_time_gëtimíow
();

276 
g°sockë
[
h™dÀ
].
Êag
 = 0;

278 
	`¥ötf
("\n\nH™dÀ[%d] begöÅÿ£nd ....\n\n", 
h™dÀ
);

280 
gb_°¨tÊag
)

282 
nLí
 = 
	`‰ód
(
tsD©a
, 1, 
nD©aLí
, 
sFp
);

283 i‡(
nLí
 < 
nD©aLí
)

285 
nSídLí
 = 0;

286 
nSídLí
 < 
nLí
)

288 
	`t•¨£_sockë_£ndd©a
(
mode
, 
h™dÀ
, 
tsD©a
+
nSídLí
, 
TS_OVER_IP_SIZE
);

289 
nSídLí
 +
TS_OVER_IP_SIZE
;

292 
nCou¡TŸÆ
++;

293 
dwTime
 = 
	`t•¨£_time_gëtimíow
() - dwTime;

294 
	`DEBUG_INFO
("h™dÀ:%d--nSídNum:%Œd, bôøã[%.2fMbps]\n", 
h™dÀ
, 
nCou¡TŸÆ
, (1.0 * 
nSídTŸÆ
 * 1000 * 8Ë/ 
dwTime
/1000/1000);

296 
nSídTŸÆ
 = 0;

297 
	`f£ek
(
sFp
, 0, 
SEEK_SET
);

298 
dwTime
 = 
	`t•¨£_time_gëtimíow
();

299 
g°sockë
[
h™dÀ
].
Êag
 = 0;

303 
nSídLí
 = 0;

304 
nSídLí
 < 
nD©aLí
)

306 
	`t•¨£_sockë_£ndd©a
(
mode
, 
h™dÀ
, 
tsD©a
+
nSídLí
, 
TS_OVER_IP_SIZE
);

307 
nSídLí
 +
TS_OVER_IP_SIZE
;

311 
nSídTŸÆ
 +
nSídLí
;

312 
nPCRBa£
 = 27*1000*1000 *(1.0 * 
nSídTŸÆ
 * 8Ë/ 
bôøã
;

314 
	`t•¨£_time_waôtime
(
h™dÀ
, 
nPCRBa£
);

317 
	`f£ek
(
sFp
, 0, 
SEEK_SET
);

318 
	`f˛o£
(
sFp
);

319 
sFp
 = 
GOSTSR_NULL
;

321 
	`¥ötf
("\n\nH™dÀ[%d]ÉndÅÿ£nd ....\n\n",
h™dÀ
);

323  
GOSTSR_SUCCESS
;

324 
	}
}

326 
GOSTSR_S32
 
	$t•¨£_≠i_thªadpoﬁ_ˇŒback
(*
¨gv
)

328 if(
GOSTSR_NULL
 =
¨gv
)

333 
mode
 = 0;

334 
THREAD_POOL_PARA
 *
pP¨a
 = (THREAD_POOL_PARA *)
¨gv
;

336 if(
GOSTSR_SUCCESS
 !
	`t•¨£_sockë_gëty≥_byùaddr
(&
mode
, 
pP¨a
->
¥Ÿocﬁ
,ÖP¨a->
addr
))

338 
	`DEBUG_ERROR
("tsparse_socket_gettype_byipaddrÉrror");

342 
	`t•¨£_≠i_£ndt•ackë
(
pP¨a
->
fûï©h
,ÖP¨a->
bôøã
, 
mode
,ÖP¨a->
p‹t
,ÖP¨a->
addr
);

345 
	}
}

347 
GOSTSR_S32
 
	$t•¨£_≠i_™Æysi•ackë
(
GOSTSR_BOOL
 
bC¨ryFœg
,
GOSTSR_U32
 
u32ByãPos
,
GOSTSR_U8
 *
pPackëD©a
, GOSTSR_U32 
u32D©aLí
)

349 
GOSTSR_U32
 
°¨tTime
 = 0;

350 
GOSTSR_U32
 
ídTime
 = 0;

351 
TS_HEAD_INFO
 
tsHódInfo
;

352 
TS_ADAPT_INFO
 
ad≠tInfo
;

353 
TS_PES_INFO
 
≥sInfo
;

355 i‡(
GOSTSR_NULL
 =
pPackëD©a
)

357  
GOSTSR_FAILURE
;

360 
	`mem£t
(&
tsHódInfo
, 0, (tsHeadInfo));

361 
	`mem£t
(&
ad≠tInfo
, 0, (adaptInfo));

362 
	`mem£t
(&
≥sInfo
, 0, (pesInfo));

364 if(
	`TsEº‹Check_TwoLevñ_gëAvTøn•‹tR©e
() != 0)

366 
°¨tTime
 = 
	`TsEº‹Check_TwoLevñ_gëTimeUs_byByãPos
(
u32ByãPos
);

367 
ídTime
 = 
	`TsEº‹Check_TwoLevñ_gëTimeUs_byByãPos
(
u32ByãPos
+188);

370 
tsHódInfo
.
°Eº‹Info
.
byãPos
 = 
u32ByãPos
;

371 
tsHódInfo
.
°Eº‹Info
.
bC¨ryFœg
 = bCarryFlag;

372 
tsHódInfo
.
°Eº‹Info
.
°¨tTime
 = startTime;

373 
tsHódInfo
.
°Eº‹Info
.
ídTime
 =ÉndTime;

374 if(
GOSTSR_FAILURE
 =
	`GosT§_A«lysisD©a_TSHódInfo
((*)
pPackëD©a
, &
tsHódInfo
))

376  
GOSTSR_FAILURE
;

379 if(
GOSTSR_FAILURE
 =
	`GosT§_A«lysisD©a_Ad≠èti⁄Info
(&
tsHódInfo
, (*)(&
pPackëD©a
[
TS_HEAD_LENGTH
]), &
ad≠tInfo
))

381  
GOSTSR_FAILURE
;

384 i‡(
GOSTSR_FAILURE
 =
	`GosT§_A«lysisD©a_PSI
((*)
pPackëD©a
, 
tsHódInfo
))

386 i‡(
GOSTSR_FAILURE
 =
	`GosT§_A«lysisD©a_SI
((*)
pPackëD©a
, 
tsHódInfo
))

388 
	`GosT§_A«lysisD©a_PESInfo
(&
tsHódInfo
,(*)
pPackëD©a
, &
≥sInfo
);

392  
GOSTSR_SUCCESS
;

393 
	}
}

395 
GOSTSR_S32
 
	$TsP¨£_Api_RódSèticTs
(*
pfûï©h
, *
bôøã
)

397 
FILE
 *
sFp
 = 
GOSTSR_NULL
;

398 
GOSTSR_U32
 
fûeLí
 = 0;

399 
GOSTSR_U32
 
u32ByãPos
 = 0;

400 
GOSTSR_U32
 
i
 = 0;

401 
GOSTSR_U32
 
off£tPos
 = 0;

402 
GOSTSR_U32
 
∑ckageLí
 = 0;

403 
GOSTSR_U8
 
off£tPos_C¨ry
 = 0;

404 
GOSTSR_U8
 
chr
 = '\0';

405 
GOSTSR_U8
 *
tsD©a
 = 
GOSTSR_NULL
;

406 
GOSTSR_BOOL
 
ídSèã
 = 
GOSTSR_TRUE
;

407 
GOSTSR_U32
 
curSyncOff£t
 = 0;

408 
GOSTSR_U32
 
outSyncOff£t
 = 0;

409 
GOSTSR_U32
 
tmpSyncOff£t
 = 0;

410 
GOSTSR_U32
 
tmpSyncOff£tbak
 = 0;

411 
GOSTSR_BOOL
 
bC¨ryFœg
 = 
GOSTSR_FALSE
;

413 i‡((
GOSTSR_NULL
 =
pfûï©h
Ë|| (GOSTSR_NULL =
bôøã
))

415 
	`¥ötf
("Ñëu∫ faûuª %d \n", 
__LINE__
);

416  
GOSTSR_FAILURE
;

419 if(
GOSTSR_FAILURE
 =
	`GosT§_A«lysisD©a_PackëTy≥
(&
∑ckageLí
,
pfûï©h
))

421 
	`¥ötf
("ªtu∫ faûuª %d \n", 
__LINE__
);

422  
GOSTSR_FAILURE
;

424 
sFp
 = 
	`f›í
(
pfûï©h
, "rb");

425 i‡(
GOSTSR_NULL
 =
sFp
)

427 
	`¥ötf
("Ñëu∫ faûuª %d \n", 
__LINE__
);

428  
GOSTSR_FAILURE
;

431 
tsD©a
 = (
GOSTSR_U8
 *)
	`mÆloc
(
∑ckageLí
);

432 i‡(
GOSTSR_NULL
 =
tsD©a
)

434 
	`f˛o£
(
sFp
);

435 
sFp
 = 
GOSTSR_NULL
;

436 
	`¥ötf
("Ñëu∫ faûuª %d \n", 
__LINE__
);

437  
GOSTSR_FAILURE
;

440 
	`f£ek
(
sFp
, 0, 
SEEK_END
);

441 
fûeLí
 = 
	`·ñl
(
sFp
);

442 
	`f£ek
(
sFp
, 0, 
SEEK_SET
);

443 
	`¥ötf
("______ TS Fûêsizê%dM,ÖackageLí:%d_____\n",
fûeLí
 / 1024 /1024, 
∑ckageLí
);

445 
coun_Lí
 = 0;

446 
ídSèã
)

448 
off£tPos
 = 
	`·ñl
(
sFp
);

451 
	`f£ek
(
sFp
, 
off£tPos
, 
SEEK_SET
);

452 
chr
 = 
	`fgëc
(
sFp
);

453 
off£tPos
++;

454 if(
off£tPos
 >
TWOLEVEL_BYTEPOS_MAX
)

456 
off£tPos_C¨ry
++;

457 
off£tPos
 = 0;

458 
bC¨ryFœg
 = 
GOSTSR_TRUE
;

461 i‡(
off£tPos_C¨ry
*
TWOLEVEL_BYTEPOS_MAX
+
off£tPos
 >(
fûeLí
 - 1))

463 
ídSèã
 = 
GOSTSR_FALSE
;

466 }
chr
 !
SYNC_BYTE
);

468 i‡(
chr
 =
SYNC_BYTE
)

470 
off£tPos
 = offsetPos - 1;

471 
curSyncOff£t
 = 
off£tPos
;

472 
	`f£ek
(
sFp
, 
off£tPos
, 
SEEK_SET
);

474 
i
 = 0;i < 5;i++)

476 if(
	`‰ód
(
tsD©a
, 1, 
∑ckageLí
, 
sFp
) <ÖackageLen)

478 
ídSèã
 = 
GOSTSR_FALSE
;

482 if(
tsD©a
[0] !
SYNC_BYTE
)

488 if(
i
 != 5)

490 
	`f£ek
(
sFp
, 
curSyncOff£t
 + 1, 
SEEK_SET
);

495 if((
curSyncOff£t
 > 
outSyncOff£t
) && outSyncOffset != 0)

497 
tmpSyncOff£t
 = 
outSyncOff£t
;

498 if((
curSyncOff£t
 - 
outSyncOff£t
Ë> 
∑ckageLí
)

500 
tmpSyncOff£t
 <
curSyncOff£t
)

504 
	`f£ek
(
sFp
, 
tmpSyncOff£t
, 
SEEK_SET
);

505 
chr
 = 
	`fgëc
(
sFp
);

506 
tmpSyncOff£t
++;

508 if(
tmpSyncOff£t
 > 
curSyncOff£t
)

510 }
chr
 !
SYNC_BYTE
);

512 if(
chr
 =
SYNC_BYTE
)

514 
tmpSyncOff£t
 -= 1;

515 if(
tmpSyncOff£t
 + 
∑ckageLí
 < 
curSyncOff£t
)

517 
	`f£ek
(
sFp
, 
tmpSyncOff£t
 + 
∑ckageLí
, 
SEEK_SET
);

518 
chr
 = 
	`fgëc
(
sFp
);

519 if(
chr
 =
SYNC_BYTE
)

521 
tmpSyncOff£tbak
 = 
tmpSyncOff£t
;

522 
tmpSyncOff£t
 +
∑ckageLí
;

526 
tmpSyncOff£t
++;

538 
	`f£ek
(
sFp
, 
curSyncOff£t
, 
SEEK_SET
);

541 
off£tPos
 = 
	`·ñl
(
sFp
);

542 if(
	`‰ód
(
tsD©a
, 1, 
∑ckageLí
, 
sFp
) <ÖackageLen)

544 
ídSèã
 = 
GOSTSR_FALSE
;

547 if(
tsD©a
[0] =
SYNC_BYTE
)

549 
u32ByãPos
 = 
off£tPos
;

551 
	`t•¨£_≠i_™Æysi•ackë
(
bC¨ryFœg
,
u32ByãPos
,
tsD©a
, 
∑ckageLí
);

553 
coun_Lí
 +
∑ckageLí
;

554 if(
coun_Lí
 >= 10*1024*1024)

556 
coun_Lí
 = 0;

557 
LOOP_FILE_END
;

560 if(
bC¨ryFœg
)

562 
bC¨ryFœg
 = 
GOSTSR_FALSE
;

564 
gPackëNumbî
++;

565 if(
gPackëNumbî
 >
TWOLEVEL_BYTEPOS_MAX
)

567 
gPackëNumbî
 = 0;

572 
outSyncOff£t
 = 
off£tPos
;

573 
	`f£ek
(
sFp
, 
outSyncOff£t
, 
SEEK_SET
);

581 
LOOP_FILE_END
:

582 
	`‰ì
(
tsD©a
);

583 
tsD©a
 = 
GOSTSR_NULL
;

585 i‡(
GOSTSR_SUCCESS
 !
	`f˛o£
(
sFp
))

587  
GOSTSR_FAILURE
;

589 
sFp
 = 
GOSTSR_NULL
;

591 *
bôøã
 = 
	`TsEº‹Check_TwoLevñ_gëAvTøn•‹tR©e
();

592 if(*
bôøã
 == 0)

594  
GOSTSR_FAILURE
;

597  
GOSTSR_SUCCESS
;

598 
	}
}

600 
GOSTSR_S32
 
	$TsP¨£_Api_Thªadpoﬁ_AddTask
(*
pfûï©h
, 
bô_øã
, 
¥Ÿocﬁ
, 
p‹t
, *
∑ddr
)

602 
GOSTSR_S32
 
i
 = 0;

603 
GOSTSR_S32
 
ªt
 = -1;

605 if((
GOSTSR_NULL
 =
pfûï©h
Ë|| (GOSTSR_NULL =
∑ddr
))

607  
GOSTSR_FAILURE
;

610 
i
 = 0; i < 
MAX_THREAD_NUM
; i++)

612 if(
g°Task_P¨a
[
i
].
u£Êag
 == 0)

617 if(
i
 =
MAX_THREAD_NUM
)

619  
GOSTSR_FAILURE
;

622 
	`mem£t
(&
g°Task_P¨a
[
i
], 0, (gstTask_Para[i]));

624 
g°Task_P¨a
[
i
].
bôøã
 = 
bô_øã
;

625 
g°Task_P¨a
[
i
].
p‹t
 =Öort;

626 
g°Task_P¨a
[
i
].
¥Ÿocﬁ
 =Örotocol;

627 
	`°r˝y
(
g°Task_P¨a
[
i
].
fûï©h
, 
pfûï©h
);

628 
	`°r˝y
(
g°Task_P¨a
[
i
].
addr
, 
∑ddr
);

629 
ªt
 = 
	`thªadpoﬁ_≠i_addèsk
(
t•¨£_≠i_thªadpoﬁ_ˇŒback
, (*)&
g°Task_P¨a
[
i
]);

630 if(
ªt
 != 0)

632  
GOSTSR_FAILURE
;

635 
	`u¶ìp
(500 * 1000);

637  
GOSTSR_SUCCESS
;

638 
	}
}

640 
GOSTSR_S32
 
	$TsP¨£_Api_TsP¨£Pro˚ss
(
TSPARSE_API_INFO_t
 *
t•¨£_öfo
)

642 if(
GOSTSR_NULL
 =
t•¨£_öfo
)

644  
GOSTSR_FAILURE
;

647 
ödex
 = 0;

648 
	`¥ötf
("=============================\n");

649 
ödex
 = 0; index < 5; index++)

651 
	`¥ötf
("ödex: %d\n", 
ödex
);

652 
	`¥ötf
("FûeName: %s\n", 
t•¨£_öfo
->
unô_öfo
[
ödex
].
pfûíame
);

653 
	`¥ötf
("¥Ÿocﬁ: %d\n", 
t•¨£_öfo
->
unô_öfo
[
ödex
].
¥Ÿocﬁ
);

654 
	`¥ötf
("p‹t: %d\n", 
t•¨£_öfo
->
unô_öfo
[
ödex
].
p‹t
);

655 
	`¥ötf
("ù: %s\n", 
t•¨£_öfo
->
unô_öfo
[
ödex
].
∑ddr
);

656 
	`¥ötf
("∑ckë: %d\n", 
t•¨£_öfo
->
unô_öfo
[
ödex
].
∑ckë_num
);

657 
	`¥ötf
("°©e: %d\n\n", 
t•¨£_öfo
->
unô_öfo
[
ödex
].
°©e
);

659 
	`¥ötf
("=============================\n");

662 
GOSTSR_S32
 
i
 = 0;

663 
bôøã
[
MAX_THREAD_NUM
];

664 
fûï©h
[
MAX_THREAD_NUM
][256];

665 
DEV_ATTRIBUTE
 
°UdeskDevAâr
;

667 if(
	`USB_GëDiskP¨tNum
() == 1)

669 if(
	`USB_GëAâribuã
(0, &
°UdeskDevAâr
, 0Ë!
GOSTSR_SUCCESS
)

671 
	`DEBUG_ERROR
("USB_GetAttribute failed\n");

672  
GOSTSR_FAILURE
;

675 *
∑th
 = 
°UdeskDevAâr
.
mou¡_«me
;

677 
	`mem£t
(&
g°_bôøã
, 0, (gst_bitrate));

679 
i
 = 0; i < 
MAX_THREAD_NUM
; i++)

681 if((
t•¨£_öfo
->
unô_öfo
[
i
].
°©e
 =0Ë|| (
	`°rcmp
—•¨£_öfo->unô_öfo[i].
pfûíame
, "0") == 0))

686 
bôøã
[
i
] = 0;

687 
	`mem£t
(
fûï©h
[
i
], 0, (filepath[i]));

689 
	`•rötf
(
fûï©h
[
i
], "%s/%s", 
∑th
, 
t•¨£_öfo
->
unô_öfo
[i].
pfûíame
);

691 
	`TsP¨£_Api_ResInô
();

693 if(
GOSTSR_SUCCESS
 !
	`TsP¨£_Api_RódSèticTs
(
fûï©h
[
i
], &
bôøã
[i]))

695 
	`DEBUG_ERROR
("P¨£ fûe[%s] faûed,Çum:%d\n", 
fûï©h
[
i
], i);

698 
g°_bôøã
.
bôøã
[
i
] = bitrate[i];

700 
	`DEBUG_INFO
("fûíame[%d] = %s--bô_øã:%.2f\n", 
i
, 
fûï©h
[i], ()
bôøã
[i]/1000/1000);

703 
	`TsP¨£_Api_DeInô
();

705 
gb_°¨tÊag
 = 
GOSTSR_TRUE
;

706 
i
 = 0; i < 
MAX_THREAD_NUM
; i++)

708 if((
t•¨£_öfo
->
unô_öfo
[
i
].
°©e
 =0Ë|| (
	`°rcmp
—•¨£_öfo->unô_öfo[i].
pfûíame
, "0") == 0))

712 if(
GOSTSR_SUCCESS
 !
	`TsP¨£_Api_Thªadpoﬁ_AddTask
(
fûï©h
[
i
], 
bôøã
[i], 
t•¨£_öfo
->
unô_öfo
[i].
¥Ÿocﬁ
,

713 
t•¨£_öfo
->
unô_öfo
[
i
].
p‹t
,Å•¨£_öfo->unô_öfo[i].
∑ddr
))

715 
	`DEBUG_ERROR
("addÅask faûed, fûe[%s],Çum:%d\n", 
fûï©h
[
i
], i);

720 
t•¨£_öfo
->
chù_°©e
 = 1;

721 
	`TsP¨£_Fûe_Wrôe_TsInfoFûe
((*)
t•¨£_öfo
);

723  
GOSTSR_SUCCESS
;

724 
	}
}

726 
GOSTSR_S32
 
	$TsP¨£_Api_Gë_TsInfo
(
TSPARSE_API_INFO_t
 *
t•¨£_öfo
)

728 
DIR
 *
dp
 ;

729 
dúít
 *
dúp
 ;

730 
GOSTSR_U8
 
fú°Êag
 = 0;

731 
GOSTSR_U32
 
fûñí
 = 0;

732 
DEV_ATTRIBUTE
 
°UdeskDevAâr
;

734 if((
t•¨£_öfo
 =
GOSTSR_NULL
))

736  
GOSTSR_FAILURE
;

739 
	`TsP¨£_Fûe_Ród_TsInfoFûe
(
t•¨£_öfo
);

741 
time_cou¡
 = 0;

744 if((
	`USB_GëDiskP¨tNum
(Ë> 0Ë|| (
time_cou¡
 > 100))

749 
	`u¶ìp
(50*1000);

750 
time_cou¡
++;

753 if(
	`USB_GëDiskP¨tNum
() != 1)

755 
	`DEBUG_ERROR
("USB_GetDiskPartNum failed\n");

756  
GOSTSR_FAILURE
;

759 if(
	`USB_GëAâribuã
(0, &
°UdeskDevAâr
, 0Ë!
GOSTSR_SUCCESS
)

761 
	`DEBUG_ERROR
("USB_GetAttribute failed\n");

762  
GOSTSR_FAILURE
;

765 
	`DEBUG_INFO
("Mou¡ Namêis: %s\n", 
°UdeskDevAâr
.
mou¡_«me
);

768 if((
dp
 = 
	`›ídú
(
°UdeskDevAâr
.
mou¡_«me
)Ë=
NULL
)

770 
	`≥º‹
("opendir");

771  
GOSTSR_FAILURE
;

774 (
dúp
 = 
	`ªaddú
(
dp
)Ë!
NULL
)

776 if(
	`°rcmp
(
dúp
->
d_«me
,".")==0 || strcmp(dirp->d_name,"..") == 0)

781 
size
 = 
	`°æí
(
dúp
->
d_«me
);

782 if(
size
 < 3)

786 if(
	`°rcmp
((
dúp
->
d_«me
 + (
size
 - 3)) , ".ts") == 0)

788 if(
fûñí
 >= 4*1024)

792 if(0 !
fú°Êag
)

794 
	`°rˇt
(
t•¨£_öfo
->
pfûíame
, "-");

797 
	`°rˇt
(
t•¨£_öfo
->
pfûíame
, 
dúp
->
d_«me
);

798 
fûñí
 +
	`°æí
(
dúp
->
d_«me
);

799 
fú°Êag
 = 1;

802 
	`˛o£dú
(
dp
);

804  
GOSTSR_SUCCESS
;

805 
	}
}

807 
GOSTSR_S32
 
	$TsP¨£_Api_Gë_Bôøã
(
GOS_SVC_TsP¨£_BôR©e_t
 *
°bôøã
)

809 if(
°bôøã
 =
GOSTSR_NULL
)

811  
GOSTSR_FAILURE
;

814 
	`mem˝y
(
°bôøã
->
bôøã
, 
g°_bôøã
.bitrate, (gst_bitrate.bitrate));

816 
i
 = 0;

817 
i
 = 0; i < 
MAX_TASK_PERCHIP
; i++)

819 
°bôøã
->
tŸÆ_bôøã
 +°bôøã->
bôøã
[
i
];

824  
GOSTSR_SUCCESS
;

825 
	}
}

827 
GOSTSR_S32
 
	$TsP¨£_Api_Re°¨t
()

829 
TSPARSE_API_INFO_t
 
t•¨£_öfo
;

831 
time_cou¡
 = 0;

834 if((
	`USB_GëDiskP¨tNum
(Ë> 0Ë|| (
time_cou¡
 > 100))

839 
	`u¶ìp
(50*1000);

840 
time_cou¡
++;

843 
	`TsP¨£_Fûe_Ród_TsInfoFûe
((*)&
t•¨£_öfo
);

844 if(
t•¨£_öfo
.
chù_°©e
 == 1)

846 
	`TsP¨£_Api_TsP¨£Pro˚ss
(&
t•¨£_öfo
);

849  
GOSTSR_SUCCESS
;

850 
	}
}

852 
GOSTSR_S32
 
	$TsP¨£_Api_St›Síd
()

854 
gb_°¨tÊag
 = 
GOSTSR_FALSE
;

856 
TSPARSE_API_INFO_t
 
t•¨£_öfo
;

858 
	`TsP¨£_Fûe_Ród_TsInfoFûe
((*)&
t•¨£_öfo
);

859 
t•¨£_öfo
.
chù_°©e
 = 1;

860 
	`TsP¨£_Fûe_Wrôe_TsInfoFûe
((*)&
t•¨£_öfo
);

862  
GOSTSR_SUCCESS
;

863 
	}
}

865 
GOSTSR_S32
 
	$TsP¨£_Api_Inô
()

867 
	`mem£t
(&
g°Task_P¨a
, 0, (gstTask_Para));

868 
	`mem£t
(&
g°sockë
, 0, (gstsocket));

869 
	`mem£t
(&
g°_bôøã
, 0, (gst_bitrate));

871 
	`GosT§_A«lysisD©a_TsEnvInô
();

872 
	`GosT§_A«lysisD©a_CRCInô
();

873 
	`TsP¨£_Upd©e_ProgSórch_Inô
();

875 
	`TsEº‹Check_O√Levñ_Inô
();

876 
	`TsEº‹Check_TwoLevñ_Inô
();

877 
	`TsEº‹Check_ThªeLevñ_Inô
();

879 
	`udp_mu…iˇ°_öô
();

880 
	`udp_uniˇ°_öô
();

881 
	`πp_uniˇ°_öô
();

882 
	`πp_mu…iˇ°_öô
();

883 
	`thªadpoﬁ_≠i_¸óã
(
MAX_THREAD_NUM
);

885  
GOSTSR_SUCCESS
;

886 
	}
}

888 
GOSTSR_S32
 
	$TsP¨£_Api_DeInô
()

890 
	`GosT§_A«lysisD©a_TsEnvDeInô
();

891 
	`TsP¨£_Upd©e_ProgSórch_DeInô
();

893 
	`TsEº‹Check_O√Levñ_DeInô
();

894 
	`TsEº‹Check_TwoLevñ_DeInô
();

895 
	`TsEº‹Check_ThªeLevñ_DeInô
();

897  
GOSTSR_SUCCESS
;

898 
	}
}

900 
GOSTSR_S32
 
	$TsP¨£_Api_ResInô
()

902 
	`GosT§_A«lysisD©a_TsEnvDeInô
();

903 
	`TsP¨£_Upd©e_ProgSórch_DeInô
();

905 
	`TsEº‹Check_O√Levñ_DeInô
();

906 
	`TsEº‹Check_TwoLevñ_DeInô
();

907 
	`TsEº‹Check_ThªeLevñ_DeInô
();

909 
	`GosT§_A«lysisD©a_TsEnvInô
();

910 
	`GosT§_A«lysisD©a_CRCInô
();

911 
	`TsP¨£_Upd©e_ProgSórch_Inô
();

913 
	`TsEº‹Check_O√Levñ_Inô
();

914 
	`TsEº‹Check_TwoLevñ_Inô
();

915 
	`TsEº‹Check_ThªeLevñ_Inô
();

917  
GOSTSR_SUCCESS
;

918 
	}
}

	@porting/src/tsparse/tsparse_file.c

1 
	~"GosT§_A«lysisD©a.h
"

2 
	~"GosT§_Des¸ùt‹.h
"

4 
	~"TsEº‹Check_O√Levñ.h
"

5 
	~"TsEº‹Check_TwoLevñ.h
"

6 
	~"TsEº‹Check_ThªeLevñ.h
"

8 
	~"t•¨£_≠i.h
"

9 
	~"t•¨£_fûe.h
"

11 
	#TSPARSE_PARAMETER_PATH
 "/home/d©a/t•¨£_∑ø.db"

	)

13 
GOSTSR_S32
 
	$TsP¨£_Fûe_Wrôe_TsInfoFûe
(*
pP¨am
)

15 
FILE
 *
Â
 = 
NULL
;

16 
TSPARSE_API_INFO_t
 *
tsP¨am
 = (TSPARSE_API_INFO_à*)
pP¨am
;

18 i‡(
GOSTSR_NULL
 =
tsP¨am
)

20  
GOSTSR_FAILURE
;

23 
Â
 = 
	`f›í
(
TSPARSE_PARAMETER_PATH
, "wb+");

24 i‡(
GOSTSR_NULL
 =
Â
)

26 
	`¥ötf
("›í %†Áûuª!\n", 
TSPARSE_PARAMETER_PATH
);

27  
GOSTSR_FAILURE
;

30 
	`f£ek
(
Â
, 0, 
SEEK_SET
);

32 i‡(1 !
	`fwrôe
((*)
tsP¨am
, (
TSPARSE_API_INFO_t
), 1, 
Â
))

34 
	`¥ötf
("write failed!\n");

35 
	`f˛o£
(
Â
);

36 
Â
 = 
GOSTSR_NULL
;

37  
GOSTSR_FAILURE
;

40 
	`f˛o£
(
Â
);

41 
Â
 = 
GOSTSR_NULL
;

43  
GOSTSR_SUCCESS
;

44 
	}
}

46 
GOSTSR_S32
 
	$TsP¨£_Fûe_Ród_TsInfoFûe
(*
pP¨am
)

48 
FILE
 *
Â
 = 
GOSTSR_NULL
;

49 
GOSTSR_S32
 
ödex
 = 0;

50 
TSPARSE_API_INFO_t
 *
tsP¨am
 = (TSPARSE_API_INFO_à*)
pP¨am
;

52 i‡(
GOSTSR_NULL
 =
tsP¨am
)

54  
GOSTSR_FAILURE
;

57 
Â
 = 
	`f›í
(
TSPARSE_PARAMETER_PATH
, "rb+");

58 i‡(
GOSTSR_NULL
 =
Â
)

60 
	`mem£t
(
tsP¨am
->
unô_öfo
, 0x00, (tsParam->unit_info));

61 
tsP¨am
->
∑ckë_num
 = 7;

62 
ödex
 = 0; index < 5; index++)

64 
tsP¨am
->
unô_öfo
[
ödex
].
°©e
 = 0;

65 
tsP¨am
->
unô_öfo
[
ödex
].
¥Ÿocﬁ
 = 0;

66 
tsP¨am
->
unô_öfo
[
ödex
].
p‹t
 = 5000;

67 
	`•rötf
(
tsP¨am
->
unô_öfo
[
ödex
].
∑ddr
, "224.10.10.%d", index+1);

70 
	`TsP¨£_Fûe_Wrôe_TsInfoFûe
((*)
tsP¨am
);

75 
	`mem£t
(
tsP¨am
->
unô_öfo
, 0x00, (tsParam->unit_info));

76 i‡(1 !
	`‰ód
((*)
tsP¨am
, (
TSPARSE_API_INFO_t
), 1, 
Â
))

78 
	`¥ötf
("read failed\n!");

79 
	`f˛o£
(
Â
);

80 
Â
 = 
GOSTSR_NULL
;

81  
GOSTSR_FAILURE
;

84 
	`f˛o£
(
Â
);

85 
Â
 = 
GOSTSR_NULL
;

87  
GOSTSR_SUCCESS
;

88 
	}
}

	@porting/src/tsparse/tsparse_search.c

1 
	~"GosT§_A«lysisD©a.h
"

2 
	~"GosT§_Des¸ùt‹.h
"

4 
	~"TsEº‹Check_O√Levñ.h
"

5 
	~"TsEº‹Check_TwoLevñ.h
"

6 
	~"TsEº‹Check_ThªeLevñ.h
"

8 
	~"t•¨£_£¨ch.h
"

10 
TS_PACKAGE_INFO
 *
	gSórchPackageHód
[
TABLE_NUMBER
] = {
GOSTSR_NULL
};

11 
GOSTSR_PSISI_PAT_S
 
	gg°SórchP©Info
;

12 
SEARCH_INFO_S
 
	gg°SórchProgInfo
;

15 
GOSTSR_BOOL
 
	gbHadSórched
 = 
GOSTSR_FALSE
;

16 
GOSTSR_U16
 
	ggu16SórchCou¡
 = 0;

18 
GOSTSR_S32
 
	$TsP¨£_Sórch_TsEº‹Check_£tPid
(
SEARCH_INFO_S
 *
p°ProgInfo
)

20 
	`TsEº‹Check_O√Levñ_£tPid
(
p°ProgInfo
);

21 
	`TsEº‹Check_TwoLevñ_£tPid
(
p°ProgInfo
);

22 
	`TsEº‹Check_ThªeLevñ_£tPid
(
p°ProgInfo
);

23  
GOSTSR_SUCCESS
;

24 
	}
}

26 
GOSTSR_S32
 
	$TsP¨£_Sórch_gëProgInfo
(
SEARCH_INFO_S
 *
p°ProgInfo
)

28 if((
GOSTSR_NULL
 =
p°ProgInfo
))

30  
GOSTSR_FAILURE
;

32 
	`mem˝y
(
p°ProgInfo
, &
g°SórchProgInfo
, (
SEARCH_INFO_S
));

33  
GOSTSR_SUCCESS
;

34 
	}
}

36 
GOSTSR_S32
 
	$TsP¨£_Sórch_St‹eProg_byP©
(
GOSTSR_PSISI_PAT_S
 *
∑tInfo
)

38 
GOSTSR_S32
 
i
 = 0;

39 
GOSTSR_U32
 
ödex
 = 0;

41 if((
GOSTSR_NULL
 =
∑tInfo
))

43  
GOSTSR_FAILURE
;

46 
i
 = 0; i < 
∑tInfo
->
u16NbEÀmíts
; i++)

48 if((
NIT_PID
 =
∑tInfo
->
a°EÀmít
[
i
].
u16Pid
) || (patInfo->astElement[i].u16Pid == 0))

52 
g°SórchProgInfo
.
°ProgInfo
[
ödex
++].
PmtPid
 = 
∑tInfo
->
a°EÀmít
[
i
].
u16Pid
;

54 
g°SórchProgInfo
.
u16NbProg
 = 
ödex
;

56  
GOSTSR_SUCCESS
;

57 
	}
}

59 
GOSTSR_S32
 
	$TsP¨£_Sórch_St‹eProg_byPmt
(
GOSTSR_U16
 
Pmt_pid
, 
GOSTSR_PSISI_PMT_S
 *
pmtInfo
)

61 
GOSTSR_S32
 
i
 = 0, 
j
 = 0;

63 if((
GOSTSR_NULL
 =
pmtInfo
))

65  
GOSTSR_FAILURE
;

68 
i
 = 0; i < 
g°SórchProgInfo
.
u16NbProg
; i++)

70 if((
g°SórchProgInfo
.
°ProgInfo
[
i
].
PmtPid
 =
Pmt_pid
Ë&& (g°SórchProgInfo.°ProgInfo[i].
bU£d
))

74 if((
g°SórchProgInfo
.
°ProgInfo
[
i
].
PmtPid
 =
Pmt_pid
Ë&& (!g°SórchProgInfo.°ProgInfo[i].
bU£d
))

76 
g°SórchProgInfo
.
°ProgInfo
[
i
].
bU£d
 = 
GOSTSR_TRUE
;

77 
g°SórchProgInfo
.
°ProgInfo
[
i
].
P¸Pid
 = 
pmtInfo
->
u16P¸Pid
;

78 
g°SórchProgInfo
.
°ProgInfo
[
i
].
u8NbPes
 = 
pmtInfo
->
u16NbEÀmíts
;

79 
j
 = 0; j < 
pmtInfo
->
u16NbEÀmíts
; j++)

81 
g°SórchProgInfo
.
°ProgInfo
[
i
].
PesPid
[
j
] = 
pmtInfo
->
a°EÀmít
[j].
u16Pid
;

84 
gu16SórchCou¡
++;

85 if(
gu16SórchCou¡
 =
g°SórchProgInfo
.
u16NbProg
)

87 
	`¥ötf
("Sórch ProgÇum = %d\n",
gu16SórchCou¡
);

89 
	`TsP¨£_Sórch_TsEº‹Check_£tPid
(&
g°SórchProgInfo
);

90 
bHadSórched
 = 
GOSTSR_TRUE
;

96  
GOSTSR_SUCCESS
;

97 
	}
}

99 
GOSTSR_S32
 
	$TsP¨£_Sórch_St‹eProg_byC©
(
GOSTSR_PSISI_CAT_S
 *
ˇtInfo
)

101 
GOSTSR_S32
 
i
 = 0;

102 
GOSTSR_U8
 
ödex
 = 0;

103 
GOS_DESC_CA_S
 
ˇDesInfo
;

105 if((
GOSTSR_NULL
 =
ˇtInfo
))

107  
GOSTSR_FAILURE
;

110 
i
 = 0;ò< 
ˇtInfo
->
u16NbDes¸ùt‹s
; i++)

112 i‡(
GOSTSR_SUCCESS
 =
	`GosT§_Des¸ùt‹_CA
(&
ˇtInfo
->
a°Des¸ùt‹
[
i
], &
ˇDesInfo
))

114 
g°SórchProgInfo
.
°CaInfo
[
ödex
++].
CaPid
 = 
ˇDesInfo
.
u16CaPId
;

117 
g°SórchProgInfo
.
u16NbCa
 = 
ödex
;

119  
GOSTSR_SUCCESS
;

120 
	}
}

122 
GOSTSR_S32
 
	$TsP¨£_Sórch_P¨£Se˘i⁄
(
GOSTSR_U8
 
èbÀID
,
TS_SECTION_INFO
 *
curSe˘i⁄Info
)

124 if((
GOSTSR_NULL
 =
curSe˘i⁄Info
))

126  
GOSTSR_FAILURE
;

128 
èbÀID
)

130 
PAT_TABLE_ID
:

133 
GOSTSR_PSISI_PAT_S
 
∑tInfo
;

134 
	`GosT§_A«lysisD©a_PAT
(
curSe˘i⁄Info
, &
∑tInfo
);

135 
	`mem˝y
(&
g°SórchP©Info
, &
∑tInfo
, (
GOSTSR_PSISI_PAT_S
));

136 
	`TsP¨£_Sórch_St‹eProg_byP©
(&
∑tInfo
);

139 
PMT_TABLE_ID
:

142 
GOSTSR_PSISI_PMT_S
 
pmtInfo
;

143 
	`GosT§_A«lysisD©a_PMT
(
curSe˘i⁄Info
, &
pmtInfo
);

144 
	`TsP¨£_Sórch_St‹eProg_byPmt
(
curSe˘i⁄Info
->
PID
,&
pmtInfo
);

147 
CAT_TABLE_ID
:

149 
GOSTSR_PSISI_CAT_S
 
ˇtInfo
;

150 
	`GosT§_A«lysisD©a_CAT
(
curSe˘i⁄Info
, &
ˇtInfo
);

151 
	`TsP¨£_Sórch_St‹eProg_byC©
(&
ˇtInfo
);

157  
GOSTSR_SUCCESS
;

158 
	}
}

160 
GOSTSR_S32
 
	$TsP¨£_Sórch_LökPackage
(
GOSTSR_U8
 
èbÀID
, 
TS_PACKAGE_INFO
 *
PackageHód_Temp
, GOSTSR_U8 
œ°D©aLí
, GOSTSR_U8 *
œ°D©a
)

162 
GOSTSR_U8
 *
pSe˘i⁄D©a
 = 
GOSTSR_NULL
;

163 
GOSTSR_U16
 
curSe˘i⁄Lígth
 = 0;

164 
GOSTSR_U16
 
ÆlSe˘i⁄Lígth
 = 0;

165 
TS_SECTION_INFO
 *
curSe˘i⁄Info
 = 
GOSTSR_NULL
;

166 
TS_PACKAGE_INFO
 *
pCurPackage
 = 
GOSTSR_NULL
;

168 if((
GOSTSR_NULL
 =
PackageHód_Temp
Ë|| (GOSTSR_NULL =
œ°D©a
))

170  
GOSTSR_FAILURE
;

173 
pCurPackage
 = 
PackageHód_Temp
;

174 
GOSTSR_NULL
 !
pCurPackage
)

176 
ÆlSe˘i⁄Lígth
 +
pCurPackage
->
∑ckageLí
;

177 
pCurPackage
 =ÖCurPackage->
√xt
;

180 
curSe˘i⁄Lígth
 = 
ÆlSe˘i⁄Lígth
;

181 
curSe˘i⁄Lígth
 +
œ°D©aLí
;

183 
curSe˘i⁄Info
 = (
TS_SECTION_INFO
 *)
	`mÆloc
((TS_SECTION_INFO));

184 if(
GOSTSR_NULL
 =
curSe˘i⁄Info
)

186  
GOSTSR_FAILURE
;

188 
curSe˘i⁄Info
->
£˘i⁄Lígth
 = 
curSe˘i⁄Lígth
;

189 
curSe˘i⁄Info
->
PID
 = 
PackageHód_Temp
->PID;

190 
curSe˘i⁄Info
->
èbÀID
 = 
PackageHód_Temp
->tableID;

191 
	`mem˝y
(&
curSe˘i⁄Info
->
°Eº‹Info
,&
PackageHód_Temp
->°Eº‹Info,(
TR101290_ERROR_S
));

192 
curSe˘i⁄Info
->
£˘i⁄D©a
 = (
GOSTSR_U8
 *)
	`mÆloc
(
curSe˘i⁄Lígth
);

193 if(
GOSTSR_NULL
 =
curSe˘i⁄Info
->
£˘i⁄D©a
)

195  
GOSTSR_FAILURE
;

198 
	`mem£t
(
curSe˘i⁄Info
->
£˘i⁄D©a
, 0x00, 
curSe˘i⁄Lígth
);

199 
pSe˘i⁄D©a
 = 
curSe˘i⁄Info
->
£˘i⁄D©a
;

200 
pCurPackage
 = 
PackageHód_Temp
;

202 
GOSTSR_NULL
 !
pCurPackage
)

204 
	`mem˝y
(
pSe˘i⁄D©a
, 
pCurPackage
->
∑ckageD©a
,ÖCurPackage->
∑ckageLí
);

205 
pSe˘i⁄D©a
 +
pCurPackage
->
∑ckageLí
;

206 
pCurPackage
 =ÖCurPackage->
√xt
;

208 
	`mem˝y
(
pSe˘i⁄D©a
, 
œ°D©a
, 
œ°D©aLí
);

210 
GOSTSR_U16
 
curPos
 = 
curSe˘i⁄Info
->
£˘i⁄Lígth
 - 4;

211 
GOSTSR_U8
 *
pD©a
 = &(
curSe˘i⁄Info
->
£˘i⁄D©a
[
curPos
]);

212 
GOSTSR_U32
 
¸c32
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

213 
GOSTSR_U32
 
ˇlCrc32
 = 0;

215 
ˇlCrc32
 = 
	`GosT§_A«lysisD©a_CRCCheck
(
curSe˘i⁄Info
->
£˘i⁄D©a
, curSe˘i⁄Info->
£˘i⁄Lígth
 - 4);

216 i‡((
¸c32
 =
ˇlCrc32
Ë|| (
TDT_TABLE_ID
 =
èbÀID
))

218 
	`TsP¨£_Sórch_P¨£Se˘i⁄
(
èbÀID
,
curSe˘i⁄Info
);

221 i‡(
GOSTSR_NULL
 !
curSe˘i⁄Info
)

223 i‡(
GOSTSR_NULL
 !
curSe˘i⁄Info
->
£˘i⁄D©a
)

225 
	`‰ì
(
curSe˘i⁄Info
->
£˘i⁄D©a
);

226 
curSe˘i⁄Info
->
£˘i⁄D©a
 = 
GOSTSR_NULL
;

228 
	`‰ì
(
curSe˘i⁄Info
);

229 
curSe˘i⁄Info
 = 
GOSTSR_NULL
;

232  
GOSTSR_SUCCESS
;

233 
	}
}

235 
GOSTSR_S32
 
	$TsP¨£_Sórch_BuûdSe˘i⁄
(
GOSTSR_U8
 
èbÀID
,c⁄° *
d©a
, 
TS_HEAD_INFO
 
tsHódInfo
)

237 
GOSTSR_U8
 
£˘i⁄Fœg
 = 
GOSTSR_FALSE
;

238 
GOSTSR_U16
 
i
 = 0, 
j
 = 0;

239 
GOSTSR_U8
 *
pcurD©a
 = 
GOSTSR_NULL
;

240 
GOSTSR_U8
 
ad≠tLígth
 = 0;

241 
GOSTSR_U8
 
poötFõldLígth
 = 0;

242 
GOSTSR_U8
 
‰⁄tSe˘i⁄D©a
[256] = {0,};

243 
GOSTSR_U8
 
curTabÀID
 = 
BULT_TABLE_ID
;

244 
GOSTSR_U16
 
curTempD©a
 = 0;

245 
GOSTSR_U16
 
curSe˘i⁄Lígth
 = 0;

246 
GOSTSR_U16
 
ªmaöLí
 = 0;

247 
TS_SECTION_INFO
 *
curSe˘i⁄Info
 = 
GOSTSR_NULL
;

248 
TS_PACKAGE_INFO
 *
pCurPackage
 = 
GOSTSR_NULL
;

249 
TS_PACKAGE_INFO
 *
¥ePackage
 = 
GOSTSR_NULL
;

250 
GOSTSR_U16
 
∑ckageAŒLí
 = 0;

251 
GOSTSR_U8
 *
pSe˘i⁄D©a
 = 
GOSTSR_NULL
;

252 
GOSTSR_U16
 
ÆlSe˘i⁄Lígth
 = 0;

254 i‡(
GOSTSR_NULL
 =
d©a
)

256  
GOSTSR_FAILURE
;

259 
pcurD©a
 = (
GOSTSR_U8
 *)
d©a
;

260 
pcurD©a
 +
TS_HEAD_LENGTH
;

263 i‡(
tsHódInfo
.
ad≠ãr_c⁄åﬁ
 & 
BIT2
)

266 
ad≠tLígth
 = 
pcurD©a
[0];

267 
pcurD©a
 += 1;

270 
pcurD©a
 +
ad≠tLígth
;

274 i‡(
tsHódInfo
.
lﬂd_ödiˇãr
 =
BIT1
)

277 
poötFõldLígth
 = 
pcurD©a
[0];

278 
pcurD©a
 += 1;

281 
	`mem£t
(
‰⁄tSe˘i⁄D©a
, 0x00, (frontSectionData));

282 
	`mem˝y
(
‰⁄tSe˘i⁄D©a
, 
pcurD©a
, 
poötFõldLígth
);

283 
pcurD©a
 +
poötFõldLígth
;

286 
curTabÀID
 = 
pcurD©a
[0];

287 
pcurD©a
 += 1;

289 i‡(
curTabÀID
 !
èbÀID
)

291  
GOSTSR_FAILURE
;

295 
i
 = 0; i < 
TABLE_NUMBER
; i++)

297 i‡(
SórchPackageHód
[
i
] =
GOSTSR_NULL
)

302 i‡(
SórchPackageHód
[
i
]->
PID
 =
tsHódInfo
.
ts_pid
)

304 
ÆlSe˘i⁄Lígth
 = 0;

306 
pCurPackage
 = 
SórchPackageHód
[
i
];

307 
GOSTSR_NULL
 !
pCurPackage
)

309 
ÆlSe˘i⁄Lígth
 +
pCurPackage
->
∑ckageLí
;

310 
pCurPackage
 =ÖCurPackage->
√xt
;

313 if((
ÆlSe˘i⁄Lígth
 + 
poötFõldLígth
Ë>
SórchPackageHód
[
i
]->
£˘i⁄Lí
)

315 
	`TsP¨£_Sórch_LökPackage
(
èbÀID
,
SórchPackageHód
[
i
],
poötFõldLígth
,
‰⁄tSe˘i⁄D©a
);

318 
pCurPackage
 = 
SórchPackageHód
[
i
];

319 
pCurPackage
 !
GOSTSR_NULL
)

321 
¥ePackage
 = 
pCurPackage
;

322 
pCurPackage
 =ÖCurPackage->
√xt
;

323 
	`‰ì
(
¥ePackage
);

324 
¥ePackage
 = 
GOSTSR_NULL
;

327 
SórchPackageHód
[
i
] = 
GOSTSR_NULL
;

332 
curTempD©a
 = 
pcurD©a
[0]*256 +ÖcurData[1];

333 
curSe˘i⁄Lígth
 = 
curTempD©a
 & (~((
BIT8
 | 
BIT7
 | 
BIT6
 | 
BIT5
) * 256));

334 
pcurD©a
 += 2;

337 
pcurD©a
 -= 3;

338 
curSe˘i⁄Lígth
 += 3;

341 i‡(
tsHódInfo
.
ad≠ãr_c⁄åﬁ
 & 
BIT2
)

343 i‡(
tsHódInfo
.
∑ckageTy≥
 =
PACKAGE_188
)

345 
ªmaöLí
 = (
TS_LENGTH_188
 - 
TS_HEAD_LENGTH
 - 1 - 
ad≠tLígth
 - 1 - 
poötFõldLígth
);

349 
ªmaöLí
 = (
TS_LENGTH_204
 - 
TS_HEAD_LENGTH
 - 1 - 
ad≠tLígth
 - 1 - 
poötFõldLígth
);

354 i‡(
tsHódInfo
.
∑ckageTy≥
 =
PACKAGE_188
)

356 
ªmaöLí
 = (
TS_LENGTH_188
 - 
TS_HEAD_LENGTH
 - 1 - 
poötFõldLígth
);

360 
ªmaöLí
 = (
TS_LENGTH_204
 - 
TS_HEAD_LENGTH
 - 1 - 
poötFõldLígth
);

365 i‡(
curSe˘i⁄Lígth
 <
ªmaöLí
)

367 
curSe˘i⁄Info
 = (
TS_SECTION_INFO
 *)
	`mÆloc
((TS_SECTION_INFO));

368 
curSe˘i⁄Info
->
£˘i⁄Lígth
 = 
curSe˘i⁄Lígth
;

369 
curSe˘i⁄Info
->
èbÀID
 =ÅableID;

370 
curSe˘i⁄Info
->
PID
 = 
tsHódInfo
.
ts_pid
;

371 
curSe˘i⁄Info
->
£˘i⁄D©a
 = (
GOSTSR_U8
 *)
	`mÆloc
(
curSe˘i⁄Lígth
);

372 
	`mem£t
(
curSe˘i⁄Info
->
£˘i⁄D©a
, 0x00, 
curSe˘i⁄Lígth
);

373 
	`mem˝y
(
curSe˘i⁄Info
->
£˘i⁄D©a
, 
pcurD©a
, 
curSe˘i⁄Lígth
);

376 
£˘i⁄Fœg
 = 
GOSTSR_TRUE
;

381 
i
 = 0; i < 
TABLE_NUMBER
; i++)

383 i‡(
SórchPackageHód
[
i
] =
GOSTSR_NULL
)

389 i‡(
TABLE_NUMBER
 !
i
)

391 
SórchPackageHód
[
i
] = (
TS_PACKAGE_INFO
*)
	`mÆloc
((TS_PACKAGE_INFO));

392 
SórchPackageHód
[
i
]->
√xt
 = 
GOSTSR_NULL
;

393 
SórchPackageHód
[
i
]->
∑ckageLí
 = 
ªmaöLí
;

394 
	`mem£t
(
SórchPackageHód
[
i
]->
∑ckageD©a
, 0x00, (SearchPackageHead[i]->packageData));

395 
	`mem˝y
(
SórchPackageHód
[
i
]->
∑ckageD©a
, 
pcurD©a
, 
ªmaöLí
);

396 
SórchPackageHód
[
i
]->
PID
 = 
tsHódInfo
.
ts_pid
;

397 
SórchPackageHód
[
i
]->
numbî
 = 
tsHódInfo
.
cou¡î
;

398 
SórchPackageHód
[
i
]->
£˘i⁄Lí
 = 
curSe˘i⁄Lígth
;

399 
SórchPackageHód
[
i
]->
èbÀID
 =ÅableID;

400 
	`mem˝y
(&
SórchPackageHód
[
i
]->
°Eº‹Info
,&
tsHódInfo
.°Eº‹Info,(
TR101290_ERROR_S
));

407 
i
 = 0; i < 
TABLE_NUMBER
; i++)

409 i‡(
SórchPackageHód
[
i
] =
GOSTSR_NULL
)

414 i‡(
SórchPackageHód
[
i
]->
PID
 =
tsHódInfo
.
ts_pid
)

421 i‡(
i
 =
TABLE_NUMBER
)

423  
GOSTSR_FAILURE
;

427 
∑ckageAŒLí
 = 0;

428 
pCurPackage
 = 
SórchPackageHód
[
i
];

429 
¥ePackage
 = 
SórchPackageHód
[
i
];

430 
pCurPackage
 !
GOSTSR_NULL
)

432 
∑ckageAŒLí
 +
pCurPackage
->
∑ckageLí
;

433 
¥ePackage
 = 
pCurPackage
;

434 
pCurPackage
 =ÖCurPackage->
√xt
;

438 
pCurPackage
 = (
TS_PACKAGE_INFO
*)
	`mÆloc
((TS_PACKAGE_INFO));

439 i‡(
GOSTSR_NULL
 =
pCurPackage
)

441  
GOSTSR_FAILURE
;

444 
¥ePackage
->
√xt
 = 
pCurPackage
;

445 
pCurPackage
->
√xt
 = 
GOSTSR_NULL
;

446 i‡(
tsHódInfo
.
ad≠ãr_c⁄åﬁ
 & 
BIT2
)

448 i‡(
tsHódInfo
.
∑ckageTy≥
 =
PACKAGE_188
)

450 
pCurPackage
->
∑ckageLí
 = (
TS_LENGTH_188
 - 
TS_HEAD_LENGTH
 - 1 - 
ad≠tLígth
);

454 
pCurPackage
->
∑ckageLí
 = (
TS_LENGTH_204
 - 
TS_HEAD_LENGTH
 - 1 - 
ad≠tLígth
);

459 i‡(
tsHódInfo
.
∑ckageTy≥
 =
PACKAGE_188
)

461 
pCurPackage
->
∑ckageLí
 = (
TS_LENGTH_188
 - 
TS_HEAD_LENGTH
);

465 
pCurPackage
->
∑ckageLí
 = (
TS_LENGTH_204
 - 
TS_HEAD_LENGTH
);

468 
	`mem£t
(
pCurPackage
->
∑ckageD©a
, 0x00, (pCurPackage->packageData));

469 
	`mem˝y
(
pCurPackage
->
∑ckageD©a
, 
pcurD©a
,ÖCurPackage->
∑ckageLí
);

470 
pCurPackage
->
PID
 = 
tsHódInfo
.
ts_pid
;

471 
pCurPackage
->
numbî
 = 
tsHódInfo
.
cou¡î
;

472 
pCurPackage
->
£˘i⁄Lí
 = 
SórchPackageHód
[
i
]->sectionLen;

473 
pCurPackage
->
èbÀID
 = 
SórchPackageHód
[
i
]->tableID;

476 
∑ckageAŒLí
 +
pCurPackage
->
∑ckageLí
;

478 i‡(
∑ckageAŒLí
 >
SórchPackageHód
[
i
]->
£˘i⁄Lí
)

480 
∑ckageAŒLí
 = 0;

481 
j
 = 
SórchPackageHód
[
i
]->
numbî
;

484 
∑ckageAŒLí
 < 
SórchPackageHód
[
i
]->
£˘i⁄Lí
)

486 
pCurPackage
 = 
SórchPackageHód
[
i
];

487 
pCurPackage
 !
GOSTSR_NULL
)

489 if(
pCurPackage
->
numbî
 =
j
)

491 
∑ckageAŒLí
 +
pCurPackage
->
∑ckageLí
;

492 
j
++;

494 i‡(
j
 == 16)

496 
j
 = 0;

500 
pCurPackage
 =ÖCurPackage->
√xt
;

503 i‡(
GOSTSR_NULL
 =
pCurPackage
)

510 i‡(
GOSTSR_NULL
 =
pCurPackage
)

516 
èbÀID
 = 
SórchPackageHód
[
i
]->tableID;

517 
curSe˘i⁄Lígth
 = 
SórchPackageHód
[
i
]->
£˘i⁄Lí
;

518 
curSe˘i⁄Info
 = (
TS_SECTION_INFO
 *)
	`mÆloc
((TS_SECTION_INFO));

519 
curSe˘i⁄Info
->
£˘i⁄Lígth
 = 
curSe˘i⁄Lígth
;

520 
curSe˘i⁄Info
->
PID
 = 
tsHódInfo
.
ts_pid
;

521 
curSe˘i⁄Info
->
èbÀID
 =ÅableID;

522 
curSe˘i⁄Info
->
£˘i⁄D©a
 = (
GOSTSR_U8
 *)
	`mÆloc
(
curSe˘i⁄Lígth
);

523 
	`mem£t
(
curSe˘i⁄Info
->
£˘i⁄D©a
, 0x00, 
curSe˘i⁄Lígth
);

524 
pSe˘i⁄D©a
 = 
curSe˘i⁄Info
->
£˘i⁄D©a
;

526 
∑ckageAŒLí
 = 0;

527 
∑ckageAŒLí
 < 
curSe˘i⁄Lígth
)

530 
pCurPackage
 = 
SórchPackageHód
[
i
];

531 
¥ePackage
 = 
SórchPackageHód
[
i
];

532 
j
 = 
SórchPackageHód
[
i
]->
numbî
;

534 
pCurPackage
 !
GOSTSR_NULL
)

536 if(
pCurPackage
->
numbî
 =
j
)

538 
j
++;

540 i‡(
j
 == 16)

542 
j
 = 0;

546 
¥ePackage
 = 
pCurPackage
;

547 
pCurPackage
 =ÖCurPackage->
√xt
;

550 i‡(
GOSTSR_NULL
 !
pCurPackage
)

553 i‡((
∑ckageAŒLí
 + 
pCurPackage
->
∑ckageLí
Ë> 
curSe˘i⁄Lígth
)

555 
ªmaöLí
 = 
curSe˘i⁄Lígth
 - 
∑ckageAŒLí
;

559 
ªmaöLí
 = 
pCurPackage
->
∑ckageLí
;

562 
	`mem˝y
(
pSe˘i⁄D©a
, 
pCurPackage
->
∑ckageD©a
, 
ªmaöLí
);

564 
pSe˘i⁄D©a
 +
ªmaöLí
;

565 
∑ckageAŒLí
 +
pCurPackage
->
∑ckageLí
;

568 i‡(
¥ePackage
 =
SórchPackageHód
[
i
])

570 
SórchPackageHód
[
i
] = 
¥ePackage
->
√xt
;

571 
	`‰ì
(
¥ePackage
);

572 
¥ePackage
 = 
GOSTSR_NULL
;

576 
¥ePackage
->
√xt
 = 
pCurPackage
->next;

577 
	`‰ì
(
pCurPackage
);

578 
pCurPackage
 = 
GOSTSR_NULL
;

585 
pCurPackage
 = 
SórchPackageHód
[
i
];

586 
pCurPackage
 !
GOSTSR_NULL
)

588 
¥ePackage
 = 
pCurPackage
;

589 
pCurPackage
 =ÖCurPackage->
√xt
;

590 
	`‰ì
(
¥ePackage
);

591 
¥ePackage
 = 
GOSTSR_NULL
;

593 
SórchPackageHód
[
i
] = 
GOSTSR_NULL
;

596 
£˘i⁄Fœg
 = 
GOSTSR_TRUE
;

601 i‡(
GOSTSR_TRUE
 =
£˘i⁄Fœg
)

604 
GOSTSR_U16
 
curPos
 = 
curSe˘i⁄Info
->
£˘i⁄Lígth
 - 4;

605 
GOSTSR_U8
 *
pD©a
 = &(
curSe˘i⁄Info
->
£˘i⁄D©a
[
curPos
]);

606 
GOSTSR_U32
 
¸c32
 = (
pD©a
[0]<<24) + (pData[1]<<16) + (pData[2]<<8) +ÖData[3];

607 
GOSTSR_U32
 
ˇlCrc32
 = 0;

608 
ˇlCrc32
 = 
	`GosT§_A«lysisD©a_CRCCheck
(
curSe˘i⁄Info
->
£˘i⁄D©a
, curSe˘i⁄Info->
£˘i⁄Lígth
 - 4);

610 i‡((
¸c32
 =
ˇlCrc32
Ë|| (
TDT_TABLE_ID
 =
èbÀID
))

612 
	`TsP¨£_Sórch_P¨£Se˘i⁄
(
èbÀID
,
curSe˘i⁄Info
);

617 i‡(
GOSTSR_NULL
 !
curSe˘i⁄Info
)

619 i‡(
GOSTSR_NULL
 !
curSe˘i⁄Info
->
£˘i⁄D©a
)

621 
	`‰ì
(
curSe˘i⁄Info
->
£˘i⁄D©a
);

622 
curSe˘i⁄Info
->
£˘i⁄D©a
 = 
GOSTSR_NULL
;

624 
	`‰ì
(
curSe˘i⁄Info
);

625 
curSe˘i⁄Info
 = 
GOSTSR_NULL
;

627  
GOSTSR_SUCCESS
;

628 
	}
}

630 
GOSTSR_S32
 
	$TsP¨£_Sórch_TSHódInfo
(c⁄° *
§cD©a
, 
TS_HEAD_INFO
 *
desD©a
)

632 
GOSTSR_U8
 *
curD©a
 = 
GOSTSR_NULL
;

633 
GOSTSR_U16
 
ãmpD©a
 = 0;

635 i‡((
GOSTSR_NULL
 =
§cD©a
Ë|| (GOSTSR_NULL =
desD©a
))

637  
GOSTSR_FAILURE
;

640 
curD©a
 = (
GOSTSR_U8
 *)
§cD©a
;

643 i‡(
SYNC_BYTE
 !
curD©a
[0])

645  
GOSTSR_FAILURE
;

648 
curD©a
++;

650 
desD©a
->
îr‹_ödiˇãr
 = (
curD©a
[0] & 
BIT8
) / BIT8;

653 
desD©a
->
lﬂd_ödiˇãr
 = (
curD©a
[0] & 
BIT7
) / BIT7;

658 
ãmpD©a
 = 
curD©a
[0]*256 + curData[1];

659 
desD©a
->
ts_pid
 = 
ãmpD©a
 & (~((
BIT8
 | 
BIT7
 | 
BIT6
) * 256));

661 
curD©a
 += 2;

663 
desD©a
->
s¸ambÀ_c⁄åﬁ
 = (
curD©a
[0] & (
BIT8
 | 
BIT7
)) / BIT7;

666 
desD©a
->
ad≠ãr_c⁄åﬁ
 = (
curD©a
[0] & (
BIT6
 | 
BIT5
)) / BIT5;

669 
desD©a
->
cou¡î
 = 
curD©a
[0] & (
BIT4
 | 
BIT3
 | 
BIT2
 | 
BIT1
);

671  
GOSTSR_SUCCESS
;

672 
	}
}

674 
GOSTSR_S32
 
	$TsP¨£_Sórch_A«lysisPackë
(
GOSTSR_U8
 *
pPackëD©a
, 
GOSTSR_U32
 
u32D©aLí
)

676 
GOSTSR_S32
 
s32Rë
 = 0;

677 
GOSTSR_S32
 
i
 = 0;

678 
TS_HEAD_INFO
 
tsHódInfo
;

679 
GOSTSR_U8
 *
pD©a
 = 
pPackëD©a
;

681 if(
pPackëD©a
 =
GOSTSR_NULL
)

683  
GOSTSR_FAILURE
;

686 
	`mem£t
(&
tsHódInfo
,0,(
TS_HEAD_INFO
));

687 
s32Rë
 = 
	`TsP¨£_Sórch_TSHódInfo
(
pD©a
,&
tsHódInfo
);

688 if(
s32Rë
 !
GOSTSR_SUCCESS
)

690  
GOSTSR_FAILURE
;

692 
tsHódInfo
.
ts_pid
)

694 
PAT_PID
:

695 
	`TsP¨£_Sórch_BuûdSe˘i⁄
(
PAT_TABLE_ID
, 
pD©a
, 
tsHódInfo
);

698 
CAT_PID
:

699 
	`TsP¨£_Sórch_BuûdSe˘i⁄
(
CAT_TABLE_ID
, 
pD©a
, 
tsHódInfo
);

703 
i
 = 0; i < 
g°SórchP©Info
.
u16NbEÀmíts
; i++)

705 if(
g°SórchP©Info
.
a°EÀmít
[
i
].
u16Pid
 =
tsHódInfo
.
ts_pid
)

707 
	`TsP¨£_Sórch_BuûdSe˘i⁄
(
PMT_TABLE_ID
, 
pD©a
, 
tsHódInfo
);

715  
GOSTSR_SUCCESS
;

716 
	}
}

718 
GOSTSR_S32
 
	$TsP¨£_Sórch_RódSèticTs
(*
fûeP©h
)

720 
FILE
 *
sFp
 = 
GOSTSR_NULL
;

721 
GOSTSR_U64
 
fûeLí
 = 0;

722 
GOSTSR_U64
 
off£t
 = 0;

723 
GOSTSR_U32
 
∑ckageLí
 = 0;

724 
GOSTSR_U8
 
chr
 = '\0';

725 
GOSTSR_U8
 *
tsD©a
 = 
GOSTSR_NULL
;

726 
GOSTSR_U8
 *
tsD©a_Bak
 = 
GOSTSR_NULL
;

728 i‡(
GOSTSR_NULL
 =
fûeP©h
)

730  
GOSTSR_FAILURE
;

733 if(
GOSTSR_FAILURE
 =
	`GosT§_A«lysisD©a_PackëTy≥
(&
∑ckageLí
,
fûeP©h
))

735  
GOSTSR_FAILURE
;

737 
sFp
 = 
	`f›í
(
fûeP©h
, "rb");

738 i‡(
GOSTSR_NULL
 =
sFp
)

740  
GOSTSR_FAILURE
;

743 
tsD©a
 = (
GOSTSR_U8
 *)
	`mÆloc
(
∑ckageLí
);

744 i‡(
GOSTSR_NULL
 =
tsD©a
)

746 
	`f˛o£
(
sFp
);

747 
sFp
 = 
GOSTSR_NULL
;

748  
GOSTSR_FAILURE
;

750 
tsD©a_Bak
 = (
GOSTSR_U8
 *)
	`mÆloc
(
∑ckageLí
+1);

751 i‡(
GOSTSR_NULL
 =
tsD©a_Bak
)

753 
	`f˛o£
(
sFp
);

754 
sFp
 = 
GOSTSR_NULL
;

755  
GOSTSR_FAILURE
;

758 
	`f£ek
(
sFp
, 0, 
SEEK_END
);

759 
fûeLí
 = 
	`·ñl
(
sFp
);

761 
	`f£ek
(
sFp
, 0, 
SEEK_SET
);

764 if(
bHadSórched
)

767 
off£t
 = 
	`·ñl
(
sFp
);

770 
chr
 = 
	`fgëc
(
sFp
);

771 
off£t
++;

773 i‡(
off£t
 >
fûeLí
 - 1)

778 }
chr
 !
SYNC_BYTE
);

779 i‡(
off£t
 >
fûeLí
 - 1)

783 i‡(
chr
 =
SYNC_BYTE
)

785 
off£t
 = offset - 1;

786 
	`f£ek
(
sFp
, 
off£t
, 
SEEK_SET
);

788 
	`mem£t
(
tsD©a_Bak
, 0x00, 
∑ckageLí
+1);

789 
	`‰ód
(
tsD©a_Bak
, 1, 
∑ckageLí
+1, 
sFp
);

790 if(
tsD©a_Bak
[
∑ckageLí
] !
SYNC_BYTE
)

792 
off£t
 = offset + 1;

793 
	`f£ek
(
sFp
, 
off£t
, 
SEEK_SET
);

796 
off£t
 +
∑ckageLí
;

797 
	`f£ek
(
sFp
, 
off£t
, 
SEEK_SET
);

799 
	`mem£t
(
tsD©a
, 0x00, 
∑ckageLí
);

800 
	`mem˝y
(
tsD©a
, 
tsD©a_Bak
, 
∑ckageLí
);

802 
	`TsP¨£_Sórch_A«lysisPackë
(
tsD©a
, 
∑ckageLí
);

805 
	`‰ì
(
tsD©a
);

806 
tsD©a
 = 
GOSTSR_NULL
;

807 
	`f˛o£
(
sFp
);

808 
sFp
 = 
GOSTSR_NULL
;

810  
GOSTSR_SUCCESS
;

811 
	}
}

813 
GOSTSR_S32
 
	$TsP¨£_Sórch_Inô
(*
fûeP©h
)

815 
	`mem£t
(&
g°SórchProgInfo
,0,(
SEARCH_INFO_S
));

816 
	`mem£t
(&
g°SórchP©Info
,0,(
GOSTSR_PSISI_PAT_S
));

817 
bHadSórched
 = 
GOSTSR_FALSE
;

818 
gu16SórchCou¡
 = 0;

820 
	`TsP¨£_Sórch_RódSèticTs
(
fûeP©h
);

821  
GOSTSR_SUCCESS
;

822 
	}
}

824 
GOSTSR_S32
 
	$TsP¨£_Sórch_DeInô
()

826 
	`mem£t
(&
g°SórchProgInfo
,0,(
SEARCH_INFO_S
));

827 
	`mem£t
(&
g°SórchP©Info
,0,(
GOSTSR_PSISI_PAT_S
));

828 
bHadSórched
 = 
GOSTSR_FALSE
;

829 
gu16SórchCou¡
 = 0;

831  
GOSTSR_SUCCESS
;

832 
	}
}

	@porting/src/tsparse/tsparse_update.c

1 
	~"GosT§_A«lysisD©a.h
"

2 
	~"GosT§_Des¸ùt‹.h
"

4 
	~"TsEº‹Check_O√Levñ.h
"

5 
	~"TsEº‹Check_TwoLevñ.h
"

6 
	~"TsEº‹Check_ThªeLevñ.h
"

8 
	~"t•¨£_upd©e.h
"

10 
UPDATE_INFO_S
 
	gg°Upd©eProgInfo
;

11 
GOSTSR_U16
 
	ggu16Upd©eCou¡
 = 0;

12 
GOSTSR_U8
 
	g°©icTsRegi°îIndex
 = 0;

14 
GOSTSR_S32
 
	$t•¨£_upd©e_£çid
(
UPDATE_INFO_S
 *
p°ProgInfo
)

16 
	`TsEº‹Check_O√Levñ_£tPid
(&
p°ProgInfo
->
°ProgInfo
);

17 
	`TsEº‹Check_TwoLevñ_£tPid
(&
p°ProgInfo
->
°ProgInfo
);

18 
	`TsEº‹Check_ThªeLevñ_£tPid
(&
p°ProgInfo
->
°ProgInfo
);

19  
GOSTSR_SUCCESS
;

20 
	}
}

22 
GOSTSR_S32
 
	$t•¨£_upd©e_°‹ïrog_by∑t
(
GOSTSR_PSISI_PAT_S
 *
∑tInfo
)

24 
GOSTSR_S32
 
i
 = 0;

25 
GOSTSR_U32
 
ödex
 = 0;

26 
SEARCH_INFO_S
 *
p°Upd©eProgInfo
 = &
g°Upd©eProgInfo
.
°ProgInfo
;

28 if((
GOSTSR_NULL
 =
∑tInfo
))

30  
GOSTSR_FAILURE
;

32 if((
∑tInfo
->
u8Vîsi⁄
 =
g°Upd©eProgInfo
.
u8P©Vîsi⁄
))

34  
GOSTSR_FAILURE
;

38 
g°Upd©eProgInfo
.
u8P©Vîsi⁄
 = 
∑tInfo
->
u8Vîsi⁄
;

39 
g°Upd©eProgInfo
.
bUpd©eFœg
 = 
GOSTSR_TRUE
;

41 
i
 = 0; i < 
∑tInfo
->
u16NbEÀmíts
; i++)

43 if((
NIT_PID
 =
∑tInfo
->
a°EÀmít
[
i
].
u16Pid
) || (patInfo->astElement[i].u16Pid == 0))

47 
p°Upd©eProgInfo
->
°ProgInfo
[
ödex
++].
PmtPid
 = 
∑tInfo
->
a°EÀmít
[
i
].
u16Pid
;

49 
p°Upd©eProgInfo
->
u16NbProg
 = 
ödex
;

51  
GOSTSR_SUCCESS
;

52 
	}
}

54 
GOSTSR_S32
 
	$t•¨£_upd©e_°‹ïrog_bypmt
(
GOSTSR_U16
 
Pmt_pid
, 
GOSTSR_PSISI_PMT_S
 *
pmtInfo
)

56 
GOSTSR_S32
 
i
 = 0, 
j
 = 0;

57 
SEARCH_INFO_S
 *
p°Upd©eProgInfo
 = &
g°Upd©eProgInfo
.
°ProgInfo
;

59 if((
GOSTSR_NULL
 =
pmtInfo
Ë|| (!
g°Upd©eProgInfo
.
bUpd©eFœg
))

61  
GOSTSR_FAILURE
;

64 
i
 = 0; i < 
p°Upd©eProgInfo
->
u16NbProg
; i++)

67 if((
p°Upd©eProgInfo
->
°ProgInfo
[
i
].
PmtPid
 =
Pmt_pid
Ë&& (p°Upd©eProgInfo->°ProgInfo[i].
bU£d
))

71 if((
p°Upd©eProgInfo
->
°ProgInfo
[
i
].
PmtPid
 =
Pmt_pid
Ë&& (!p°Upd©eProgInfo->°ProgInfo[i].
bU£d
))

73 
p°Upd©eProgInfo
->
°ProgInfo
[
i
].
bU£d
 = 
GOSTSR_TRUE
;

74 
p°Upd©eProgInfo
->
°ProgInfo
[
i
].
P¸Pid
 = 
pmtInfo
->
u16P¸Pid
;

75 
p°Upd©eProgInfo
->
°ProgInfo
[
i
].
u8NbPes
 = 
pmtInfo
->
u16NbEÀmíts
;

76 
j
 = 0; j < 
pmtInfo
->
u16NbEÀmíts
; j++)

78 
p°Upd©eProgInfo
->
°ProgInfo
[
i
].
PesPid
[
j
] = 
pmtInfo
->
a°EÀmít
[j].
u16Pid
;

80 
gu16Upd©eCou¡
++;

81 if(
gu16Upd©eCou¡
 =
p°Upd©eProgInfo
->
u16NbProg
)

83 
	`t•¨£_upd©e_£çid
(&
g°Upd©eProgInfo
);

85 
gu16Upd©eCou¡
 = 0;

86 
g°Upd©eProgInfo
.
bUpd©eFœg
 = 
GOSTSR_FALSE
;

87 
	`mem£t
(
p°Upd©eProgInfo
, 0 ,(
SEARCH_INFO_S
));

94  
GOSTSR_SUCCESS
;

95 
	}
}

97 
GOSTSR_S32
 
	$t•¨£_upd©e_°‹ïrog_byˇt
(
GOSTSR_PSISI_CAT_S
 *
ˇtInfo
)

99 
GOSTSR_S32
 
i
 = 0;

100 
GOSTSR_U8
 
ödex
 = 0;

101 
GOS_DESC_CA_S
 
ˇDesInfo
;

102 
SEARCH_INFO_S
 *
p°Upd©eProgInfo
 = &
g°Upd©eProgInfo
.
°ProgInfo
;

104 if((
GOSTSR_NULL
 =
ˇtInfo
Ë|| (!
g°Upd©eProgInfo
.
bUpd©eFœg
))

106  
GOSTSR_FAILURE
;

109 
i
 = 0; i < 
ˇtInfo
->
u16NbDes¸ùt‹s
; i++)

111 i‡(
GOSTSR_SUCCESS
 =
	`GosT§_Des¸ùt‹_CA
(&
ˇtInfo
->
a°Des¸ùt‹
[
i
], &
ˇDesInfo
))

113 
p°Upd©eProgInfo
->
°CaInfo
[
ödex
++].
CaPid
 = 
ˇDesInfo
.
u16CaPId
;

116 
p°Upd©eProgInfo
->
u16NbCa
 = 
ödex
;

118  
GOSTSR_SUCCESS
;

119 
	}
}

121 
	$t•¨£_upd©e_ˇŒback
(
TS_SECTION_INFO
 *
tsSe˘i⁄Info
)

123 i‡(
NULL
 =
tsSe˘i⁄Info
->
£˘i⁄D©a
)

128 
tsSe˘i⁄Info
->
èbÀID
)

130 
PAT_TABLE_ID
:

132 
GOSTSR_PSISI_PAT_S
 
∑tInfo
;

133 
	`mem£t
(&
∑tInfo
,0,(
GOSTSR_PSISI_PAT_S
));

134 
	`GosT§_A«lysisD©a_PAT
(
tsSe˘i⁄Info
, &
∑tInfo
);

135 
	`t•¨£_upd©e_°‹ïrog_by∑t
(&
∑tInfo
);

139 
CAT_TABLE_ID
:

141 
GOSTSR_PSISI_CAT_S
 
ˇtInfo
;

142 
	`mem£t
(&
ˇtInfo
,0,(
GOSTSR_PSISI_CAT_S
));

143 
	`GosT§_A«lysisD©a_CAT
(
tsSe˘i⁄Info
, &
ˇtInfo
);

144 
	`t•¨£_upd©e_°‹ïrog_byˇt
(&
ˇtInfo
);

148 
PMT_TABLE_ID
:

150 
GOSTSR_PSISI_PMT_S
 
pmtInfo
;

151 
	`mem£t
(&
pmtInfo
,0,(
GOSTSR_PSISI_PMT_S
));

152 
	`GosT§_A«lysisD©a_PMT
(
tsSe˘i⁄Info
, &
pmtInfo
);

153 
	`t•¨£_upd©e_°‹ïrog_bypmt
(
tsSe˘i⁄Info
->
PID
,&
pmtInfo
);

161 
	}
}

163 
GOSTSR_S32
 
	$TsP¨£_Upd©e_ProgSórch_Inô
()

165 
	`mem£t
(&
g°Upd©eProgInfo
,0,(
UPDATE_INFO_S
));

167 
g°Upd©eProgInfo
.
bUpd©eFœg
 = 
GOSTSR_FALSE
;

168 
g°Upd©eProgInfo
.
u8P©Vîsi⁄
 = 0xff;

170 
gu16Upd©eCou¡
 = 0;

171 
	`GosT§_A«lysisD©a_Regi°îCÆlBack
(
t•¨£_upd©e_ˇŒback
,&
°©icTsRegi°îIndex
);

173  
GOSTSR_SUCCESS
;

174 
	}
}

176 
GOSTSR_S32
 
	$TsP¨£_Upd©e_ProgSórch_DeInô
()

178 
	`mem£t
(&
g°Upd©eProgInfo
,0,(
UPDATE_INFO_S
));

180 
g°Upd©eProgInfo
.
bUpd©eFœg
 = 
GOSTSR_FALSE
;

181 
g°Upd©eProgInfo
.
u8P©Vîsi⁄
 = 0xff;

183 
gu16Upd©eCou¡
 = 0;

184 
	`GosT§_A«lysisD©a_UnRegi°îCÆlBack
(
°©icTsRegi°îIndex
);

186  
GOSTSR_SUCCESS
;

187 
	}
}

	@porting/src/usb/usb_self.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<f˙é.h
>

5 
	~<°rög.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<dúít.h
>

8 
	~<sys/mou¡.h
>

9 
	~<sys/°©.h
>

11 
	#USB_MAX_NUM
 10

	)

12 
	#USB_CHECK_STR
 "1234567890"

	)

13 
	#_MAXDIR_
 256

	)

14 
	#DEV_DIR
 "/dev"

	)

15 
	#MOUNT_DIR_
 "/home/d©a/usb/"

	)

17 
	gUSB_Cou¡
 = 0;

19 
	$mou¡_USB
()

21 
DIR
 *
pDú
 = 
NULL
;

22 
dúít
 *
pDúE¡
 = 
NULL
;

23 
usb_«me
[
USB_MAX_NUM
][32];

24 
dev_cou¡
 = 0,
mou¡ed_c⁄ut
 = 0,
i
=0,
ªt
;

25 
usb_mou¡_«me
[
USB_MAX_NUM
][256];

26 
SYS_CMD
[1024] = {0};

27 
	`mem£t
(
usb_«me
,0,(usb_name));

28 
	`mem£t
(
usb_mou¡_«me
,0,(usb_mount_name));

30 i‡((
pDú
 = 
	`›ídú
(
DEV_DIR
)Ë=
NULL
)

34 (
pDúE¡
 = 
	`ªaddú
(
pDú
)Ë!
NULL
)

36 i‡((
pDúE¡
->
d_«me
[0] == 's') && (pDirEnt->d_name[1] == 'd'))

38 
	`°∫˝y
(
usb_«me
[
dev_cou¡
], 
pDúE¡
->
d_«me
, 
	`°æí
(pDirEnt->d_name));

39 
dev_cou¡
++;

42 
	`˛o£dú
(
pDú
);

44 if(
USB_Cou¡
 > 0)

46 
i
 = 0; i < 
USB_Cou¡
; i++)

48 
	`•rötf
(
usb_mou¡_«me
[
i
],"%s/usb%d",
MOUNT_DIR_
,i);

49 
	`umou¡
(
usb_mou¡_«me
[
i
]);

53 
i
 = 0; i < 
dev_cou¡
; i++)

55 
	`•rötf
(
usb_mou¡_«me
[
mou¡ed_c⁄ut
],"%s/usb%d",
MOUNT_DIR_
,mounted_conut);

56 
	`•rötf
(
SYS_CMD
,"mou¡ %s/%†%†>/dev/nuŒ 2>/dev/nuŒ",
DEV_DIR
,
usb_«me
[
i
],
usb_mou¡_«me
[
mou¡ed_c⁄ut
]);

57 
ªt
 = 
	`sy°em
(
SYS_CMD
);

58 if(
ªt
 == 0)

60 
mou¡ed_c⁄ut
++;

64  
mou¡ed_c⁄ut
 ;

65 
	}
}

68 
	$check_⁄e_usbByDIR
(*
usb_mou¡_«me
)

71 
fd
 = -1;

72 
ªad_buff
[1024] = {0};

73 
usb_check_fûe
[1024] = {0};

75 
	`•rötf
(
usb_check_fûe
,"%s/check_usb",
usb_mou¡_«me
);

76 
	`ªmove
(
usb_check_fûe
);

78 
fd
 = 
	`›í
(
usb_check_fûe
,
O_CREAT
 | 
O_RDWR
);

79 if(
fd
 < 0)

84 
	`wrôe
(
fd
,
USB_CHECK_STR
,
	`°æí
(USB_CHECK_STR));

85 
	`l£ek
(
fd
, 0L, 
SEEK_SET
);

86 
	`ªad
(
fd
,
ªad_buff
,(read_buff));

87 
	`˛o£
(
fd
);

88 if(
	`°∫cmp
(
ªad_buff
,
USB_CHECK_STR
,
	`°æí
(USB_CHECK_STR))== 0)

96 
	}
}

99 
	$check_USB
()

101 
P¨tôi⁄Num
 = 0;

102 
i
 = 0 ;

103 
mou¡ed_USB_NUM
 = -1 ;

104 
usb_mou¡_«me
[256]={0};

106 
mou¡ed_USB_NUM
 = 
	`mou¡_USB
();

107 if(
mou¡ed_USB_NUM
 <= 0)

109 
USB_Cou¡
 = 0;

112 if(
USB_Cou¡
 =
mou¡ed_USB_NUM
)

114  
USB_Cou¡
;

117 
USB_Cou¡
 = 
mou¡ed_USB_NUM
 ;

118 
i
 = 0;ò< 
USB_Cou¡
;i++)

120 
	`mem£t
(
usb_mou¡_«me
,0,(usb_mount_name));

121 
	`•rötf
(
usb_mou¡_«me
,"%s/usb%d",
MOUNT_DIR_
,
i
);

122 if(
	`check_⁄e_usbByDIR
(
usb_mou¡_«me
) == 0)

123 
P¨tôi⁄Num
++;

125  
P¨tôi⁄Num
 ;

126 
	}
}

128 
	$umou¡_USB
()

130 
usb_mou¡_«me
[
USB_MAX_NUM
][256];

131 
i
,
ªt
=-1;

133 
i
 = 0;ò< 
USB_Cou¡
;i++)

135 
	`•rötf
(
usb_mou¡_«me
[
i
],"%s/usb%d",
MOUNT_DIR_
,i);

136 
ªt

	`umou¡
(
usb_mou¡_«me
[
i
]);

137 if(
ªt
 == -1)

138 
	`≥º‹
("------>umount Failed \n");

141 
	`¥ötf
("umount success\n");

145 
	}
}

147 
	$umou¡_USB_Pª
()

149 
usb_mou¡_«me
[
USB_MAX_NUM
][256];

150 
i
,
ªt
=-1;

152 
i
 = 0;i < 5;i++)

154 
	`•rötf
(
usb_mou¡_«me
[
i
],"%s/usb%d",
MOUNT_DIR_
,i);

155 
ªt

	`umou¡
(
usb_mou¡_«me
[
i
]);

156 if(
ªt
 == -1)

157 
	`≥º‹
("------>umount Failed \n");

160 
	`¥ötf
("umount success\n");

163 
	}
}

	@porting/src/usb/usbdesk.c

2 
	~"usbdesk.h
"

6 
	#USB_DETECT_DIR
 "/dev"

	)

7 
	#MIN_SUPPORT_CAPACITY
 32

8 
	#MSCALE
(
b
,
bs
Ë(((bË* (Ë(bs)Ë/ 
Msize
)

	)

10 
	gGosCfg_USB_Pröt
 = 0;

12 
	gP¨tôi⁄Num
 = 0;

13 
	gusb_sdX_numbî
 = 0;

14 
	gusb_cuºít_disk
 = -1;

15 
	gusb_∑πôi⁄_to_dev
[
USB_MAX_DIR
];

16 
	gdev_usb_dú
[
USB_MAX_DIR
][50];

17 (*
lv_pfNŸifõr
)(
UsbSètus_t
 
°©us
Ë
NULL
;

18 
±hªad_t
 
hUsbTaskH™dÀ
;

19 
UsbSètus_t
 
lv_UsbC⁄Sètus
 = 
USB_STATUS_UNKNOWN
;

20 
DEV_ATTRIBUTE
 
dev_©åibuã
[
USB_MAX_DIR
];

21 
USB_P¨tôi⁄_Ty≥
 
usb_∑πôi⁄_ty≥
[
USB_MAX_DIR
];

23 
FILE
 *
°ªam
 = 
NULL
;

24 
debug_∑th
[128];

25 
to_usb_log
 = 0;

26 
numbî
 = 0;

29 *
	`UsbC⁄_Task
 (*
∑øm
);

30 
	`USB_Umou¡
 ();

31 
	`UsbC⁄_Dëe˘C⁄√˘i⁄
 ();

32 
	`UsbC⁄_Mou¡
 ();

33 
	`UsbC⁄_S‹tAŒDevi˚
 ();

42 
	`USB_Inô
((*
pfNŸifõr
)(
UsbSètus_t
 
°©us
))

44 
lv_pfNŸifõr
 = 
pfNŸifõr
;

45 
P¨tôi⁄Num
 = 0;

46 
usb_sdX_numbî
 = 0;

47 
usb_cuºít_disk
 = -1;

48 
	`mem£t
(
dev_usb_dú
, 0, 50 * 
USB_MAX_DIR
);

49 
	`mem£t
(
usb_∑πôi⁄_to_dev
, 0, (usb_partition_to_dev));

50 
	`mem£t
(
dev_©åibuã
, 0, (
DEV_ATTRIBUTE
)*
USB_MAX_DIR
);

52 i‡(
	`±hªad_¸óã
(&
hUsbTaskH™dÀ
, 
NULL
, 
UsbC⁄_Task
, NULL) != 0)

54 
	`¥ötf
("FailedÅo create UsbCon_Task !\n");

59 
	}
}

64 *
	$UsbC⁄_Task
(*
∑øm
)

66 
ªtvÆue
;

70 
	`u¶ìp
(200 * 1000);

71 
ªtvÆue
 = 
	`UsbC⁄_Dëe˘C⁄√˘i⁄
();

73 i‡(
ªtvÆue
 =
USB_INSERT
)

75 
	`u¶ìp
(500 * 1000);

76 
	`¥ötf
("insertá usb device ....\n");

78 i‡(
	`UsbC⁄_Mou¡
() == 0)

80 
	`¥ötf
("usb mount ok\n");

82 i‡(
usb_cuºít_disk
 < 0)

84 
usb_cuºít_disk
 = 0;

87 
lv_UsbC⁄Sètus
 = 
USB_STATUS_MOUNTED
;

89 i‡(
lv_pfNŸifõr
 !
NULL
)

91 
	`lv_pfNŸifõr
(
USB_STATUS_MOUNTED
);

94 
	`UsbC⁄_S‹tAŒDevi˚
();

97 i‡(
ªtvÆue
 =
USB_REMOVE
)

99 
	`¥ötf
("removeá usb device ....\n");

101 i‡(
lv_UsbC⁄Sètus
 =
USB_STATUS_MOUNTED
)

103 i‡(
	`USB_Umou¡
() == 0)

105 
	`¥ötf
("usb ummount ok\n");

107 i‡(
	`USB_GëDiskP¨tNum
() <= 0)

109 
usb_cuºít_disk
 = -1;

112 i‡(
P¨tôi⁄Num
 <= 0)

114 
lv_UsbC⁄Sètus
 = 
USB_STATUS_DISCONNECT
;

117 i‡(
lv_pfNŸifõr
 !
NULL
)

119 
	`lv_pfNŸifõr
(
USB_STATUS_DISCONNECT
);

122 
	`UsbC⁄_S‹tAŒDevi˚
();

127 i‡(
GosCfg_USB_Pröt
)

129 i‡(
to_usb_log
)

131 
numbî
 ++;

134 i‡(
numbî
 >5 && 
to_usb_log
 =1 && 
°ªam
 !
NULL
)

136 
	`fÊush
(
°ªam
);

137 
	`sync
();

138 
numbî
 = 0;

143 
∑øm
 = 
NULL
;

144  (
NULL
);

145 
	}
}

154 
	$UsbC⁄_Dëe˘C⁄√˘i⁄
( )

156 
i
 = 0;

157 
DIR
 *
pDú
 = 
NULL
;

158 
dúít
 *
pDúE¡
 = 
NULL
;

160 i‡((
pDú
 = 
	`›ídú
(
USB_DETECT_DIR
)Ë=
NULL
)

162  
USB_ERROR
;

165 (
pDúE¡
 = 
	`ªaddú
(
pDú
)Ë!
NULL
)

167 i‡–
pDúE¡
->
d_«me
[0] == 's' &&ÖDirEnt->d_name[1] == 'd' )

169 
i
++;

173 
	`˛o£dú
(
pDú
);

175 i‡(
i
 !
usb_sdX_numbî
)

177 
	`¥ötf
("i:%d usb_sdX_numbî:%d\n", 
i
, 
usb_sdX_numbî
);

179 i‡(
i
 > 
usb_sdX_numbî
)

181 
usb_sdX_numbî
 = 
i
;

182  
USB_INSERT
;

186 
usb_sdX_numbî
 = 
i
;

187  
USB_REMOVE
;

191  
USB_NONE
;

192 
	}
}

200 
	$UsbC⁄_Chk¡fs
(c⁄° *
pcExtName
)

202 
s32Sètus
;

203 
pid_t
 
chûd_pid
;

204 *
¨gv_li°
[] =

207 
NULL
,

209 
NULL


212 i‡(
NULL
 =
pcExtName
)

217 
¨gv_li°
[1] = (*)
pcExtName
;

218 
chûd_pid
 = 
	`f‹k
();

220 i‡(0 =
chûd_pid
)

222 
	`execvp
((c⁄° *)
¨gv_li°
[0], (* const *)argv_list);

223 
	`¥ötf
("onÉrror occurred inÉxecvp!\r\n");

224 
	`ab‹t
();

227 i‡(-1 =
chûd_pid
)

232 
	`waôpid
(
chûd_pid
, &
s32Sètus
, 0);

234 i‡(
	`WIFEXITED
(
s32Sètus
))

236  (
	`WEXITSTATUS
(
s32Sètus
));

240 
	}
}

248 
	$UsbC⁄_Mou¡
( )

250 
i
 = 0, 
k
 = 0;

251 
Resu…
 = 0;

252 
tmp_≤
 = 0;

253 
is_ßè_dev
 = -1;

254 
ßè_«me
[8] = {0};

255 
usb_dú_buf
[
USB_MAX_DIR
][32];

256 
ShñlComm™d
[256] = {0};

257 
sour˚
[128] = {0}, 
èrgë
[128] = {0};

258 
DIR
 *
pDú
 = 
NULL
;

259 
°©fs
 
sfs
 ;

260 
dúít
 *
pDúE¡
 = 
NULL
;

261 
bGŸDevFûeName
 = 0;

262 
size
 = 0;

264 i‡((
pDú
 = 
	`›ídú
(
USB_DETECT_DIR
)Ë=
NULL
)

266 
	`¥ötf
("[UsbCon_Mount]:GetUsbDevFileName(): FailedÅo open dir.\n");

270 (
pDúE¡
 = 
	`ªaddú
(
pDú
)Ë!
NULL
)

273 i‡((
pDúE¡
->
d_«me
[0] == 's') && (pDirEnt->d_name[1] == 'd'))

275 
	`mem£t
(
usb_dú_buf
[
tmp_≤
], 0, 32);

276 
	`°∫˝y
(
usb_dú_buf
[
tmp_≤
], 
pDúE¡
->
d_«me
, 
	`°æí
(pDirEnt->d_name));

277 
tmp_≤
++;

281 
	`˛o£dú
(
pDú
);

283 i‡(
tmp_≤
 == 0)

285 
	`¥ötf
("[UsbCon_Mount] fail. PartitionNum == 0 \n");

286 
P¨tôi⁄Num
 = 0;

290 
	`¥ötf
("[UsbC⁄_Mou¡]Ö©ôi⁄ = %dÅmp_≤ = %d\n", 
P¨tôi⁄Num
, 
tmp_≤
);

292 i‡((
pDú
 = 
	`›ídú
(
USB_MOUNT_DIR
)Ë=
NULL
)

294 
	`¥ötf
("[USB_Umount]: FailedÅo open home dir.\n");

295 
Resu…
 = 
	`mkdú
(
USB_MOUNT_DIR
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IROTH
 | 
S_IXOTH
);

299 i‡(
P¨tôi⁄Num
 == 0)

301  (
pDúE¡
 = 
	`ªaddú
(
pDú
)Ë!
NULL
 )

303 i‡–
pDúE¡
->
d_«me
[0] == 'p' &&ÖDirEnt->d_name[1] == 'a' &&ÖDirEnt->d_name[2] == 'r' )

305 
	`mem£t
(
ShñlComm™d
, 0, (ShellCommand));

306 
	`¢¥ötf
(
ShñlComm™d
, (ShñlComm™d), "%s/%s", 
USB_MOUNT_DIR
, 
pDúE¡
->
d_«me
);

307 
	`umou¡
(
ShñlComm™d
);

313 
	`˛o£dú
(
pDú
);

315 
ﬁd_∑πôi⁄_num
 = 
P¨tôi⁄Num
;

317 i‡(
P¨tôi⁄Num
 == 0)

319 
bGŸDevFûeName
 = 0;

321 
i
 = 0; (ò< 
tmp_≤
Ë&& (tmp_≤ < 
USB_MAX_DIR
); i++)

323 
	`¥ötf
(">>> usb dú buf[%d]:%†\n", 
i
, 
usb_dú_buf
[i]);

324 
	`mem£t
(
èrgë
, 0, (target));

325 
	`¢¥ötf
(
èrgë
, —¨gë), "%s/∑πôi⁄%d", 
USB_MOUNT_DIR
, 
bGŸDevFûeName
);

326 
	`¥ötf
("[UsbC⁄_Mou¡ 0]Ö¨tôi⁄Çamê: %s\n", 
èrgë
);

328 i‡(
	`ac˚ss
(
èrgë
, 
F_OK
) != 0)

330 
Resu…
 = 
	`mkdú
(
èrgë
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IROTH
 | 
S_IXOTH
);

332 i‡(
Resu…
 != 0)

334 
	`¥ötf
("mkdirÉrror!!!");

335 
bGŸDevFûeName
 ++;

340 
	`mem£t
(
sour˚
, 0, (source));

341 
	`¢¥ötf
(
sour˚
, 128, "/dev/%s", 
usb_dú_buf
[
i
]);

342 
	`¥ötf
("[UsbC⁄_Mou¡ 0]sour˚:%†èrgë:%s\n", 
sour˚
, 
èrgë
);

344 
	`mem£t
(
ShñlComm™d
, 0, (ShellCommand));

345 
	`¢¥ötf
(
ShñlComm™d
, (ShñlComm™d), "mou¡ %†%s", 
sour˚
, 
èrgë
);

348 
Resu…
 = 
	`mou¡
(
sour˚
, 
èrgë
, "vÁt", 
MS_MGC_VAL
, 
MOUNT_CMD_PARAM
);

351 
Resu…
 = 
	`sy°em
(
ShñlComm™d
);

354 i‡(
Resu…
 != 0)

356 
Resu…
 = 
	`mou¡
(
sour˚
, 
èrgë
, "ext2", 
MS_MGC_VAL
, 
MOUNT_CMD_PARAM
);

358 i‡(
Resu…
 != 0)

360 i‡(
USB_CHK_NTFS_OK
 =
	`UsbC⁄_Chk¡fs
((*)
sour˚
))

362 
Resu…
 = 
	`mou¡
(
sour˚
, 
èrgë
, "ufsd", 
MS_MGC_VAL
, 
MOUNT_CMD_PARAM
);

363 i‡(
Resu…
 != 0)

365 
	`¥ötf
("mountÉxt2,ntfs,vfatÉrr....\n");

366 
Resu…
 = 
	`sy°em
(
ShñlComm™d
);

367 
	`¥ötf
("--->Resu… :%d ShñlComm™d:%s\n", 
Resu…
, 
ShñlComm™d
);

372 
Resu…
 = 
	`mou¡
(
sour˚
, 
èrgë
, "ufsd", 
MS_MGC_VAL
, 
MOUNT_CMD_PARAM
);

373 
	`¥ötf
("--->thêªsu… i†%d\n", 
Resu…
);

378 
	`¥ötf
("mou¡Ñesu… i†%dÅhêèrgë i†%s\n", 
Resu…
, 
èrgë
);

380 i‡(
Resu…
 == 0)

382 i‡(
	`°©fs
(
èrgë
, &
sfs
) != -1)

384 
size
 = 
	`MSCALE
(
sfs
.
f_blocks
, sfs.
f_bsize
);

385 
	`¥ötf
("[UsbC⁄_Mou¡ 0] fûêsize:%Œd, f_bsize:%Œd, f_blocks:%Œd \n", ()
size
, ()
sfs
.
f_bsize
,

386 ()
sfs
.
f_blocks
);

388 i‡(
size
 <
MIN_SUPPORT_CAPACITY
)

390 
	`umou¡
(
èrgë
);

394 
	`°∫˝y
(
dev_©åibuã
[
P¨tôi⁄Num
].
mou¡_«me
, 
èrgë
, 
	`°æí
(target));

396 i‡(
sfs
.
f_ty≥
 == 0x4d44)

398 
dev_©åibuã
[
P¨tôi⁄Num
].
∑πôi⁄_ty≥
 = 
DOS
;

400 i‡(
sfs
.
f_ty≥
 == 0x5346544e)

402 
dev_©åibuã
[
P¨tôi⁄Num
].
∑πôi⁄_ty≥
 = 
NTFS
;

404 i‡(
sfs
.
f_ty≥
 == 0xef53)

406 
dev_©åibuã
[
P¨tôi⁄Num
].
∑πôi⁄_ty≥
 = 
EXT2
;

410 
dev_©åibuã
[
P¨tôi⁄Num
].
∑πôi⁄_ty≥
 = 
UNKNOW
;

413 i‡(
is_ßè_dev
 =0 && 
	`°r°r
(
sour˚
, 
ßè_«me
) != 0)

415 
dev_©åibuã
[
P¨tôi⁄Num
].
dev_ty≥
 = 
SATA_DEV
;

419 
dev_©åibuã
[
P¨tôi⁄Num
].
dev_ty≥
 = 
USB_DEV
;

422 
dev_©åibuã
[
P¨tôi⁄Num
].
°©us
 = 
DEV_READY
;

423 
dev_©åibuã
[
P¨tôi⁄Num
].
size
 = size;

424 
dev_©åibuã
[
P¨tôi⁄Num
].
‰ì_size
 = 
	`MSCALE
(
sfs
.
f_b‰ì
, sfs.
f_bsize
);

426 
	`°∫˝y
(
dev_©åibuã
[
P¨tôi⁄Num
].
‹igöÆ_«me
, 
sour˚
, 
	`°æí
(source));

427 
	`¥ötf
("----0----mou¡ ok,sourc:%†èrgë:%s----------\n", 
sour˚
, 
èrgë
);

428 
P¨tôi⁄Num
 ++;

429 
bGŸDevFûeName
 ++;

434 
bGŸDevFûeName
 ++;

435 
	`¥ötf
("[UsbCon_Mount 0] can't get file info \n");

436 
	`umou¡
(
èrgë
);

441 
bGŸDevFûeName
 ++;

442 
	`≥º‹
("mount0:");

446 
	`¥ötf
("bGŸDevFûeName:%d\n", 
P¨tôi⁄Num
);

448 i‡(
P¨tôi⁄Num
 > 0)

450 i‡(
GosCfg_USB_Pröt
)

452 
	`¢¥ötf
(
debug_∑th
, (debug_∑th), "%s/log.txt", 
dev_©åibuã
[0].
mou¡_«me
);

453 
	`¥ötf
("log fûêis:%s\n", 
debug_∑th
);

455 i‡((
°ªam
 = 
	`‰e›í
(
debug_∑th
, "a+", 
°dout
)Ë=
NULL
)

457 
	`¥ötf
("----------------ioÉrr........----------------\n");

460 
to_usb_log
 = 1;

467 
	`¥ötf
("[UsbCon_Mount 0] fail. canÇot get dev fileÇame \n");

473 
gë_mou¡ed_numbî
 = 0;

474 
mou¡ed_sdx_«me
[16] = {0};

475 
u£d_∑πôi⁄_«me
[
USB_MAX_DIR
] = {0};

477 
i
 = 0; i < 
USB_MAX_DIR
; i++)

479 i‡(
dev_©åibuã
[
i
].
°©us
 =
DEV_READY
)

481 
	`mem˝y
(
mou¡ed_sdx_«me
, &(
dev_©åibuã
[
i
].
‹igöÆ_«me
[5]), 3);

482 
u£d_∑πôi⁄_«me
[
gë_mou¡ed_numbî
++] =

483 
dev_©åibuã
[
i
].
mou¡_«me
[
	`°æí
(dev_attribute[i].mount_name) - 1] - '0';

487 
bGŸDevFûeName
 = 0;

489 
i
 = 0; (ò< 
tmp_≤
Ë&& (tmp_≤ < 
USB_MAX_DIR
); i++)

491 i‡(
	`°r°r
(
usb_dú_buf
[
i
], 
mou¡ed_sdx_«me
))

496 
	`¥ötf
(">>> usb dú buf[%d]:%†mou¡ed_sdx_«me:%s\n", 
i
, 
usb_dú_buf
[i], 
mou¡ed_sdx_«me
);

498 
bGŸDevFûeName
 = 0; bGŸDevFûeNamê< 
USB_MAX_DIR
; bGotDevFileName ++)

500 
k
 = 0; k < 
gë_mou¡ed_numbî
; k++)

502 i‡(
u£d_∑πôi⁄_«me
[
k
] =
bGŸDevFûeName
)

508 i‡(
k
 =
gë_mou¡ed_numbî
)

514 
	`¥ötf
("2bGŸDevFûeName:%d\n", 
bGŸDevFûeName
);

515 
	`mem£t
(
èrgë
, 0, (target));

516 
	`¢¥ötf
(
èrgë
, —¨gë), "%s/∑πôi⁄%d", 
USB_MOUNT_DIR
, 
bGŸDevFûeName
);

517 
	`¥ötf
("[UsbC⁄_Mou¡ 1]Ö¨tôi⁄Çamê: %s\n", 
ShñlComm™d
);

519 i‡(
	`ac˚ss
(
èrgë
, 
F_OK
) != 0)

521 
Resu…
 = 
	`mkdú
(
èrgë
, 
S_IRWXU
 | 
S_IRWXG
 | 
S_IROTH
 | 
S_IXOTH
);

523 i‡(
Resu…
 != 0)

525 
	`¥ötf
("mkdirÉrror!!!");

526 
bGŸDevFûeName
++;

531 
	`mem£t
(
sour˚
, 0, (source));

532 
	`¢¥ötf
(
sour˚
, (sour˚), "/dev/%s", 
usb_dú_buf
[
i
]);

533 
	`¥ötf
("[UsbC⁄_Mou¡ 1]sour˚:%†èrgë:%s\n", 
sour˚
, 
èrgë
);

535 
	`mem£t
(
ShñlComm™d
, 0, (ShellCommand));

536 
	`¢¥ötf
(
ShñlComm™d
, (ShñlComm™d), "mou¡ %†%s", 
sour˚
, 
èrgë
);

539 
Resu…
 = 
	`mou¡
(
sour˚
, 
èrgë
, "vÁt", 
MS_MGC_VAL
, 
MOUNT_CMD_PARAM
);

541 
Resu…
 = 
	`sy°em
(
ShñlComm™d
);

542 i‡(
Resu…
 != 0)

544 
Resu…
 = 
	`mou¡
(
sour˚
, 
èrgë
, "ext2", 
MS_MGC_VAL
, 
MOUNT_CMD_PARAM
);

546 i‡(
Resu…
 != 0)

548 i‡(
USB_CHK_NTFS_OK
 =
	`UsbC⁄_Chk¡fs
((*)
sour˚
))

550 
Resu…
 = 
	`mou¡
(
sour˚
, 
èrgë
, "ufsd", 
MS_MGC_VAL
, 
MOUNT_CMD_PARAM
);

552 i‡(
Resu…
 != 0)

554 
	`¥ötf
("mountÉxt2,ntfs,vfatÉrr....\n");

555 
Resu…
 = 
	`sy°em
(
ShñlComm™d
);

556 
	`¥ötf
("--->Resu… :%d ShñlComm™d:%s\n", 
Resu…
, 
ShñlComm™d
);

562 i‡(
Resu…
 == 0)

564 i‡(
	`°©fs
(
èrgë
, &
sfs
) != -1)

566 
size
 = 
	`MSCALE
(
sfs
.
f_blocks
, sfs.
f_bsize
);

567 
	`¥ötf
("[UsbC⁄_Mou¡ 1] fûêsize, f_bsize:%Œd, f_blocks:%Œd \n", ()
sfs
.
f_bsize
,

568 ()
sfs
.
f_blocks
);

570 i‡(
size
 <
MIN_SUPPORT_CAPACITY
)

572 
	`umou¡
(
èrgë
);

576 
‰ì_©åibuã_ödex
;

578 
‰ì_©åibuã_ödex
 = 0; fªe_©åibuã_ödex < 
USB_MAX_DIR
; free_attribute_index++)

580 i‡(
dev_©åibuã
[
‰ì_©åibuã_ödex
].
°©us
 =
DEV_NO_READY
)

586 i‡(
‰ì_©åibuã_ödex
 =
USB_MAX_DIR
)

588 
	`umou¡
(
èrgë
);

592 i‡(
sfs
.
f_ty≥
 == 0x4d44)

594 
dev_©åibuã
[
‰ì_©åibuã_ödex
].
∑πôi⁄_ty≥
 = 
DOS
;

596 i‡(
sfs
.
f_ty≥
 == 0x5346544e)

598 
dev_©åibuã
[
‰ì_©åibuã_ödex
].
∑πôi⁄_ty≥
 = 
NTFS
;

600 i‡(
sfs
.
f_ty≥
 == 0xef53)

602 
dev_©åibuã
[
‰ì_©åibuã_ödex
].
∑πôi⁄_ty≥
 = 
EXT2
;

606 
dev_©åibuã
[
‰ì_©åibuã_ödex
].
∑πôi⁄_ty≥
 = 
UNKNOW
;

609 i‡(
is_ßè_dev
 =0 && 
	`°r°r
(
sour˚
, 
ßè_«me
) != 0)

611 
dev_©åibuã
[
‰ì_©åibuã_ödex
].
dev_ty≥
 = 
SATA_DEV
;

615 
dev_©åibuã
[
‰ì_©åibuã_ödex
].
dev_ty≥
 = 
USB_DEV
;

618 
dev_©åibuã
[
‰ì_©åibuã_ödex
].
°©us
 = 
DEV_READY
;

619 
dev_©åibuã
[
‰ì_©åibuã_ödex
].
size
 = size;

620 
dev_©åibuã
[
‰ì_©åibuã_ödex
].
‰ì_size
 = 
	`MSCALE
(
sfs
.
f_b‰ì
, sfs.
f_bsize
);

621 
	`°∫˝y
(
dev_©åibuã
[
‰ì_©åibuã_ödex
].
mou¡_«me
, 
èrgë
, 
	`°æí
(target));

622 
	`°∫˝y
(
dev_©åibuã
[
‰ì_©åibuã_ödex
].
‹igöÆ_«me
, 
sour˚
, 
	`°æí
(source));

623 
u£d_∑πôi⁄_«me
[
gë_mou¡ed_numbî
++] = 
bGŸDevFûeName
;

624 
P¨tôi⁄Num
 ++;

629 
bGŸDevFûeName
 ++;

630 
	`¥ötf
("[UsbCon_Mount 1] can't get file info \n");

631 
	`umou¡
(
èrgë
);

636 
bGŸDevFûeName
 ++;

637 
	`≥º‹
("mount1:");

642 
	`¥ötf
("bGŸDevFûeName:%d\n", 
P¨tôi⁄Num
);

645 i‡(
ﬁd_∑πôi⁄_num
 < 
P¨tôi⁄Num
)

653 
	}
}

655 
	$UsbC⁄_S‹tAŒDevi˚
()

657 
i
 = 0, 
j
 = 0;

658 
DEV_ATTRIBUTE
 
ãmp
;

660 
i
 = 0; i < 
USB_MAX_DIR
; i++)

662 
j
 = 
i
 + 1; j < 
USB_MAX_DIR
; j++)

664 i‡(
dev_©åibuã
[
i
].
°©us
 =
DEV_READY
 && dev_©åibuã[
j
].status == DEV_READY)

666 i‡(
dev_©åibuã
[
i
].
size
 >dev_©åibuã[
j
].size)

668 
ãmp
 = 
dev_©åibuã
[
i
];

669 
dev_©åibuã
[
i
] = dev_©åibuã[
j
];

670 
dev_©åibuã
[
j
] = 
ãmp
;

676 
i
 = 0; i < 
USB_MAX_DIR
; i++)

678 
j
 = 
i
 + 1; j < 
USB_MAX_DIR
; j++)

680 i‡(
dev_©åibuã
[
i
].
°©us
 =
DEV_NO_READY
 && dev_©åibuã[
j
].°©u†=
DEV_READY
)

682 
ãmp
 = 
dev_©åibuã
[
i
];

683 
dev_©åibuã
[
i
] = dev_©åibuã[
j
];

684 
dev_©åibuã
[
j
] = 
ãmp
;

688 
	}
}

696 
	$USB_Umou¡
()

698 
i
 = 0, 
k
 = 0;

699 
tmp_≤
 = 0;

700 
DIR
 *
pDú
 = 
NULL
;

701 
usb_dú_buf
[
USB_MAX_DIR
][32];

702 
dúít
 *
pDúE¡
 = 
NULL
;

704 i‡((
pDú
 = 
	`›ídú
(
USB_DETECT_DIR
)Ë=
NULL
)

706 
	`¥ötf
("[USB_Umount]: FailedÅo home dir.\n");

710 (
pDúE¡
 = 
	`ªaddú
(
pDú
)Ë!
NULL
)

712 i‡((
pDúE¡
->
d_«me
[0] == 's') && (pDirEnt->d_name[1] == 'd'))

714 
	`¢¥ötf
(
usb_dú_buf
[
tmp_≤
], 32, "/dev/%s", 
pDúE¡
->
d_«me
);

715 
tmp_≤
++;

719 
	`˛o£dú
(
pDú
);

721 i‡(
tmp_≤
 == 0)

723 
i
 = 0; i < 
USB_MAX_DIR
; i++)

725 
dev_©åibuã
[
i
].
°©us
 = 
DEV_NO_READY
;

726 
dev_©åibuã
[
i
].
sync
 = 0;

727 
	`¥ötf
("umou¡á dev:%s\n", 
dev_©åibuã
[
i
].
mou¡_«me
);

728 
	`umou¡
(
dev_©åibuã
[
i
].
mou¡_«me
);

731 
usb_sdX_numbî
 = 
P¨tôi⁄Num
 = 0;

733 i‡(
GosCfg_USB_Pröt
)

735 
	`‰e›í
("/dev/c⁄sﬁe", "w", 
°dout
);

736 
°ªam
 = 
NULL
;

737 
numbî
 = 0;

738 
to_usb_log
 = 0;

739 
	`¥ötf
("AndÇow backÅoÅhe console onceágain\n");

746 
i
 = 0; i < 
USB_MAX_DIR
; i++)

748 i‡(
dev_©åibuã
[
i
].
°©us
 =
DEV_READY
)

750 
k
 = 0; k < 
tmp_≤
; k++)

752 i‡(
	`°∫cmp
(
dev_©åibuã
[
i
].
‹igöÆ_«me
, 
usb_dú_buf
[
k
], 
	`°æí
(usb_dir_buf[k])) == 0)

759 i‡(
k
 =
tmp_≤
)

762 
dev_©åibuã
[
i
].
°©us
 = 
DEV_NO_READY
;

763 
dev_©åibuã
[
i
].
sync
 = 0;

764 
	`¥ötf
("umou¡á dev:%s\n", 
dev_©åibuã
[
i
].
mou¡_«me
);

765 
	`umou¡
(
dev_©åibuã
[
i
].
mou¡_«me
);

766 
P¨tôi⁄Num
 --;

772 
	}
}

780 
	$USB_GëSètus
()

782  (
lv_UsbC⁄Sètus
);

783 
	}
}

785 
	$USB_GëCurDisk
()

787  
usb_cuºít_disk
;

788 
	}
}

790 
	$USB_SëCurDisk
(
Curdisk
)

792 i‡(
Curdisk
 >
USB_MAX_DIR
)

797 
usb_cuºít_disk
 = 
Curdisk
;

800 
	}
}

802 
	$USB_GëExôedDisk
()

804 
disk_ödex
 = -1;

806 
disk_ödex
 = 0; disk_ödex < 
USB_MAX_DIR
; disk_index++)

808 i‡(
dev_©åibuã
[
disk_ödex
].
°©us
 =
DEV_READY
)

814 i‡(
disk_ödex
 >
USB_MAX_DIR
)

816 
disk_ödex
 = -1;

819  
disk_ödex
;

820 
	}
}

822 
	$USB_SëNextVÆidDisk
(
cuºít_disk
)

824 
i
;

826 
i
 = 
cuºít_disk
 + 1; i < 
USB_MAX_DIR
; i++)

828 i‡(
dev_©åibuã
[
i
].
°©us
 =
DEV_READY
)

830  
i
;

834 i‡–
i
 >
USB_MAX_DIR
)

836 
i
 = 0; i < 
cuºít_disk
 ; i++)

838 i‡(
dev_©åibuã
[
i
].
°©us
 =
DEV_READY
)

840  
i
;

846 
	}
}

848 
	$USB_SëPªvVÆidDisk
(
cuºít_disk
)

850 
i
;

852 
i
 = 
cuºít_disk
 - 1; i >= 0; i--)

854 i‡(
dev_©åibuã
[
i
].
°©us
 =
DEV_READY
)

856  
i
;

860 i‡(
i
 < 0)

862 
i
 = 
USB_MAX_DIR
 - 1; i > 
cuºít_disk
 ; i--)

864 i‡(
dev_©åibuã
[
i
].
°©us
 =
DEV_READY
)

866  
i
;

872 
	}
}

874 
	$USB_GëAâribuã
(
dev_ödex
, 
DEV_ATTRIBUTE
 *
dev_©å
, 
gë_size_öfo
)

876 
°©fs
 
sfs
;

878 i‡(
dev_ödex
 >
USB_MAX_DIR
 || dev_ödex < 0 || 
dev_©å
 =
NULL
)

883 i‡(
gë_size_öfo
 == 1)

885 i‡(
dev_©åibuã
[
dev_ödex
].
°©us
 =
DEV_READY
)

887 i‡(
	`°©fs
(
dev_©åibuã
[
dev_ödex
].
mou¡_«me
, &
sfs
) != -1)

889 
dev_©åibuã
[
dev_ödex
].
size
 = 
	`MSCALE
(
sfs
.
f_blocks
, sfs.
f_bsize
);

890 
dev_©åibuã
[
dev_ödex
].
‰ì_size
 = 
	`MSCALE
(
sfs
.
f_b‰ì
, sfs.
f_bsize
);

891 
	`¥ötf
("dev_©åibuã[%d].‰ì_size:%ld\n", 
dev_ödex
, 
dev_©åibuã
[dev_ödex].
‰ì_size
);

892 
	`¥ötf
("sfs.f_b‰ì=%Œd sfs.f_block=%Œd sfs.f_bsize=%Œd\n", ()
sfs
.
f_b‰ì
,

893 ()
sfs
.
f_blocks
, ()sfs.
f_bsize
);

902 
	`mem˝y
(
dev_©å
, &
dev_©åibuã
[
dev_ödex
], (
DEV_ATTRIBUTE
));

905 
	}
}

907 
	$USB_GëAâribuã_In_U£
(
dev_ö_u£_ödex
, 
DEV_ATTRIBUTE
 *
dev_©å
, *
dev_ödex
, 
gë_size_öfo
)

909 
i
, 
k
 = 0;

911 i‡(
dev_ö_u£_ödex
 >
P¨tôi⁄Num
 || 
dev_©å
 =
NULL
)

916 
i
 = 0; i < 
USB_MAX_DIR
; i++)

918 i‡(
dev_©åibuã
[
i
].
°©us
 =
DEV_READY
)

920 i‡(
k
 =
dev_ö_u£_ödex
)

922 i‡(
gë_size_öfo
 == 1)

924 
°©fs
 
sfs
;

926 i‡(
	`°©fs
(
dev_©åibuã
[
i
].
mou¡_«me
, &
sfs
) != -1)

928 
dev_©åibuã
[
i
].
size
 = 
	`MSCALE
(
sfs
.
f_blocks
, sfs.
f_bsize
);

929 
dev_©åibuã
[
i
].
‰ì_size
 = 
	`MSCALE
(
sfs
.
f_b‰ì
, sfs.
f_bsize
);

933 
	`mem£t
(
dev_©å
, 0, (
DEV_ATTRIBUTE
));

934 
	`mem˝y
(
dev_©å
, &
dev_©åibuã
[
i
], (
DEV_ATTRIBUTE
));

936 i‡(
dev_ödex
)

938 *
dev_ödex
 = 
i
;

944 
k
 ++;

949 
	}
}

951 
	$USB_GëPª„ªn˚DevAâribuã
(*
dev_ödex
, 
DEV_ATTRIBUTE
 *
dev_©å
, 
gë_size_öfo
)

953 
i
;

954 
max_‰ì_size_dev
 = 0;

955 
max_‰ì_size
 = 0;

957 i‡(
dev_ödex
 =
NULL
 || 
dev_©å
 == NULL)

962 
i
 = 0; i < 
USB_MAX_DIR
; i++)

964 i‡((
dev_©åibuã
[
i
].
°©us
 =
DEV_READY
)

965 && ((
dev_©åibuã
[
i
].
∑πôi⁄_ty≥
 =
EXT2
)

966 || (
dev_©åibuã
[
i
].
∑πôi⁄_ty≥
 =
DOS
)

967 || (
dev_©åibuã
[
i
].
∑πôi⁄_ty≥
 =
NTFS
)))

969 i‡(
gë_size_öfo
 == 1)

971 
°©fs
 
sfs
;

973 i‡(
	`°©fs
(
dev_©åibuã
[
i
].
mou¡_«me
, &
sfs
) != -1)

975 
dev_©åibuã
[
i
].
size
 = 
	`MSCALE
(
sfs
.
f_blocks
, sfs.
f_bsize
);

976 
dev_©åibuã
[
i
].
‰ì_size
 = 
	`MSCALE
(
sfs
.
f_b‰ì
, sfs.
f_bsize
);

980 i‡(
dev_©åibuã
[
i
].
dev_ty≥
 =
SATA_DEV
)

982 *
dev_ödex
 = 
i
;

983 
	`mem˝y
(
dev_©å
, &
dev_©åibuã
[
i
], (
DEV_ATTRIBUTE
));

987 i‡(
dev_©åibuã
[
i
].
‰ì_size
 > 
max_‰ì_size
)

989 
max_‰ì_size
 = 
dev_©åibuã
[
i
].
‰ì_size
;

990 
max_‰ì_size_dev
 = 
i
;

995 i‡(
max_‰ì_size
 != 0)

997 *
dev_ödex
 = 
max_‰ì_size_dev
;

998 
	`mem˝y
(
dev_©å
, &
dev_©åibuã
[
max_‰ì_size_dev
], (
DEV_ATTRIBUTE
));

1003 
	}
}

1005 
	$USB_Judge_DevTy≥
()

1007 
i
 = 0;

1008 
ªt
 = -1;

1010 
i
 = 0; i < 
P¨tôi⁄Num
; i++)

1012 i‡(
dev_©åibuã
[
i
].
dev_ty≥
 =
USB_DEV
)

1014 
ªt
 = 
i
;

1019  
ªt
;

1020 
	}
}

1022 
	$USB_SëAâribuã
(
dev_ödex
, 
DEV_ATTRIBUTE
 *
dev_©å
)

1024 i‡(
dev_ödex
 >
USB_MAX_DIR
 || 
dev_©å
 =
NULL
)

1029 
	`mem˝y
(&
dev_©åibuã
[
dev_ödex
], 
dev_©å
, (
DEV_ATTRIBUTE
));

1031 
	}
}

1033 
	$USB_SëSyncFœg
(
dev_ödex
)

1035 i‡(
dev_ödex
 >
USB_MAX_DIR
)

1040 
dev_©åibuã
[
dev_ödex
].
sync
 = 0;

1043 
	}
}

1045 
	$USB_GëDiskP¨tNum
()

1047  
P¨tôi⁄Num
;

1048 
	}
}

	@porting/src/web/svc_control.c

1 
	~"löuxos.h
"

2 
	~"¸c.h
"

3 
	~"web.h
"

4 
	~"gos_sys.h
"

6 
	~"svc_c⁄åﬁ.h
"

7 
	~"t•¨£_≠i.h
"

11 
GOS_SVC_Modñ_Ty≥
 
	mmodñ
;

12 * 
	md©a
;

13 }
	tGOS_SVC_Msg_t
;

15 
	#SVC_MAX_MSG_NUM
 250

	)

17 
GOS_BOOL
 
	gSvcTaskFœg
 = 
GOS_TRUE
;

18 
OS_Task_H™dÀ_t
 
	gSvcTaskH™dÀ
 = (OS_Task_H™dÀ_t)
GOS_NULL
;

19 
OS_MesßgeQueue_t
* 
	gSVC_MsgQid
 = 
GOS_NULL
;

21 
	$svc_t•¨£_c⁄åﬁ
(* 
d©a
)

23 
GOS_S32
 
ªt
 = 
GOS_FAILURE
;

24 
GOS_SVC_Modñ_TsP¨£
* 
t•¨£_modñ_∑øm
 = (GOS_SVC_Modñ_TsP¨£*)
d©a
;

26 i‡(
t•¨£_modñ_∑øm
 =
GOS_NULL
)

28 
	`LOG_ERROR
("data is NULL\n");

31 i‡(
t•¨£_modñ_∑øm
 !
GOS_NULL
)

33 
t•¨£_modñ_∑øm
->
t•¨£_cmd
)

35 
GOS_SVC_CMD_TSPARSE_GET_INFO
:

37 
	`DEBUG
("cmd: GOS_SVC_CMD_TSPARSE_GET_INFO\n");

39 
GOS_SVC_TsP¨£_t
 
t•¨£_öfo
;

40 
	`mem£t
(&
t•¨£_öfo
, 0, (tsparse_info));

42 
ªt
 = 
	`TsP¨£_Api_Gë_TsInfo
((
TSPARSE_API_INFO_t
 *)&
t•¨£_öfo
);

44 
	`DEBUG_INFO
("∑ckë:%d, FûeName:%s\n", 
t•¨£_öfo
.
∑ckë_num
,Å•¨£_öfo.
pfûíame
);

46 i‡(
t•¨£_modñ_∑øm
->
ˇŒback
 !
GOS_NULL
)

48 
t•¨£_modñ_∑øm
->
	`ˇŒback
(
GOS_SVC_MODEL_TSPARSE
,Å•¨£_modñ_∑øm->
t•¨£_cmd
, 
GOS_SUCCESS
, &
t•¨£_öfo
, (tsparse_info), 1);

53 
GOS_SVC_CMD_TSPARSE_SET_INFO
:

55 
	`DEBUG
("cmd: GOS_SVC_CMD_TSPARSE_SET_INFO\n");

57 if(
GOS_NULL
 !
t•¨£_modñ_∑øm
->
t•¨£_d©a
)

59 
GOS_SVC_TsP¨£_t
 *
t•¨£_öfo
 = (GOS_SVC_TsP¨£_à*)
t•¨£_modñ_∑øm
->
t•¨£_d©a
;

61 
ªt
 = 
	`TsP¨£_Api_TsP¨£Pro˚ss
((
TSPARSE_API_INFO_t
*)
t•¨£_öfo
);

64 i‡(
t•¨£_modñ_∑øm
->
ˇŒback
 !
GOS_NULL
)

66 
t•¨£_modñ_∑øm
->
	`ˇŒback
(
GOS_SVC_MODEL_TSPARSE
,Å•¨£_modñ_∑øm->
t•¨£_cmd
, 
GOS_SUCCESS
, 
GOS_NULL
,0, 1);

70 
GOS_SVC_CMD_TSPARSE_STOP
:

72 
	`DEBUG
("cmd: GOS_SVC_CMD_TSPARSE_STOP\n");

74 
ªt
 = 
	`TsP¨£_Api_St›Síd
();

76 i‡(
t•¨£_modñ_∑øm
->
ˇŒback
 !
GOS_NULL
)

78 
t•¨£_modñ_∑øm
->
	`ˇŒback
(
GOS_SVC_MODEL_TSPARSE
,Å•¨£_modñ_∑øm->
t•¨£_cmd
, 
GOS_SUCCESS
, 
GOS_NULL
,0, 1);

83 
GOS_SVC_CMD_TSPARSE_GET_BITRATE
:

87 
GOS_SVC_TsP¨£_BôR©e_t
 
°bô_øã
;

89 
	`mem£t
(&
°bô_øã
, 0, (stbit_rate));

91 
ªt
 = 
	`TsP¨£_Api_Gë_Bôøã
(&
°bô_øã
);

93 i‡(
t•¨£_modñ_∑øm
->
ˇŒback
 !
GOS_NULL
)

95 
t•¨£_modñ_∑øm
->
	`ˇŒback
(
GOS_SVC_MODEL_TSPARSE
,Å•¨£_modñ_∑øm->
t•¨£_cmd
, 
GOS_SUCCESS
, &
°bô_øã
,(stbit_rate), 1);

101 i‡(
t•¨£_modñ_∑øm
->
ˇŒback
 !
GOS_NULL
)

103 
t•¨£_modñ_∑øm
->
	`ˇŒback
(
GOS_SVC_MODEL_TSPARSE
,Å•¨£_modñ_∑øm->
t•¨£_cmd
, 
GOS_SUCCESS
, 
GOS_NULL
,0, 1);

110 i‡(
t•¨£_modñ_∑øm
->
ˇŒback
 !
GOS_NULL
)

112 
t•¨£_modñ_∑øm
->
	`ˇŒback
(
GOS_SVC_MODEL_TSPARSE
,Å•¨£_modñ_∑øm->
t•¨£_cmd
, 
GOS_FAILURE
, 
GOS_NULL
,0, 1);

116 i‡(
t•¨£_modñ_∑øm
->
t•¨£_d©a
 !
GOS_NULL
)

118 
	`OS_FªeMem‹y
(
t•¨£_modñ_∑øm
->
t•¨£_d©a
);

122 
	}
}

124 
	$svc_Ÿhî_c⁄åﬁ
(* 
d©a
)

126 
GOS_SVC_Modñ_Othî
* 
Ÿhî_modñ_∑øm
 = (GOS_SVC_Modñ_Othî*)
d©a
;

128 i‡(
Ÿhî_modñ_∑øm
 =
GOS_NULL
)

130 
	`LOG_ERROR
("data is NULL\n");

133 i‡(
Ÿhî_modñ_∑øm
 !
GOS_NULL
)

135 
Ÿhî_modñ_∑øm
->
Ÿhî_cmd
)

137 
GOS_SVC_CMD_OTHER_SOFTWARE_UPGRADE
:

139 i‡(
Ÿhî_modñ_∑øm
->
ˇŒback
 !
GOS_NULL
)

141 
Ÿhî_modñ_∑øm
->
	`ˇŒback
(
GOS_SVC_MODEL_OTHER
, othî_modñ_∑øm->
Ÿhî_cmd
, 
GOS_SUCCESS
, 
GOS_NULL
,0, 1);

146 
GOS_SVC_CMD_OTHER_SYSTEM_SETTING
:

148 i‡(
Ÿhî_modñ_∑øm
->
ˇŒback
 !
GOS_NULL
)

150 
Ÿhî_modñ_∑øm
->
	`ˇŒback
(
GOS_SVC_MODEL_OTHER
, othî_modñ_∑øm->
Ÿhî_cmd
, 
GOS_SUCCESS
, 
GOS_NULL
,0, 1);

157 i‡(
Ÿhî_modñ_∑øm
->
ˇŒback
 !
GOS_NULL
)

159 
Ÿhî_modñ_∑øm
->
	`ˇŒback
(
GOS_SVC_MODEL_OTHER
, othî_modñ_∑øm->
Ÿhî_cmd
, 
GOS_SUCCESS
, 
GOS_NULL
,0, 1);

166 i‡(
Ÿhî_modñ_∑øm
->
ˇŒback
 !
GOS_NULL
)

168 
Ÿhî_modñ_∑øm
->
	`ˇŒback
(
GOS_SVC_MODEL_OTHER
, othî_modñ_∑øm->
Ÿhî_cmd
, 
GOS_FAILURE
, 
GOS_NULL
,0, 1);

172 i‡(
Ÿhî_modñ_∑øm
->
Ÿhî_d©a
 !
GOS_NULL
)

174 
	`OS_FªeMem‹y
(
Ÿhî_modñ_∑øm
->
Ÿhî_d©a
);

178 
	}
}

180 
	$svc_c⁄åﬁ_èsk
(* 
∑øm
)

182 
GOS_SVC_Msg_t
* 
msgRe˚ived
 = 
GOS_NULL
;

184 
SvcTaskFœg
)

186 i‡((
msgRe˚ived
 = (
GOS_SVC_Msg_t
 *)
	`OS_Re˚iveMesßge
(
SVC_MsgQid
)Ë=
GOS_NULL
)

188 
	`u¶ìp
(100*1000);

192 
msgRe˚ived
->
modñ
)

194 
GOS_SVC_MODEL_TSPARSE
:

196 
	`svc_t•¨£_c⁄åﬁ
(
msgRe˚ived
->
d©a
);

200 
GOS_SVC_MODEL_OTHER
:

202 
	`svc_Ÿhî_c⁄åﬁ
(
msgRe˚ived
->
d©a
);

210 i‡(
msgRe˚ived
->
d©a
 !
GOS_NULL
)

212 
	`OS_FªeMem‹y
(
msgRe˚ived
->
d©a
);

215 
	`OS_Rñó£MesßgeBuf„r
(
SVC_MsgQid
,(*)
msgRe˚ived
);

219 
	}
}

221 
	$svc_webui_ˇŒback
(
GOS_SVC_Modñ_Ty≥
 
modñ
, * 
d©a
)

223 
GOS_SVC_Msg_t
 
msgSít
;

225 
msgSít
.
modñ
 = model;

226 
msgSít
.
d©a
 = data;

228 i‡(
SVC_MsgQid
 !
GOS_NULL
)

230 
	`OS_SídMesßge
(
SVC_MsgQid
, (*)(&
msgSít
), (
GOS_SVC_Msg_t
), 0);

234 
	}
}

236 
GOS_S32
 
	$GOS_SVC_CONTROL_Inô
()

238 
GOS_S32
 
s32Rë
 = 
GOS_FAILURE
;

240 if(0x00 =
	`GOS_SYS_Gë_ChùID
())

242 
s32Rë
 = 
	`GOS_WEB_Inô
(
svc_webui_ˇŒback
);

246 
s32Rë
 = 
	`GOS_WEB_Sœve_Inô
(
svc_webui_ˇŒback
);

249 i‡(
s32Rë
 !
GOS_SUCCESS
)

251 
	`¥ötf
("GOS_WEB_InitÉrr!!\n");

252  
GOS_FAILURE
;

256 i‡((
SVC_MsgQid
 = 
	`OS_Cª©eMesßgeQueue
("/SVC_MsgQid", (
GOS_SVC_Msg_t
), 
SVC_MAX_MSG_NUM
)Ë=
GOS_NULL
)

258 
	`LOG_ERROR
("create SVC_MsgQidÉrror\n");

259  
GOS_FAILURE
;

263 
SvcTaskFœg
 = 
GOS_TRUE
;

264 i‡(!
	`OS_Cª©eTask
((*)
svc_c⁄åﬁ_èsk
, 
GOS_NULL
, &
SvcTaskH™dÀ
))

266 
	`LOG_ERROR
("create svc_control_taskÉrror\n");

267  
GOS_FAILURE
;

270 
	`¥ötf
("%†suc˚ss!\n", 
__FUNCTION__
);

272  
GOS_SUCCESS
;

273 
	}
}

275 
GOS_S32
 
	$GOS_SVC_CONTROL_DeInô
()

277 
SvcTaskFœg
 = 
GOS_FALSE
;

279 
	`OS_DñëeMesßgeQueue
(
SVC_MsgQid
);

281 
	`GOS_WEB_DeInô
();

283  
GOS_SUCCESS
;

284 
	}
}

	@porting/src/web/web.c

5 
	~"löuxos.h
"

6 
	~"¸c.h
"

7 
	~"web.h
"

8 
	~"svc_c⁄åﬁ.h
"

9 
	~"gos_sys.h
"

11 
	#SLAVE_PORT
 7000

	)

12 
	#HOST_PORT
 8001

	)

13 
	#MAX_SOCKET_BUF_LEN
 6500

	)

14 
	#UNIX_DOMAIN
 "/tmp/UNIX.domaö"

	)

16 
	u£mun
 {

17 
	mvÆ
;

18 
£mid_ds
 *
	mbuf
;

19 *
	m¨øy
;

20 
£möfo
 *
	m__buf
;

23 
	gwebui_èsk_Êag
 = 1;

24 
	gsockë_fd_c⁄e˘
 = 0;

25 
	gsockë_fd_£rvî
 = 0;

27 
OS_Sem≠h‹e_t
* 
	g£m_webuiAc˚ss
 = 
GOS_NULL
;

28 
OS_Task_H™dÀ_t
 
	gWebui_TaskH™dÀ
 =(
±hªad_t
)
GOS_NULL
;

29 
GOS_WEBUI_CÆlback
 
	gui_ˇŒback
 = 
GOS_NULL
;

31 
GOS_S32
 
	$sockë_£À˘_d©a
(
sockë
, 
GOS_U8
* 
ªad£t
, GOS_U8* 
wrôe£t
, GOS_U8* 
ex˚±£t
,
timeout_ms
)

33 
s32Rë
 = -1;

34 
£À˘_Êag
 = 0;

35 
timevÆ
 
tm
;

36 
fd_£t
 
fds_r
 ,
fds_w
 ,
fds_e
;

37 
fd_£t
* 
pfds_r
 = 
GOS_NULL
 ;

38 
fd_£t
* 
pfds_w
 = 
GOS_NULL
;

39 
fd_£t
* 
pfds_e
 =
GOS_NULL
;

41 i‡((
sockë
 <0Ë|| (
timeout_ms
 < -1Ë|| (!
ªad£t
 && !
wrôe£t
 && !
ex˚±£t
))

43 
	`¥ötf
("-11param inÉrr!!\n");

44 
ERROR_EXIT
;

47 i‡(
timeout_ms
 != -1)

49 
tm
.
tv_£c
 = 
timeout_ms
/1000;

50 
tm
.
tv_u£c
 = 1000*(
timeout_ms
%1000);

54 
tm
.
tv_£c
 = 50000;

55 
tm
.
tv_u£c
 = 0;

58 
	`FD_ZERO
(&
fds_r
);

59 
	`FD_ZERO
(&
fds_w
);

60 
	`FD_ZERO
(&
fds_e
);

62 i‡(
ªad£t
)

64 
	`FD_SET
(
sockë
, &
fds_r
);

65 
£À˘_Êag
 = 1;

66 
pfds_r
&
fds_r
;

69 i‡(
wrôe£t
)

71 
	`FD_SET
(
sockë
, &
fds_w
);

72 
£À˘_Êag
 = 1;

73 
pfds_w
 = &
fds_w
;

76 i‡(
ex˚±£t
)

78 
	`FD_SET
(
sockë
, &
fds_e
);

79 
£À˘_Êag
 = 1;

80 
pfds_e
 = &
fds_e
;

83 i‡(
£À˘_Êag
 == 0)

85 
ERROR_EXIT
;

88 
s32Rë
 = 
	`£À˘
–
sockë
+1, 
pfds_r
, 
pfds_w
, 
pfds_e
, &
tm
 );

89 i‡(
s32Rë
 < 0)

91 
ERROR_EXIT
;

94 i‡(
ªad£t
) *readset = 0;

95 i‡(
wrôe£t
) *writeset = 0;

96 i‡(
ex˚±£t
) *exceptset = 0;

98 i‡(
ªad£t
)

100 i‡(
	`FD_ISSET
(
sockë
, &
fds_r
))

102 *
ªad£t
 = 1;

106 i‡(
wrôe£t
)

108 i‡(
	`FD_ISSET
(
sockë
, &
fds_w
))

110 *
wrôe£t
 = 1;

114 i‡(
ex˚±£t
)

116 i‡(
	`FD_ISSET
(
sockë
, &
fds_e
))

118 *
ex˚±£t
 = 1;

121  
GOS_SUCCESS
;

123 
ERROR_EXIT
:

124 
	`¥ötf
("%s-£À˘Éº!!\n",
__FUNCTION__
);

126  
GOS_FAILURE
;

127 
	}
}

129 
	$sockë_ªv_d©a
(
sockë
, 
GOS_U8
* 
buf
, 
GOS_U32
 
Àngth
, 
GOS_U16
 
Êags
)

131 
s32Rë
 = -1;

132 
s32Rë
 = 
	`ªcv
(
sockë
, 
buf
, 
Àngth
, 
Êags
);

133 i‡(
s32Rë
 < 0)

135 
	`¥ötf
("%s-ªvÉº = %d,î∫o=%d!!\n",
__FUNCTION__
,
s32Rë
,
î∫o
);

139  
s32Rë
;

140 
	}
}

142 
GOS_S32
 
	$sockë_£nd_d©a
(
sockë
, 
GOS_U8
* 
buf
, 
GOS_U32
 
Àngth
, 
GOS_U16
 
Êags
)

144 
s32Rë
 = -1;

146 
s32Rë
 = 
	`£nd
(
sockë
, 
buf
, 
Àngth
, 
Êags
);

147 i‡(
s32Rë
 < 0)

149 
	`¥ötf
("%s-À¿%d--£ndÉº = %d,î∫o=%d!!\n",
__FUNCTION__
,
Àngth
,
s32Rë
,
î∫o
);

150  
GOS_FAILURE
;

153  
GOS_SUCCESS
;

154 
	}
}

156 
	$web_£nd_d©a
(
svc_modñ
, 
svc_cmd
, 
s32Rë
, * 
d©a
, 
d©a_Àn
, 
GOS_BOOL
 
Êag
)

158 
Web_Sockë_Msg_D©a_Hód
 
msg_hód
;

159 
GOS_U8
 
£nd_buf
[
MAX_SOCKET_BUF_LEN
];

160 
GOS_U32
 
£nd_d©a_Àn
 = 0;

162 i‡((
d©a
 =
GOS_NULL
Ë&& (
d©a_Àn
 > 0))

164 
	`¥ötf
("-00param inÉrr!!\n");

168 
	`mem£t
(&
msg_hód
, 0, (
Web_Sockë_Msg_D©a_Hód
));

169 
	`mem£t
(
£nd_buf
, 0, 
MAX_SOCKET_BUF_LEN
);

170 
msg_hód
.
moduÀ_id
 = 
svc_modñ
;

171 
msg_hód
.
comm™d_id
 = 
svc_cmd
;

172 
msg_hód
.
d©a_Àn
 = d©a_Àn+(
GOS_U32
);

173 
	`mem˝y
(
£nd_buf
, &
msg_hód
, (
Web_Sockë_Msg_D©a_Hód
));

174 *((
GOS_U32
*)(
£nd_buf
+(
Web_Sockë_Msg_D©a_Hód
))Ë(
s32Rë
==
GOS_SUCCESS
)?1:0;

175 i‡(
d©a_Àn
 > 0)

177 
	`mem˝y
(
£nd_buf
+(
Web_Sockë_Msg_D©a_Hód
)+(
GOS_U32
), 
d©a
, 
d©a_Àn
);

179 
	`GOS_CRC_32bCÆcuœã
(
£nd_buf
, (
d©a_Àn
+(
GOS_U32
)+(
Web_Sockë_Msg_D©a_Hód
)), &
msg_hód
.
d©a_¸c
);

180 
	`mem˝y
(
£nd_buf
, &
msg_hód
, (
Web_Sockë_Msg_D©a_Hód
));

181 
£nd_d©a_Àn
 = (
Web_Sockë_Msg_D©a_Hód
)+(
GOS_U32
)+
d©a_Àn
;

183 
	`sockë_£nd_d©a
(
sockë_fd_£rvî
, 
£nd_buf
, 
£nd_d©a_Àn
, 0);

184 i‡(
Êag
)

187 
	`OS_Sig«lSem≠h‹e
(
£m_webuiAc˚ss
);

190 
	}
}

192 
GOS_S32
 
	$∑r£_t•¨£modñ_cmd
(
t•¨£_cmd
, * 
d©a
, 
d©a_Àn
)

194 
GOS_BOOL
 
is_£nd
 = 
GOS_FALSE
;

195 
GOS_SVC_Modñ_TsP¨£
* 
t•¨£modñ
 = 
GOS_NULL
;

196 
GOS_U8
* 
ãmpd©a
 ;

198 
t•¨£modñ
 = (
GOS_SVC_Modñ_TsP¨£
*)
	`OS_AŒocMem‹y
((GOS_SVC_Model_TsParse));

199 i‡(
t•¨£modñ
 =
GOS_NULL
)

200  
GOS_FAILURE
;

202 
t•¨£modñ
->
t•¨£_cmd
 =Åsparse_cmd;

203 
t•¨£modñ
->
ˇŒback
 = 
web_£nd_d©a
;

204 
t•¨£_cmd
)

206 
GOS_SVC_CMD_TSPARSE_GET_INFO
:

208 
t•¨£modñ
->
t•¨£_d©a
 = 
GOS_NULL
;

209 
is_£nd
 = 
GOS_TRUE
;

213 
GOS_SVC_CMD_TSPARSE_SET_INFO
:

215 
ãmpd©a
 = (
GOS_U8
*)
	`OS_AŒocMem‹y
(
d©a_Àn
);

216 if(
GOS_NULL
 !
ãmpd©a
)

218 
	`mem£t
(
ãmpd©a
,0,
d©a_Àn
);

219 
	`mem˝y
(
ãmpd©a
,
d©a
,
d©a_Àn
);

220 
t•¨£modñ
->
t•¨£_d©a
 = 
ãmpd©a
;

221 
is_£nd
 = 
GOS_TRUE
;

226 
GOS_SVC_CMD_TSPARSE_STOP
:

228 
t•¨£modñ
->
t•¨£_d©a
 = 
GOS_NULL
;

229 
is_£nd
 = 
GOS_TRUE
;

233 
GOS_SVC_CMD_TSPARSE_GET_BITRATE
:

235 
t•¨£modñ
->
t•¨£_d©a
 = 
GOS_NULL
;

236 
is_£nd
 = 
GOS_TRUE
;

244 i‡((
is_£nd
Ë&& (
ui_ˇŒback
 !
GOS_NULL
))

246 
	`ui_ˇŒback
(
GOS_SVC_MODEL_TSPARSE
, 
t•¨£modñ
);

250 
	`web_£nd_d©a
(
GOS_SVC_MODEL_TSPARSE
, 
t•¨£_cmd
, 
GOS_FAILURE
, 
GOS_NULL
, 0, 0);

251 
	`OS_FªeMem‹y
(
t•¨£modñ
);

253  (
is_£nd
 ? 
GOS_SUCCESS
 : 
GOS_FAILURE
);

254 
	}
}

256 
GOS_S32
 
	$∑r£_Ÿhîmodñ_cmd
(
Ÿhî_cmd
, * 
d©a
, 
d©a_Àn
)

258 
GOS_BOOL
 
is_£nd
 = 
GOS_FALSE
;

259 
GOS_U8
* 
ãmpd©a
 ;

260 
GOS_SVC_Modñ_Othî
* 
Ÿhîmodñ
 = 
GOS_NULL
;

262 
Ÿhîmodñ
 = (
GOS_SVC_Modñ_Othî
*)
	`OS_AŒocMem‹y
((GOS_SVC_Model_Other));

263 i‡(
Ÿhîmodñ
 =
GOS_NULL
)

264  
GOS_FAILURE
;

266 
Ÿhîmodñ
->
Ÿhî_cmd
 = other_cmd;

267 
Ÿhîmodñ
->
ˇŒback
 = 
web_£nd_d©a
;

268 
Ÿhî_cmd
)

270 
GOS_SVC_CMD_OTHER_SOFTWARE_UPGRADE
:

272 
ãmpd©a
 = (
GOS_U8
*)
	`OS_AŒocMem‹y
(
d©a_Àn
);

273 if(
GOS_NULL
 !
ãmpd©a
)

275 
	`mem£t
(
ãmpd©a
,0,
d©a_Àn
);

276 
	`mem˝y
(
ãmpd©a
,
d©a
,
d©a_Àn
);

277 
Ÿhîmodñ
->
Ÿhî_d©a
 = 
ãmpd©a
;

278 
is_£nd
 = 
GOS_TRUE
;

282 
GOS_SVC_CMD_OTHER_SYSTEM_SETTING
:

284 
ãmpd©a
 = (
GOS_U8
*)
	`OS_AŒocMem‹y
(
d©a_Àn
);

285 if(
GOS_NULL
 !
ãmpd©a
)

287 
	`mem£t
(
ãmpd©a
,0,
d©a_Àn
);

288 
	`mem˝y
(
ãmpd©a
,
d©a
,
d©a_Àn
);

289 
Ÿhîmodñ
->
Ÿhî_d©a
 = 
ãmpd©a
;

290 
is_£nd
 = 
GOS_TRUE
;

298 i‡((
is_£nd
Ë&& (
ui_ˇŒback
 !
GOS_NULL
))

300 
	`ui_ˇŒback
(
GOS_SVC_MODEL_OTHER
, 
Ÿhîmodñ
);

304 
	`web_£nd_d©a
(
GOS_SVC_MODEL_OTHER
, 
Ÿhî_cmd
, 
GOS_FAILURE
, 
GOS_NULL
, 0, 0);

305 
	`OS_FªeMem‹y
(
Ÿhîmodñ
);

307  (
is_£nd
 ? 
GOS_SUCCESS
 : 
GOS_FAILURE
);

308 
	}
}

310 
GOS_S32
 
	$ªcv_msg_∑r£
(
GOS_U8
 *
d©a_buf
, 
d©a_Àn
)

312 
GOS_S32
 
s32Rë
 = 
GOS_SUCCESS
;

313 
GOS_U8
* 
d©a_ps
 = 
GOS_NULL
;

314 
GOS_U32
 
d©a_¸c
 = 0;

315 
GOS_U32
 
d©a_¸c_ãmp
 = 0;

316 
Web_Sockë_Msg_D©a_Hód
* 
msg_hód
 = (Web_Sockë_Msg_D©a_Hód*)
d©a_buf
;

318 i‡((
d©a_buf
 =
GOS_NULL
Ë|| (
d©a_Àn
 < ((
Web_Sockë_Msg_D©a_Hód
)+
msg_hód
->data_len)))

320 
	`LOG_ERROR
("-ªcv_msg_∑r£ d©a_À¿%d!!\n",
d©a_Àn
);

321  
GOS_FAILURE
;

323 
d©a_¸c
 = 
msg_hód
->data_crc;

324 
msg_hód
->
d©a_¸c
 = 0;

325 
	`GOS_CRC_32bCÆcuœã
(
d©a_buf
, ((
Web_Sockë_Msg_D©a_Hód
)+
msg_hód
->
d©a_Àn
), &
d©a_¸c_ãmp
);

326 i‡(
d©a_¸c
 =
d©a_¸c_ãmp
)

328 
d©a_ps
 = 
d©a_buf
+(
Web_Sockë_Msg_D©a_Hód
);

330 
msg_hód
->
moduÀ_id
)

332 
GOS_SVC_MODEL_TSPARSE
:

334 
s32Rë
 = 
	`∑r£_t•¨£modñ_cmd
(
msg_hód
->
comm™d_id
, 
d©a_ps
, msg_hód->
d©a_Àn
);

337 
GOS_SVC_MODEL_OTHER
:

339 
s32Rë
 = 
	`∑r£_Ÿhîmodñ_cmd
(
msg_hód
->
comm™d_id
, 
d©a_ps
, msg_hód->
d©a_Àn
);

348 
	`LOG_ERROR
("-d©a_¸c_ãm∞%x--d©®¸c=%x!\n", 
d©a_¸c_ãmp
, 
d©a_¸c
);

349 
s32Rë
 = 
GOS_FAILURE
;

352  
s32Rë
;

353 
	}
}

355 
	$webui_èsk
(* 
∑øm
)

357 
GOS_U8
 
ªad£t
 = 0;

358 
GOS_U8
 
ªv_buf
[
MAX_SOCKET_BUF_LEN
];

359 
GOS_S32
 
s32Rë
 = -1;

360 
GOS_S32
 
ª˚ive_Àn
 = 0;

361 
sockÀn_t
 
sö_size
;

362 
sockaddr_un
 
˛õ¡_addr
;

364 
sö_size
 = (
˛õ¡_addr
);

366 
webui_èsk_Êag
)

368 
sockë_fd_£rvî
 = 
	`ac˚±
(
sockë_fd_c⁄e˘
, (
sockaddr
 *)&
˛õ¡_addr
, &
sö_size
);

369 i‡(
sockë_fd_£rvî
 > 0)

371 
s32Rë
 = 
	`sockë_£À˘_d©a
(
sockë_fd_£rvî
, &
ªad£t
, 
GOS_NULL
, GOS_NULL, -1);

372 i‡((
ªad£t
 =1Ë&& (
s32Rë
 =
GOS_SUCCESS
))

374 
	`mem£t
(
ªv_buf
, 0, 
MAX_SOCKET_BUF_LEN
);

375 
ª˚ive_Àn
 = 
	`sockë_ªv_d©a
(
sockë_fd_£rvî
, 
ªv_buf
, 
MAX_SOCKET_BUF_LEN
, 
MSG_DONTWAIT
);

376 
s32Rë
 = 
	`ªcv_msg_∑r£
(
ªv_buf
, 
ª˚ive_Àn
);

378 i‡(
s32Rë
 =
GOS_SUCCESS
)

379 
	`OS_WaôSem≠h‹e
(
£m_webuiAc˚ss
);

381 
	`˛o£
(
sockë_fd_£rvî
);

385 
	`LOG_ERROR
("sockë_fd_£rvî !! sockë_fd_£rvî =%d\n",
sockë_fd_£rvî
);

390 
	}
}

392 
GOS_S32
 
	$GOS_WEB_Sœve_Inô
(
GOS_WEBUI_CÆlback
 
ˇŒback
)

394 
p‹t
 = 0;

395 
GOS_S32
 
s32Rë
 = 0;

396 
sockaddr_ö
 
£rvî_addr
;

398 
sockë_fd_c⁄e˘
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

399 i‡(
sockë_fd_c⁄e˘
 <= 0)

401 
	`LOG_ERROR
("ãmp_sockë_fd !!Åemp_sockë_fd =%d\n",
sockë_fd_c⁄e˘
);

402  
GOS_FAILURE
;

405 
p‹t
 = 
SLAVE_PORT
 + 
	`GOS_SYS_Gë_ChùID
();

406 
	`¥ötf
("\nweb sockë, chù:%d--p‹t:%d\n", 
	`GOS_SYS_Gë_ChùID
(), 
p‹t
);

408 
	`bzîo
(&
£rvî_addr
, (server_addr));

409 
£rvî_addr
.
sö_Ámûy
 = 
AF_INET
;

410 
£rvî_addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

411 
£rvî_addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

413 
›t
 = 1;

414 
	`£tsock›t
(
sockë_fd_c⁄e˘
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
›t
, (opt) );

416 
s32Rë
 = 
	`böd
(
sockë_fd_c⁄e˘
, (
sockaddr
*)&
£rvî_addr
, (server_addr));

417 i‡(
s32Rë
 < 0)

419 
	`LOG_ERROR
("böd !! s32Rë =%dÉºno:%d \n", 
s32Rë
, 
î∫o
);

420  
GOS_FAILURE
;

423 
s32Rë
 = 
	`li°í
(
sockë_fd_c⁄e˘
, 1);

424 i‡(
s32Rë
 < 0)

426 
	`LOG_ERROR
("li°í !! s32Rë = %d\n", 
s32Rë
);

427  
GOS_FAILURE
;

430 
webui_èsk_Êag
 = 
GOS_TRUE
;

431 
ui_ˇŒback
 = 
ˇŒback
;

433 
£m_webuiAc˚ss
 = 
	`OS_Cª©eSem≠h‹e
 (0);

434 i‡(!
	`OS_Cª©eTask
((*)
webui_èsk
, 
GOS_NULL
, &
Webui_TaskH™dÀ
))

436 
	`LOG_ERROR
("creat webui_task failure !!\n");

437  
GOS_FAILURE
;

440 
	`LOG_INFO
("GOS_WEB_Init Success!\n");

442  
GOS_SUCCESS
;

443 
	}
}

445 
GOS_S32
 
	$GOS_WEB_Inô
(
GOS_WEBUI_CÆlback
 
ˇŒback
)

447 
GOS_S32
 
s32Rë
 = 0;

448 
sockaddr_un
 
£rvî_addr
;

450 
sockë_fd_c⁄e˘
 = 
	`sockë
(
PF_UNIX
, 
SOCK_STREAM
, 0);

451 i‡(
sockë_fd_c⁄e˘
 <= 0)

453 
	`LOG_ERROR
("ãmp_sockë_fd !!Åemp_sockë_fd =%d\n",
sockë_fd_c⁄e˘
);

454  
GOS_FAILURE
;

457 
	`bzîo
(&
£rvî_addr
, (server_addr));

458 
£rvî_addr
.
sun_Ámûy
 = 
AF_UNIX
;

459 
	`°∫˝y
(
£rvî_addr
.
sun_∑th
, 
UNIX_DOMAIN
, (server_addr.sun_path) - 1);

461 
›t
 = 1;

462 
	`£tsock›t
(
sockë_fd_c⁄e˘
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
›t
, (opt) );

463 
	`u∆ök
(
UNIX_DOMAIN
);

465 
s32Rë
 = 
	`böd
(
sockë_fd_c⁄e˘
, (
sockaddr
*)&
£rvî_addr
, (server_addr));

466 i‡(
s32Rë
 < 0)

468 
	`LOG_ERROR
("böd !! s32Rë =%dÉºno:%d \n", 
s32Rë
, 
î∫o
);

469  
GOS_FAILURE
;

472 
s32Rë
 = 
	`li°í
(
sockë_fd_c⁄e˘
, 1);

473 i‡(
s32Rë
 < 0)

475 
	`LOG_ERROR
("li°í !! s32Rë = %d\n", 
s32Rë
);

476  
GOS_FAILURE
;

479 
webui_èsk_Êag
 = 
GOS_TRUE
;

480 
ui_ˇŒback
 = 
ˇŒback
;

482 
£m_webuiAc˚ss
 = 
	`OS_Cª©eSem≠h‹e
 (0);

483 i‡(!
	`OS_Cª©eTask
((*)
webui_èsk
, 
GOS_NULL
, &
Webui_TaskH™dÀ
))

485 
	`LOG_ERROR
("creat webui_task failure !!\n");

486  
GOS_FAILURE
;

489 
	`LOG_INFO
("GOS_WEB_Init Success!\n");

491  
GOS_SUCCESS
;

492 
	}
}

494 
GOS_S32
 
	$GOS_WEB_DeInô
()

496 
webui_èsk_Êag
 = 0;

498 i‡(
sockë_fd_£rvî
 > 0)

499 
	`˛o£
(
sockë_fd_£rvî
);

501 i‡(
sockë_fd_c⁄e˘
 > 0)

502 
	`˛o£
(
sockë_fd_c⁄e˘
);

504 
ui_ˇŒback
 = 
GOS_NULL
;

506 
	}
}

	@
1
.
0
61
2254
app/src/main/main.c
include/hisilicon/hi_common.h
include/hisilicon/hi_debug.h
include/hisilicon/hi_error_mpi.h
include/hisilicon/hi_module.h
include/hisilicon/hi_type.h
include/hisilicon/hi_unf_gpio.h
include/thirdparty/mediadistribution/rtp_multicast_api.h
include/thirdparty/mediadistribution/rtp_unicast_api.h
include/thirdparty/mediadistribution/udp_multicast_api.h
include/thirdparty/mediadistribution/udp_unicast_api.h
midware/include/gos_socket/socket_client.h
midware/include/gos_socket/socket_common.h
midware/include/gos_socket/socket_server.h
midware/include/gos_sys/gos_sys.h
midware/src/gos_socket/socket_client.c
midware/src/gos_socket/socket_common.c
midware/src/gos_socket/socket_server.c
midware/src/gos_sys/gos_sys.c
porting/include/crc/crc.h
porting/include/linuxos/linuxlist.h
porting/include/linuxos/linuxos.h
porting/include/linuxos/log.h
porting/include/linuxos/message.h
porting/include/linuxos/user_define.h
porting/include/threadpool/threadpool.h
porting/include/tsparse/GosTsr_AnalysisData.h
porting/include/tsparse/GosTsr_Common.h
porting/include/tsparse/GosTsr_Crc.h
porting/include/tsparse/GosTsr_Descriptor.h
porting/include/tsparse/TsErrorCheck_Common.h
porting/include/tsparse/TsErrorCheck_OneLevel.h
porting/include/tsparse/TsErrorCheck_ThreeLevel.h
porting/include/tsparse/TsErrorCheck_TwoLevel.h
porting/include/tsparse/tsparse_api.h
porting/include/tsparse/tsparse_file.h
porting/include/tsparse/tsparse_search.h
porting/include/tsparse/tsparse_update.h
porting/include/usb/usb_self.h
porting/include/usb/usbdesk.h
porting/include/web/svc_control.h
porting/include/web/web.h
porting/src/crc/crc.c
porting/src/linuxos/linuxos.c
porting/src/linuxos/log.c
porting/src/linuxos/message.c
porting/src/threadpool/threadpool.c
porting/src/tsparse/GosTsr_AnalysisData.c
porting/src/tsparse/GosTsr_Crc.c
porting/src/tsparse/GosTsr_Descriptor.c
porting/src/tsparse/TsErrorCheck_OneLevel.c
porting/src/tsparse/TsErrorCheck_ThreeLevel.c
porting/src/tsparse/TsErrorCheck_TwoLevel.c
porting/src/tsparse/tsparse_api.c
porting/src/tsparse/tsparse_file.c
porting/src/tsparse/tsparse_search.c
porting/src/tsparse/tsparse_update.c
porting/src/usb/usb_self.c
porting/src/usb/usbdesk.c
porting/src/web/svc_control.c
porting/src/web/web.c
